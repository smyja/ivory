comx subnet update key 23

Using node: wss://commune-api-node-21.communeai.net
╭────────────── Traceback (most recent call last) ───────────────╮
│ /Users/mac/Documents/GitHub/datagpt/mindsdb/env/lib/python3.10 │
│ /site-packages/communex/cli/subnet.py:189 in update            │
│                                                                │
│   186 │   │   provided_params["vote_mode"] = vote_mode.value   │
│   187 │   context = make_custom_context(ctx)                   │
│   188 │   client = context.com_client()                        │
│ ❱ 189 │   subnets_info = get_map_subnets_params(client)        │
│   190 │   subnet_params = subnets_info[netuid]                 │
│   191 │   subnet_vote_mode = subnet_params["governance_config" │
│   192 │   subnet_burn_config = subnet_params["module_burn_conf │
│                                                                │
│ ╭────────────────────────── locals ──────────────────────────╮ │
│ │           adjustment_alpha = None                          │ │
│ │                   bonds_ma = None                          │ │
│ │                     client = <communex.client.CommuneClie… │ │
│ │                              object at 0x1062e7520>        │ │
│ │                    context = CustomCtx(                    │ │
│ │                              │   ctx=<click.core.Context   │ │
│ │                              object at 0x1062e5f90>,       │ │
│ │                              │   console=<console width=66 │ │
│ │                              None>,                        │ │
│ │                              │   console_err=<console      │ │
│ │                              width=66 None>,               │ │
│ │                              │                             │ │
│ │                              _com_client=<communex.client… │ │
│ │                              object at 0x1062e7520>        │ │
│ │                              )                             │ │
│ │                        ctx = <click.core.Context object at │ │
│ │                              0x1062e5f90>                  │ │
│ │                    founder = None                          │ │
│ │              founder_share = None                          │ │
│ │            immunity_period = None                          │ │
│ │            incentive_ratio = None                          │ │
│ │                        key = 'maro'                        │ │
│ │           max_allowed_uids = None                          │ │
│ │     max_allowed_validators = None                          │ │
│ │        max_allowed_weights = None                          │ │
│ │                   max_burn = None                          │ │
│ │ max_registrations_per_inter… None                          │ │
│ │                            =                               │ │
│ │             max_weight_age = None                          │ │
│ │ maximum_set_weight_calls_pe… None                          │ │
│ │                            =                               │ │
│ │                   metadata = None                          │ │
│ │        min_allowed_weights = None                          │ │
│ │                   min_burn = None                          │ │
│ │        min_validator_stake = None                          │ │
│ │                       name = None                          │ │
│ │                     netuid = 23                            │ │
│ │            provided_params = {}                            │ │
│ │ target_registrations_interv… None                          │ │
│ │                            =                               │ │
│ │ target_registrations_per_in… None                          │ │
│ │                            =                               │ │
│ │                      tempo = None                          │ │
│ │                trust_ratio = None                          │ │
│ │                  vote_mode = None                          │ │
│ ╰────────────────────────────────────────────────────────────╯ │
│                                                                │
│ /Users/mac/Documents/GitHub/datagpt/mindsdb/env/lib/python3.10 │
│ /site-packages/communex/misc.py:136 in get_map_subnets_params  │
│                                                                │
│   133 │   """                                                  │
│   134 │   Gets all subnets info on the network                 │
│   135 │   """                                                  │
│ ❱ 136 │   bulk_query = client.query_batch_map(                 │
│   137 │   │   {                                                │
│   138 │   │   │   "SubspaceModule": [                          │
│   139 │   │   │   │   ("ImmunityPeriod", []),                  │
│                                                                │
│ ╭────────────────────────── locals ──────────────────────────╮ │
│ │ block_hash = None                                          │ │
│ │     client = <communex.client.CommuneClient object at      │ │
│ │              0x1062e7520>                                  │ │
│ ╰────────────────────────────────────────────────────────────╯ │
│                                                                │
│ /Users/mac/Documents/GitHub/datagpt/mindsdb/env/lib/python3.10 │
│ /site-packages/communex/client.py:680 in query_batch_map       │
│                                                                │
│    677 │   │   │   with self.get_conn(init=True) as substrate: │
│    678 │   │   │   │   block_hash = substrate.get_block_hash() │
│    679 │   │   for storage, queries in functions.items():      │
│ ❱  680 │   │   │   chunks, chunks_info = get_page()            │
│    681 │   │   │   # if this doesn't happen something is wrong │
│    682 │   │   │   # and we won't be able to decode the data p │
│    683 │   │   │   assert len(chunks) == len(chunks_info)      │
│                                                                │
│ ╭────────────────────────── locals ──────────────────────────╮ │
│ │       block_hash = '0xe4253b694856cc8611d3152ea745df2ee9b… │ │
│ │        functions = {                                       │ │
│ │                    │   'SubspaceModule': [                 │ │
│ │                    │   │   ('ImmunityPeriod', []),         │ │
│ │                    │   │   ('MinAllowedWeights', []),      │ │
│ │                    │   │   ('MaxAllowedWeights', []),      │ │
│ │                    │   │   ('Tempo', []),                  │ │
│ │                    │   │   ('MaxAllowedUids', []),         │ │
│ │                    │   │   ('Founder', []),                │ │
│ │                    │   │   ('FounderShare', []),           │ │
│ │                    │   │   ('IncentiveRatio', []),         │ │
│ │                    │   │   ('TrustRatio', []),             │ │
│ │                    │   │   ('SubnetNames', []),            │ │
│ │                    │   │   ... +7                          │ │
│ │                    │   ],                                  │ │
│ │                    │   'GovernanceModule': [               │ │
│ │                    │   │   (                               │ │
│ │                    │   │   │   'SubnetGovernanceConfig',   │ │
│ │                    │   │   │   []                          │ │
│ │                    │   │   )                               │ │
│ │                    │   ],                                  │ │
│ │                    │   'SubnetEmissionModule': [           │ │
│ │                    │   │   ('SubnetEmission', [])          │ │
│ │                    │   ]                                   │ │
│ │                    }                                       │ │
│ │         get_page = <function                               │ │
│ │                    CommuneClient.query_batch_map.<locals>… │ │
│ │                    at 0x1062d6680>                         │ │
│ │     multi_result = {}                                      │ │
│ │          queries = [                                       │ │
│ │                    │   ('ImmunityPeriod', []),             │ │
│ │                    │   ('MinAllowedWeights', []),          │ │
│ │                    │   ('MaxAllowedWeights', []),          │ │
│ │                    │   ('Tempo', []),                      │ │
│ │                    │   ('MaxAllowedUids', []),             │ │
│ │                    │   ('Founder', []),                    │ │
│ │                    │   ('FounderShare', []),               │ │
│ │                    │   ('IncentiveRatio', []),             │ │
│ │                    │   ('TrustRatio', []),                 │ │
│ │                    │   ('SubnetNames', []),                │ │
│ │                    │   ... +7                              │ │
│ │                    ]                                       │ │
│ │ recursive_update = <function                               │ │
│ │                    CommuneClient.query_batch_map.<locals>… │ │
│ │                    at 0x1062d6440>                         │ │
│ │             self = <communex.client.CommuneClient object   │ │
│ │                    at 0x1062e7520>                         │ │
│ │          storage = 'SubspaceModule'                        │ │
│ │        substrate = <substrateinterface.base.SubstrateInte… │ │
│ │                    object at 0x106363a30>                  │ │
│ ╰────────────────────────────────────────────────────────────╯ │
│                                                                │
│ /Users/mac/Documents/GitHub/datagpt/mindsdb/env/lib/python3.10 │
│ /site-packages/communex/client.py:657 in get_page              │
│                                                                │
│    654 │   │   │   return d  # type: ignore                    │
│    655 │   │                                                   │
│    656 │   │   def get_page():                                 │
│ ❱  657 │   │   │   send, prefix_list = self._get_storage_keys( │
│    658 │   │   │   with self.get_conn(init=True) as substrate: │
│    659 │   │   │   │   function_parameters = self._get_lists(s │
│    660 │   │   │   responses = self._rpc_request_batch(send)   │
│                                                                │
│ ╭────────────────────────── locals ──────────────────────────╮ │
│ │ block_hash = '0xe4253b694856cc8611d3152ea745df2ee9b15854b… │ │
│ │    queries = [                                             │ │
│ │              │   ('ImmunityPeriod', []),                   │ │
│ │              │   ('MinAllowedWeights', []),                │ │
│ │              │   ('MaxAllowedWeights', []),                │ │
│ │              │   ('Tempo', []),                            │ │
│ │              │   ('MaxAllowedUids', []),                   │ │
│ │              │   ('Founder', []),                          │ │
│ │              │   ('FounderShare', []),                     │ │
│ │              │   ('IncentiveRatio', []),                   │ │
│ │              │   ('TrustRatio', []),                       │ │
│ │              │   ('SubnetNames', []),                      │ │
│ │              │   ... +7                                    │ │
│ │              ]                                             │ │
│ │       self = <communex.client.CommuneClient object at      │ │
│ │              0x1062e7520>                                  │ │
│ │    storage = 'SubspaceModule'                              │ │
│ ╰────────────────────────────────────────────────────────────╯ │
│                                                                │
│ /Users/mac/Documents/GitHub/datagpt/mindsdb/env/lib/python3.10 │
│ /site-packages/communex/client.py:136 in _get_storage_keys     │
│                                                                │
│    133 │   │   key_idx = 0                                     │
│    134 │   │   with self.get_conn(init=True) as substrate:     │
│    135 │   │   │   for function, params in queries:            │
│ ❱  136 │   │   │   │   storage_key = StorageKey.create_from_st │
│    137 │   │   │   │   │   storage, function, params, runtime_ │
│    138 │   │   │   │   )                                       │
│    139                                                         │
│                                                                │
│ ╭────────────────────────── locals ──────────────────────────╮ │
│ │  block_hash = '0xe4253b694856cc8611d3152ea745df2ee9b15854… │ │
│ │    function = 'TrustRatio'                                 │ │
│ │     key_idx = 8                                            │ │
│ │      params = []                                           │ │
│ │      prefix = '0xfa2dcd15f5dbd62ecb666a7311ab6f836ffd1c80… │ │
│ │ prefix_list = [                                            │ │
│ │               │                                            │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f83b6522cfe… │ │
│ │               │                                            │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f835cd1c97e… │ │
│ │               │                                            │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f8375af7e49… │ │
│ │               │                                            │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f837641384b… │ │
│ │               │                                            │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f83fabe6b13… │ │
│ │               │                                            │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f8395999521… │ │
│ │               │                                            │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f83953f5136… │ │
│ │               │                                            │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f836ffd1c80… │ │
│ │               ]                                            │ │
│ │     queries = [                                            │ │
│ │               │   ('ImmunityPeriod', []),                  │ │
│ │               │   ('MinAllowedWeights', []),               │ │
│ │               │   ('MaxAllowedWeights', []),               │ │
│ │               │   ('Tempo', []),                           │ │
│ │               │   ('MaxAllowedUids', []),                  │ │
│ │               │   ('Founder', []),                         │ │
│ │               │   ('FounderShare', []),                    │ │
│ │               │   ('IncentiveRatio', []),                  │ │
│ │               │   ('TrustRatio', []),                      │ │
│ │               │   ('SubnetNames', []),                     │ │
│ │               │   ... +7                                   │ │
│ │               ]                                            │ │
│ │        self = <communex.client.CommuneClient object at     │ │
│ │               0x1062e7520>                                 │ │
│ │        send = [                                            │ │
│ │               │   (                                        │ │
│ │               │   │   'state_getKeys',                     │ │
│ │               │   │   [                                    │ │
│ │               │   │   │                                    │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f83b6522cfe… │ │
│ │               │   │   │                                    │ │
│ │               '0xe4253b694856cc8611d3152ea745df2ee9b15854… │ │
│ │               │   │   ]                                    │ │
│ │               │   ),                                       │ │
│ │               │   (                                        │ │
│ │               │   │   'state_getKeys',                     │ │
│ │               │   │   [                                    │ │
│ │               │   │   │                                    │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f835cd1c97e… │ │
│ │               │   │   │                                    │ │
│ │               '0xe4253b694856cc8611d3152ea745df2ee9b15854… │ │
│ │               │   │   ]                                    │ │
│ │               │   ),                                       │ │
│ │               │   (                                        │ │
│ │               │   │   'state_getKeys',                     │ │
│ │               │   │   [                                    │ │
│ │               │   │   │                                    │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f8375af7e49… │ │
│ │               │   │   │                                    │ │
│ │               '0xe4253b694856cc8611d3152ea745df2ee9b15854… │ │
│ │               │   │   ]                                    │ │
│ │               │   ),                                       │ │
│ │               │   (                                        │ │
│ │               │   │   'state_getKeys',                     │ │
│ │               │   │   [                                    │ │
│ │               │   │   │                                    │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f837641384b… │ │
│ │               │   │   │                                    │ │
│ │               '0xe4253b694856cc8611d3152ea745df2ee9b15854… │ │
│ │               │   │   ]                                    │ │
│ │               │   ),                                       │ │
│ │               │   (                                        │ │
│ │               │   │   'state_getKeys',                     │ │
│ │               │   │   [                                    │ │
│ │               │   │   │                                    │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f83fabe6b13… │ │
│ │               │   │   │                                    │ │
│ │               '0xe4253b694856cc8611d3152ea745df2ee9b15854… │ │
│ │               │   │   ]                                    │ │
│ │               │   ),                                       │ │
│ │               │   (                                        │ │
│ │               │   │   'state_getKeys',                     │ │
│ │               │   │   [                                    │ │
│ │               │   │   │                                    │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f8395999521… │ │
│ │               │   │   │                                    │ │
│ │               '0xe4253b694856cc8611d3152ea745df2ee9b15854… │ │
│ │               │   │   ]                                    │ │
│ │               │   ),                                       │ │
│ │               │   (                                        │ │
│ │               │   │   'state_getKeys',                     │ │
│ │               │   │   [                                    │ │
│ │               │   │   │                                    │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f83953f5136… │ │
│ │               │   │   │                                    │ │
│ │               '0xe4253b694856cc8611d3152ea745df2ee9b15854… │ │
│ │               │   │   ]                                    │ │
│ │               │   ),                                       │ │
│ │               │   (                                        │ │
│ │               │   │   'state_getKeys',                     │ │
│ │               │   │   [                                    │ │
│ │               │   │   │                                    │ │
│ │               '0xfa2dcd15f5dbd62ecb666a7311ab6f836ffd1c80… │ │
│ │               │   │   │                                    │ │
│ │               '0xe4253b694856cc8611d3152ea745df2ee9b15854… │ │
│ │               │   │   ]                                    │ │
│ │               │   )                                        │ │
│ │               ]                                            │ │
│ │     storage = 'SubspaceModule'                             │ │
│ │ storage_key = <StorageKey(pallet=SubspaceModule,           │ │
│ │               storage_function=IncentiveRatio, params=[])> │ │
│ │   substrate = <substrateinterface.base.SubstrateInterface  │ │
│ │               object at 0x106363a30>                       │ │
│ ╰────────────────────────────────────────────────────────────╯ │
│                                                                │
│ /Users/mac/Documents/GitHub/datagpt/mindsdb/env/lib/python3.10 │
│ /site-packages/substrateinterface/storage.py:113 in            │
│ create_from_storage_function                                   │
│                                                                │
│   110 │   │   │   data=None, runtime_config=runtime_config, me │
│   111 │   │   )                                                │
│   112 │   │                                                    │
│ ❱ 113 │   │   storage_key_obj.generate()                       │
│   114 │   │                                                    │
│   115 │   │   return storage_key_obj                           │
│   116                                                          │
│                                                                │
│ ╭────────────────────────── locals ──────────────────────────╮ │
│ │              cls = <class                                  │ │
│ │                    'substrateinterface.storage.StorageKey… │ │
│ │         metadata = <MetadataVersioned(value=('0x6d657461', │ │
│ │                    {'V14': {'types': {'types': [{'id': 0,  │ │
│ │                    'type': {'path': ['sp_core', 'crypto',  │ │
│ │                    'AccountId32'], 'params': [], 'def':    │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 1, 'typeName': '[u8;      │ │
│ │                    32]', 'docs': []}]}}, 'docs': []}},     │ │
│ │                    {'id': 1, 'type': {'path': [],          │ │
│ │                    'params': [], 'def': {'array': {'len':  │ │
│ │                    32, 'type': 2}}, 'docs': []}}, {'id':   │ │
│ │                    2, 'type': {'path': [], 'params': [],   │ │
│ │                    'def': {'primitive': 'u8'}, 'docs':     │ │
│ │                    []}}, {'id': 3, 'type': {'path':        │ │
│ │                    ['frame_system', 'AccountInfo'],        │ │
│ │                    'params': [{'name': 'Nonce', 'type':    │ │
│ │                    4}, {'name': 'AccountData', 'type':     │ │
│ │                    5}], 'def': {'composite': {'fields':    │ │
│ │                    [{'name': 'nonce', 'type': 4,           │ │
│ │                    'typeName': 'Nonce', 'docs': []},       │ │
│ │                    {'name': 'consumers', 'type': 4,        │ │
│ │                    'typeName': 'RefCount', 'docs': []},    │ │
│ │                    {'name': 'providers', 'type': 4,        │ │
│ │                    'typeName': 'RefCount', 'docs': []},    │ │
│ │                    {'name': 'sufficients', 'type': 4,      │ │
│ │                    'typeName': 'RefCount', 'docs': []},    │ │
│ │                    {'name': 'data', 'type': 5, 'typeName': │ │
│ │                    'AccountData', 'docs': []}]}}, 'docs':  │ │
│ │                    []}}, {'id': 4, 'type': {'path': [],    │ │
│ │                    'params': [], 'def': {'primitive':      │ │
│ │                    'u32'}, 'docs': []}}, {'id': 5, 'type': │ │
│ │                    {'path': ['pallet_balances', 'types',   │ │
│ │                    'AccountData'], 'params': [{'name':     │ │
│ │                    'Balance', 'type': 6}], 'def':          │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'free', 'type': 6, 'typeName':          │ │
│ │                    'Balance', 'docs': []}, {'name':        │ │
│ │                    'reserved', 'type': 6, 'typeName':      │ │
│ │                    'Balance', 'docs': []}, {'name':        │ │
│ │                    'frozen', 'type': 6, 'typeName':        │ │
│ │                    'Balance', 'docs': []}, {'name':        │ │
│ │                    'flags', 'type': 7, 'typeName':         │ │
│ │                    'ExtraFlags', 'docs': []}]}}, 'docs':   │ │
│ │                    []}}, {'id': 6, 'type': {'path': [],    │ │
│ │                    'params': [], 'def': {'primitive':      │ │
│ │                    'u64'}, 'docs': []}}, {'id': 7, 'type': │ │
│ │                    {'path': ['pallet_balances', 'types',   │ │
│ │                    'ExtraFlags'], 'params': [], 'def':     │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 8, 'typeName': 'u128',    │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id': 8, │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'primitive': 'u128'}, 'docs':   │ │
│ │                    []}}, {'id': 9, 'type': {'path': [],    │ │
│ │                    'params': [], 'def': {'primitive':      │ │
│ │                    'bool'}, 'docs': []}}, {'id': 10,       │ │
│ │                    'type': {'path': ['frame_support',      │ │
│ │                    'dispatch', 'PerDispatchClass'],        │ │
│ │                    'params': [{'name': 'T', 'type': 11}],  │ │
│ │                    'def': {'composite': {'fields':         │ │
│ │                    [{'name': 'normal', 'type': 11,         │ │
│ │                    'typeName': 'T', 'docs': []}, {'name':  │ │
│ │                    'operational', 'type': 11, 'typeName':  │ │
│ │                    'T', 'docs': []}, {'name': 'mandatory', │ │
│ │                    'type': 11, 'typeName': 'T', 'docs':    │ │
│ │                    []}]}}, 'docs': []}}, {'id': 11,        │ │
│ │                    'type': {'path': ['sp_weights',         │ │
│ │                    'weight_v2', 'Weight'], 'params': [],   │ │
│ │                    'def': {'composite': {'fields':         │ │
│ │                    [{'name': 'ref_time', 'type': 12,       │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'proof_size', 'type': 12,      │ │
│ │                    'typeName': 'u64', 'docs': []}]}},      │ │
│ │                    'docs': []}}, {'id': 12, 'type':        │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'compact': {'type': 6}}, 'docs': []}}, │ │
│ │                    {'id': 13, 'type': {'path':             │ │
│ │                    ['primitive_types', 'H256'], 'params':  │ │
│ │                    [], 'def': {'composite': {'fields':     │ │
│ │                    [{'name': None, 'type': 1, 'typeName':  │ │
│ │                    '[u8; 32]', 'docs': []}]}}, 'docs':     │ │
│ │                    []}}, {'id': 14, 'type': {'path': [],   │ │
│ │                    'params': [], 'def': {'sequence':       │ │
│ │                    {'type': 2}}, 'docs': []}}, {'id': 15,  │ │
│ │                    'type': {'path': ['sp_runtime',         │ │
│ │                    'generic', 'digest', 'Digest'],         │ │
│ │                    'params': [], 'def': {'composite':      │ │
│ │                    {'fields': [{'name': 'logs', 'type':    │ │
│ │                    16, 'typeName': 'Vec<DigestItem>',      │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    16, 'type': {'path': [], 'params': [],  │ │
│ │                    'def': {'sequence': {'type': 17}},      │ │
│ │                    'docs': []}}, {'id': 17, 'type':        │ │
│ │                    {'path': ['sp_runtime', 'generic',      │ │
│ │                    'digest', 'DigestItem'], 'params': [],  │ │
│ │                    'def': {'variant': {'variants':         │ │
│ │                    [{'name': 'PreRuntime', 'fields':       │ │
│ │                    [{'name': None, 'type': 18, 'typeName': │ │
│ │                    'ConsensusEngineId', 'docs': []},       │ │
│ │                    {'name': None, 'type': 14, 'typeName':  │ │
│ │                    'Vec<u8>', 'docs': []}], 'index': 6,    │ │
│ │                    'docs': []}, {'name': 'Consensus',      │ │
│ │                    'fields': [{'name': None, 'type': 18,   │ │
│ │                    'typeName': 'ConsensusEngineId',        │ │
│ │                    'docs': []}, {'name': None, 'type': 14, │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []}],    │ │
│ │                    'index': 4, 'docs': []}, {'name':       │ │
│ │                    'Seal', 'fields': [{'name': None,       │ │
│ │                    'type': 18, 'typeName':                 │ │
│ │                    'ConsensusEngineId', 'docs': []},       │ │
│ │                    {'name': None, 'type': 14, 'typeName':  │ │
│ │                    'Vec<u8>', 'docs': []}], 'index': 5,    │ │
│ │                    'docs': []}, {'name': 'Other',          │ │
│ │                    'fields': [{'name': None, 'type': 14,   │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []}],    │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'RuntimeEnvironmentUpdated', 'fields':  │ │
│ │                    [], 'index': 8, 'docs': []}]}}, 'docs': │ │
│ │                    []}}, {'id': 18, 'type': {'path': [],   │ │
│ │                    'params': [], 'def': {'array': {'len':  │ │
│ │                    4, 'type': 2}}, 'docs': []}}, {'id':    │ │
│ │                    19, 'type': {'path': [], 'params': [],  │ │
│ │                    'def': {'sequence': {'type': 20}},      │ │
│ │                    'docs': []}}, {'id': 20, 'type':        │ │
│ │                    {'path': ['frame_system',               │ │
│ │                    'EventRecord'], 'params': [{'name':     │ │
│ │                    'E', 'type': 21}, {'name': 'T', 'type': │ │
│ │                    13}], 'def': {'composite': {'fields':   │ │
│ │                    [{'name': 'phase', 'type': 54,          │ │
│ │                    'typeName': 'Phase', 'docs': []},       │ │
│ │                    {'name': 'event', 'type': 21,           │ │
│ │                    'typeName': 'E', 'docs': []}, {'name':  │ │
│ │                    'topics', 'type': 55, 'typeName':       │ │
│ │                    'Vec<T>', 'docs': []}]}}, 'docs': []}}, │ │
│ │                    {'id': 21, 'type': {'path':             │ │
│ │                    ['node_subspace_runtime',               │ │
│ │                    'RuntimeEvent'], 'params': [], 'def':   │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'System', 'fields': [{'name': None,     │ │
│ │                    'type': 22, 'typeName':                 │ │
│ │                    'frame_system::Event<Runtime>', 'docs': │ │
│ │                    []}], 'index': 0, 'docs': []}, {'name': │ │
│ │                    'Grandpa', 'fields': [{'name': None,    │ │
│ │                    'type': 31, 'typeName':                 │ │
│ │                    'pallet_grandpa::Event', 'docs': []}],  │ │
│ │                    'index': 3, 'docs': []}, {'name':       │ │
│ │                    'Balances', 'fields': [{'name': None,   │ │
│ │                    'type': 35, 'typeName':                 │ │
│ │                    'pallet_balances::Event<Runtime>',      │ │
│ │                    'docs': []}], 'index': 4, 'docs': []},  │ │
│ │                    {'name': 'TransactionPayment',          │ │
│ │                    'fields': [{'name': None, 'type': 37,   │ │
│ │                    'typeName':                             │ │
│ │                    'pallet_transaction_payment::Event<Run… │ │
│ │                    'docs': []}], 'index': 5, 'docs': []},  │ │
│ │                    {'name': 'Sudo', 'fields': [{'name':    │ │
│ │                    None, 'type': 38, 'typeName':           │ │
│ │                    'pallet_sudo::Event<Runtime>', 'docs':  │ │
│ │                    []}], 'index': 6, 'docs': []}, {'name': │ │
│ │                    'Multisig', 'fields': [{'name': None,   │ │
│ │                    'type': 42, 'typeName':                 │ │
│ │                    'pallet_multisig::Event<Runtime>',      │ │
│ │                    'docs': []}], 'index': 7, 'docs': []},  │ │
│ │                    {'name': 'Utility', 'fields': [{'name': │ │
│ │                    None, 'type': 44, 'typeName':           │ │
│ │                    'pallet_utility::Event', 'docs': []}],  │ │
│ │                    'index': 8, 'docs': []}, {'name':       │ │
│ │                    'SubspaceModule', 'fields': [{'name':   │ │
│ │                    None, 'type': 45, 'typeName':           │ │
│ │                    'pallet_subspace::Event<Runtime>',      │ │
│ │                    'docs': []}], 'index': 9, 'docs': []},  │ │
│ │                    {'name': 'GovernanceModule', 'fields':  │ │
│ │                    [{'name': None, 'type': 51, 'typeName': │ │
│ │                    'pallet_governance::Event<Runtime>',    │ │
│ │                    'docs': []}], 'index': 10, 'docs': []}, │ │
│ │                    {'name': 'SubnetEmissionModule',        │ │
│ │                    'fields': [{'name': None, 'type': 52,   │ │
│ │                    'typeName':                             │ │
│ │                    'pallet_subnet_emission::Event<Runtime… │ │
│ │                    'docs': []}], 'index': 11, 'docs': []}, │ │
│ │                    {'name': 'Offworker', 'fields':         │ │
│ │                    [{'name': None, 'type': 53, 'typeName': │ │
│ │                    'pallet_offworker::Event<Runtime>',     │ │
│ │                    'docs': []}], 'index': 12, 'docs':      │ │
│ │                    []}]}}, 'docs': []}}, {'id': 22,        │ │
│ │                    'type': {'path': ['frame_system',       │ │
│ │                    'pallet', 'Event'], 'params': [{'name': │ │
│ │                    'T', 'type': None}], 'def': {'variant': │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'ExtrinsicSuccess', 'fields': [{'name': │ │
│ │                    'dispatch_info', 'type': 23,            │ │
│ │                    'typeName': 'DispatchInfo', 'docs':     │ │
│ │                    []}], 'index': 0, 'docs': ['An          │ │
│ │                    extrinsic completed successfully.']},   │ │
│ │                    {'name': 'ExtrinsicFailed', 'fields':   │ │
│ │                    [{'name': 'dispatch_error', 'type': 26, │ │
│ │                    'typeName': 'DispatchError', 'docs':    │ │
│ │                    []}, {'name': 'dispatch_info', 'type':  │ │
│ │                    23, 'typeName': 'DispatchInfo', 'docs': │ │
│ │                    []}], 'index': 1, 'docs': ['An          │ │
│ │                    extrinsic failed.']}, {'name':          │ │
│ │                    'CodeUpdated', 'fields': [], 'index':   │ │
│ │                    2, 'docs': ['`:code` was updated.']},   │ │
│ │                    {'name': 'NewAccount', 'fields':        │ │
│ │                    [{'name': 'account', 'type': 0,         │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}], 'index': 3, 'docs': ['A new       │ │
│ │                    account was created.']}, {'name':       │ │
│ │                    'KilledAccount', 'fields': [{'name':    │ │
│ │                    'account', 'type': 0, 'typeName':       │ │
│ │                    'T::AccountId', 'docs': []}], 'index':  │ │
│ │                    4, 'docs': ['An account was reaped.']}, │ │
│ │                    {'name': 'Remarked', 'fields':          │ │
│ │                    [{'name': 'sender', 'type': 0,          │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'hash', 'type': 13,       │ │
│ │                    'typeName': 'T::Hash', 'docs': []}],    │ │
│ │                    'index': 5, 'docs': ['On on-chain       │ │
│ │                    remark happened.']}, {'name':           │ │
│ │                    'UpgradeAuthorized', 'fields':          │ │
│ │                    [{'name': 'code_hash', 'type': 13,      │ │
│ │                    'typeName': 'T::Hash', 'docs': []},     │ │
│ │                    {'name': 'check_version', 'type': 9,    │ │
│ │                    'typeName': 'bool', 'docs': []}],       │ │
│ │                    'index': 6, 'docs': ['An upgrade was    │ │
│ │                    authorized.']}]}}, 'docs': ['Event for  │ │
│ │                    the System pallet.']}}, {'id': 23,      │ │
│ │                    'type': {'path': ['frame_support',      │ │
│ │                    'dispatch', 'DispatchInfo'], 'params':  │ │
│ │                    [], 'def': {'composite': {'fields':     │ │
│ │                    [{'name': 'weight', 'type': 11,         │ │
│ │                    'typeName': 'Weight', 'docs': []},      │ │
│ │                    {'name': 'class', 'type': 24,           │ │
│ │                    'typeName': 'DispatchClass', 'docs':    │ │
│ │                    []}, {'name': 'pays_fee', 'type': 25,   │ │
│ │                    'typeName': 'Pays', 'docs': []}]}},     │ │
│ │                    'docs': []}}, {'id': 24, 'type':        │ │
│ │                    {'path': ['frame_support', 'dispatch',  │ │
│ │                    'DispatchClass'], 'params': [], 'def':  │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'Normal', 'fields': [], 'index': 0,     │ │
│ │                    'docs': []}, {'name': 'Operational',    │ │
│ │                    'fields': [], 'index': 1, 'docs': []},  │ │
│ │                    {'name': 'Mandatory', 'fields': [],     │ │
│ │                    'index': 2, 'docs': []}]}}, 'docs':     │ │
│ │                    []}}, {'id': 25, 'type': {'path':       │ │
│ │                    ['frame_support', 'dispatch', 'Pays'],  │ │
│ │                    'params': [], 'def': {'variant':        │ │
│ │                    {'variants': [{'name': 'Yes', 'fields': │ │
│ │                    [], 'index': 0, 'docs': []}, {'name':   │ │
│ │                    'No', 'fields': [], 'index': 1, 'docs': │ │
│ │                    []}]}}, 'docs': []}}, {'id': 26,        │ │
│ │                    'type': {'path': ['sp_runtime',         │ │
│ │                    'DispatchError'], 'params': [], 'def':  │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'Other', 'fields': [], 'index': 0,      │ │
│ │                    'docs': []}, {'name': 'CannotLookup',   │ │
│ │                    'fields': [], 'index': 1, 'docs': []},  │ │
│ │                    {'name': 'BadOrigin', 'fields': [],     │ │
│ │                    'index': 2, 'docs': []}, {'name':       │ │
│ │                    'Module', 'fields': [{'name': None,     │ │
│ │                    'type': 27, 'typeName': 'ModuleError',  │ │
│ │                    'docs': []}], 'index': 3, 'docs': []},  │ │
│ │                    {'name': 'ConsumerRemaining', 'fields': │ │
│ │                    [], 'index': 4, 'docs': []}, {'name':   │ │
│ │                    'NoProviders', 'fields': [], 'index':   │ │
│ │                    5, 'docs': []}, {'name':                │ │
│ │                    'TooManyConsumers', 'fields': [],       │ │
│ │                    'index': 6, 'docs': []}, {'name':       │ │
│ │                    'Token', 'fields': [{'name': None,      │ │
│ │                    'type': 28, 'typeName': 'TokenError',   │ │
│ │                    'docs': []}], 'index': 7, 'docs': []},  │ │
│ │                    {'name': 'Arithmetic', 'fields':        │ │
│ │                    [{'name': None, 'type': 29, 'typeName': │ │
│ │                    'ArithmeticError', 'docs': []}],        │ │
│ │                    'index': 8, 'docs': []}, {'name':       │ │
│ │                    'Transactional', 'fields': [{'name':    │ │
│ │                    None, 'type': 30, 'typeName':           │ │
│ │                    'TransactionalError', 'docs': []}],     │ │
│ │                    'index': 9, 'docs': []}, {'name':       │ │
│ │                    'Exhausted', 'fields': [], 'index': 10, │ │
│ │                    'docs': []}, {'name': 'Corruption',     │ │
│ │                    'fields': [], 'index': 11, 'docs': []}, │ │
│ │                    {'name': 'Unavailable', 'fields': [],   │ │
│ │                    'index': 12, 'docs': []}, {'name':      │ │
│ │                    'RootNotAllowed', 'fields': [],         │ │
│ │                    'index': 13, 'docs': []}]}}, 'docs':    │ │
│ │                    []}}, {'id': 27, 'type': {'path':       │ │
│ │                    ['sp_runtime', 'ModuleError'],          │ │
│ │                    'params': [], 'def': {'composite':      │ │
│ │                    {'fields': [{'name': 'index', 'type':   │ │
│ │                    2, 'typeName': 'u8', 'docs': []},       │ │
│ │                    {'name': 'error', 'type': 18,           │ │
│ │                    'typeName': '[u8;                       │ │
│ │                    MAX_MODULE_ERROR_ENCODED_SIZE]',        │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    28, 'type': {'path': ['sp_runtime',     │ │
│ │                    'TokenError'], 'params': [], 'def':     │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'FundsUnavailable', 'fields': [],       │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'OnlyProvider', 'fields': [], 'index':  │ │
│ │                    1, 'docs': []}, {'name':                │ │
│ │                    'BelowMinimum', 'fields': [], 'index':  │ │
│ │                    2, 'docs': []}, {'name':                │ │
│ │                    'CannotCreate', 'fields': [], 'index':  │ │
│ │                    3, 'docs': []}, {'name':                │ │
│ │                    'UnknownAsset', 'fields': [], 'index':  │ │
│ │                    4, 'docs': []}, {'name': 'Frozen',      │ │
│ │                    'fields': [], 'index': 5, 'docs': []},  │ │
│ │                    {'name': 'Unsupported', 'fields': [],   │ │
│ │                    'index': 6, 'docs': []}, {'name':       │ │
│ │                    'CannotCreateHold', 'fields': [],       │ │
│ │                    'index': 7, 'docs': []}, {'name':       │ │
│ │                    'NotExpendable', 'fields': [], 'index': │ │
│ │                    8, 'docs': []}, {'name': 'Blocked',     │ │
│ │                    'fields': [], 'index': 9, 'docs':       │ │
│ │                    []}]}}, 'docs': []}}, {'id': 29,        │ │
│ │                    'type': {'path': ['sp_arithmetic',      │ │
│ │                    'ArithmeticError'], 'params': [],       │ │
│ │                    'def': {'variant': {'variants':         │ │
│ │                    [{'name': 'Underflow', 'fields': [],    │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'Overflow', 'fields': [], 'index': 1,   │ │
│ │                    'docs': []}, {'name': 'DivisionByZero', │ │
│ │                    'fields': [], 'index': 2, 'docs':       │ │
│ │                    []}]}}, 'docs': []}}, {'id': 30,        │ │
│ │                    'type': {'path': ['sp_runtime',         │ │
│ │                    'TransactionalError'], 'params': [],    │ │
│ │                    'def': {'variant': {'variants':         │ │
│ │                    [{'name': 'LimitReached', 'fields': [], │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'NoLayer', 'fields': [], 'index': 1,    │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    31, 'type': {'path': ['pallet_grandpa', │ │
│ │                    'pallet', 'Event'], 'params': [],       │ │
│ │                    'def': {'variant': {'variants':         │ │
│ │                    [{'name': 'NewAuthorities', 'fields':   │ │
│ │                    [{'name': 'authority_set', 'type': 32,  │ │
│ │                    'typeName': 'AuthorityList', 'docs':    │ │
│ │                    []}], 'index': 0, 'docs': ['New         │ │
│ │                    authority set has been applied.']},     │ │
│ │                    {'name': 'Paused', 'fields': [],        │ │
│ │                    'index': 1, 'docs': ['Current authority │ │
│ │                    set has been paused.']}, {'name':       │ │
│ │                    'Resumed', 'fields': [], 'index': 2,    │ │
│ │                    'docs': ['Current authority set has     │ │
│ │                    been resumed.']}]}}, 'docs': ['The      │ │
│ │                    `Event` enum of this pallet']}}, {'id': │ │
│ │                    32, 'type': {'path': [], 'params': [],  │ │
│ │                    'def': {'sequence': {'type': 33}},      │ │
│ │                    'docs': []}}, {'id': 33, 'type':        │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'tuple': [34, 6]}, 'docs': []}},       │ │
│ │                    {'id': 34, 'type': {'path':             │ │
│ │                    ['sp_consensus_grandpa', 'app',         │ │
│ │                    'Public'], 'params': [], 'def':         │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 1, 'typeName':            │ │
│ │                    'ed25519::Public', 'docs': []}]}},      │ │
│ │                    'docs': []}}, {'id': 35, 'type':        │ │
│ │                    {'path': ['pallet_balances', 'pallet',  │ │
│ │                    'Event'], 'params': [{'name': 'T',      │ │
│ │                    'type': None}, {'name': 'I', 'type':    │ │
│ │                    None}], 'def': {'variant': {'variants': │ │
│ │                    [{'name': 'Endowed', 'fields':          │ │
│ │                    [{'name': 'account', 'type': 0,         │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'free_balance', 'type':   │ │
│ │                    6, 'typeName': 'T::Balance', 'docs':    │ │
│ │                    []}], 'index': 0, 'docs': ['An account  │ │
│ │                    was created with some free balance.']}, │ │
│ │                    {'name': 'DustLost', 'fields':          │ │
│ │                    [{'name': 'account', 'type': 0,         │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 1, 'docs': ['An account was    │ │
│ │                    removed whose balance was non-zero but  │ │
│ │                    below ExistentialDeposit,', 'resulting  │ │
│ │                    in an outright loss.']}, {'name':       │ │
│ │                    'Transfer', 'fields': [{'name': 'from', │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': 'to', 'type': 0,  │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 2, 'docs': ['Transfer          │ │
│ │                    succeeded.']}, {'name': 'BalanceSet',   │ │
│ │                    'fields': [{'name': 'who', 'type': 0,   │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'free', 'type': 6,        │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 3, 'docs': ['A balance was set │ │
│ │                    by root.']}, {'name': 'Reserved',       │ │
│ │                    'fields': [{'name': 'who', 'type': 0,   │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 4, 'docs': ['Some balance was  │ │
│ │                    reserved (moved from free to            │ │
│ │                    reserved).']}, {'name': 'Unreserved',   │ │
│ │                    'fields': [{'name': 'who', 'type': 0,   │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 5, 'docs': ['Some balance was  │ │
│ │                    unreserved (moved from reserved to      │ │
│ │                    free).']}, {'name':                     │ │
│ │                    'ReserveRepatriated', 'fields':         │ │
│ │                    [{'name': 'from', 'type': 0,            │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'to', 'type': 0,          │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []},  │ │
│ │                    {'name': 'destination_status', 'type':  │ │
│ │                    36, 'typeName': 'Status', 'docs': []}], │ │
│ │                    'index': 6, 'docs': ['Some balance was  │ │
│ │                    moved from the reserve of the first     │ │
│ │                    account to the second account.', 'Final │ │
│ │                    argument indicates the destination      │ │
│ │                    balance type.']}, {'name': 'Deposit',   │ │
│ │                    'fields': [{'name': 'who', 'type': 0,   │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 7, 'docs': ['Some amount was   │ │
│ │                    deposited (e.g. for transaction         │ │
│ │                    fees).']}, {'name': 'Withdraw',         │ │
│ │                    'fields': [{'name': 'who', 'type': 0,   │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 8, 'docs': ['Some amount was   │ │
│ │                    withdrawn from the account (e.g. for    │ │
│ │                    transaction fees).']}, {'name':         │ │
│ │                    'Slashed', 'fields': [{'name': 'who',   │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': 'amount', 'type': │ │
│ │                    6, 'typeName': 'T::Balance', 'docs':    │ │
│ │                    []}], 'index': 9, 'docs': ['Some amount │ │
│ │                    was removed from the account (e.g. for  │ │
│ │                    misbehavior).']}, {'name': 'Minted',    │ │
│ │                    'fields': [{'name': 'who', 'type': 0,   │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 10, 'docs': ['Some amount was  │ │
│ │                    minted into an account.']}, {'name':    │ │
│ │                    'Burned', 'fields': [{'name': 'who',    │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': 'amount', 'type': │ │
│ │                    6, 'typeName': 'T::Balance', 'docs':    │ │
│ │                    []}], 'index': 11, 'docs': ['Some       │ │
│ │                    amount was burned from an account.']},  │ │
│ │                    {'name': 'Suspended', 'fields':         │ │
│ │                    [{'name': 'who', 'type': 0, 'typeName': │ │
│ │                    'T::AccountId', 'docs': []}, {'name':   │ │
│ │                    'amount', 'type': 6, 'typeName':        │ │
│ │                    'T::Balance', 'docs': []}], 'index':    │ │
│ │                    12, 'docs': ['Some amount was suspended │ │
│ │                    from an account (it can be restored     │ │
│ │                    later).']}, {'name': 'Restored',        │ │
│ │                    'fields': [{'name': 'who', 'type': 0,   │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 13, 'docs': ['Some amount was  │ │
│ │                    restored into an account.']}, {'name':  │ │
│ │                    'Upgraded', 'fields': [{'name': 'who',  │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}], 'index': 14, 'docs': ['An │ │
│ │                    account was upgraded.']}, {'name':      │ │
│ │                    'Issued', 'fields': [{'name': 'amount', │ │
│ │                    'type': 6, 'typeName': 'T::Balance',    │ │
│ │                    'docs': []}], 'index': 15, 'docs':      │ │
│ │                    ['Total issuance was increased by       │ │
│ │                    `amount`, creating a credit to be       │ │
│ │                    balanced.']}, {'name': 'Rescinded',     │ │
│ │                    'fields': [{'name': 'amount', 'type':   │ │
│ │                    6, 'typeName': 'T::Balance', 'docs':    │ │
│ │                    []}], 'index': 16, 'docs': ['Total      │ │
│ │                    issuance was decreased by `amount`,     │ │
│ │                    creating a debt to be balanced.']},     │ │
│ │                    {'name': 'Locked', 'fields': [{'name':  │ │
│ │                    'who', 'type': 0, 'typeName':           │ │
│ │                    'T::AccountId', 'docs': []}, {'name':   │ │
│ │                    'amount', 'type': 6, 'typeName':        │ │
│ │                    'T::Balance', 'docs': []}], 'index':    │ │
│ │                    17, 'docs': ['Some balance was          │ │
│ │                    locked.']}, {'name': 'Unlocked',        │ │
│ │                    'fields': [{'name': 'who', 'type': 0,   │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 18, 'docs': ['Some balance was │ │
│ │                    unlocked.']}, {'name': 'Frozen',        │ │
│ │                    'fields': [{'name': 'who', 'type': 0,   │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 19, 'docs': ['Some balance was │ │
│ │                    frozen.']}, {'name': 'Thawed',          │ │
│ │                    'fields': [{'name': 'who', 'type': 0,   │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 20, 'docs': ['Some balance was │ │
│ │                    thawed.']}, {'name':                    │ │
│ │                    'TotalIssuanceForced', 'fields':        │ │
│ │                    [{'name': 'old', 'type': 6, 'typeName': │ │
│ │                    'T::Balance', 'docs': []}, {'name':     │ │
│ │                    'new', 'type': 6, 'typeName':           │ │
│ │                    'T::Balance', 'docs': []}], 'index':    │ │
│ │                    21, 'docs': ['The `TotalIssuance` was   │ │
│ │                    forcefully changed.']}]}}, 'docs':      │ │
│ │                    ['The `Event` enum of this pallet']}},  │ │
│ │                    {'id': 36, 'type': {'path':             │ │
│ │                    ['frame_support', 'traits', 'tokens',   │ │
│ │                    'misc', 'BalanceStatus'], 'params': [], │ │
│ │                    'def': {'variant': {'variants':         │ │
│ │                    [{'name': 'Free', 'fields': [],         │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'Reserved', 'fields': [], 'index': 1,   │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    37, 'type': {'path':                    │ │
│ │                    ['pallet_transaction_payment',          │ │
│ │                    'pallet', 'Event'], 'params': [{'name': │ │
│ │                    'T', 'type': None}], 'def': {'variant': │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'TransactionFeePaid', 'fields':         │ │
│ │                    [{'name': 'who', 'type': 0, 'typeName': │ │
│ │                    'T::AccountId', 'docs': []}, {'name':   │ │
│ │                    'actual_fee', 'type': 6, 'typeName':    │ │
│ │                    'BalanceOf<T>', 'docs': []}, {'name':   │ │
│ │                    'tip', 'type': 6, 'typeName':           │ │
│ │                    'BalanceOf<T>', 'docs': []}], 'index':  │ │
│ │                    0, 'docs': ['A transaction fee          │ │
│ │                    `actual_fee`, of which `tip` was added  │ │
│ │                    to the minimum inclusion fee,', 'has    │ │
│ │                    been paid by `who`.']}]}}, 'docs':      │ │
│ │                    ['The `Event` enum of this pallet']}},  │ │
│ │                    {'id': 38, 'type': {'path':             │ │
│ │                    ['pallet_sudo', 'pallet', 'Event'],     │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'variant': {'variants': │ │
│ │                    [{'name': 'Sudid', 'fields': [{'name':  │ │
│ │                    'sudo_result', 'type': 39, 'typeName':  │ │
│ │                    'DispatchResult', 'docs': ['The result  │ │
│ │                    of the call made by the sudo user.']}], │ │
│ │                    'index': 0, 'docs': ['A sudo call just  │ │
│ │                    took place.']}, {'name': 'KeyChanged',  │ │
│ │                    'fields': [{'name': 'old', 'type': 41,  │ │
│ │                    'typeName': 'Option<T::AccountId>',     │ │
│ │                    'docs': ['The old sudo key (if one was  │ │
│ │                    previously set).']}, {'name': 'new',    │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': ['The new sudo key (if one was  │ │
│ │                    set).']}], 'index': 1, 'docs': ['The    │ │
│ │                    sudo key has been updated.']}, {'name': │ │
│ │                    'KeyRemoved', 'fields': [], 'index': 2, │ │
│ │                    'docs': ['The key was permanently       │ │
│ │                    removed.']}, {'name': 'SudoAsDone',     │ │
│ │                    'fields': [{'name': 'sudo_result',      │ │
│ │                    'type': 39, 'typeName':                 │ │
│ │                    'DispatchResult', 'docs': ['The result  │ │
│ │                    of the call made by the sudo user.']}], │ │
│ │                    'index': 3, 'docs': ['A                 │ │
│ │                    [sudo_as](Pallet::sudo_as) call just    │ │
│ │                    took place.']}]}}, 'docs': ['The        │ │
│ │                    `Event` enum of this pallet']}}, {'id': │ │
│ │                    39, 'type': {'path': ['Result'],        │ │
│ │                    'params': [{'name': 'T', 'type': 40},   │ │
│ │                    {'name': 'E', 'type': 26}], 'def':      │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'Ok', 'fields': [{'name': None, 'type': │ │
│ │                    40, 'typeName': None, 'docs': []}],     │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'Err', 'fields': [{'name': None,        │ │
│ │                    'type': 26, 'typeName': None, 'docs':   │ │
│ │                    []}], 'index': 1, 'docs': []}]}},       │ │
│ │                    'docs': []}}, {'id': 40, 'type':        │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'tuple': []}, 'docs': []}}, {'id': 41, │ │
│ │                    'type': {'path': ['Option'], 'params':  │ │
│ │                    [{'name': 'T', 'type': 0}], 'def':      │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'None', 'fields': [], 'index': 0,       │ │
│ │                    'docs': []}, {'name': 'Some', 'fields': │ │
│ │                    [{'name': None, 'type': 0, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 1, 'docs': │ │
│ │                    []}]}}, 'docs': []}}, {'id': 42,        │ │
│ │                    'type': {'path': ['pallet_multisig',    │ │
│ │                    'pallet', 'Event'], 'params': [{'name': │ │
│ │                    'T', 'type': None}], 'def': {'variant': │ │
│ │                    {'variants': [{'name': 'NewMultisig',   │ │
│ │                    'fields': [{'name': 'approving',        │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': 'multisig',       │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': 'call_hash',      │ │
│ │                    'type': 1, 'typeName': 'CallHash',      │ │
│ │                    'docs': []}], 'index': 0, 'docs': ['A   │ │
│ │                    new multisig operation has begun.']},   │ │
│ │                    {'name': 'MultisigApproval', 'fields':  │ │
│ │                    [{'name': 'approving', 'type': 0,       │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'timepoint', 'type': 43,  │ │
│ │                    'typeName':                             │ │
│ │                    'Timepoint<BlockNumberFor<T>>', 'docs': │ │
│ │                    []}, {'name': 'multisig', 'type': 0,    │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'call_hash', 'type': 1,   │ │
│ │                    'typeName': 'CallHash', 'docs': []}],   │ │
│ │                    'index': 1, 'docs': ['A multisig        │ │
│ │                    operation has been approved by          │ │
│ │                    someone.']}, {'name':                   │ │
│ │                    'MultisigExecuted', 'fields': [{'name': │ │
│ │                    'approving', 'type': 0, 'typeName':     │ │
│ │                    'T::AccountId', 'docs': []}, {'name':   │ │
│ │                    'timepoint', 'type': 43, 'typeName':    │ │
│ │                    'Timepoint<BlockNumberFor<T>>', 'docs': │ │
│ │                    []}, {'name': 'multisig', 'type': 0,    │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'call_hash', 'type': 1,   │ │
│ │                    'typeName': 'CallHash', 'docs': []},    │ │
│ │                    {'name': 'result', 'type': 39,          │ │
│ │                    'typeName': 'DispatchResult', 'docs':   │ │
│ │                    []}], 'index': 2, 'docs': ['A multisig  │ │
│ │                    operation has been executed.']},        │ │
│ │                    {'name': 'MultisigCancelled', 'fields': │ │
│ │                    [{'name': 'cancelling', 'type': 0,      │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'timepoint', 'type': 43,  │ │
│ │                    'typeName':                             │ │
│ │                    'Timepoint<BlockNumberFor<T>>', 'docs': │ │
│ │                    []}, {'name': 'multisig', 'type': 0,    │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'call_hash', 'type': 1,   │ │
│ │                    'typeName': 'CallHash', 'docs': []}],   │ │
│ │                    'index': 3, 'docs': ['A multisig        │ │
│ │                    operation has been cancelled.']}]}},    │ │
│ │                    'docs': ['The `Event` enum of this      │ │
│ │                    pallet']}}, {'id': 43, 'type': {'path': │ │
│ │                    ['pallet_multisig', 'Timepoint'],       │ │
│ │                    'params': [{'name': 'BlockNumber',      │ │
│ │                    'type': 6}], 'def': {'composite':       │ │
│ │                    {'fields': [{'name': 'height', 'type':  │ │
│ │                    6, 'typeName': 'BlockNumber', 'docs':   │ │
│ │                    []}, {'name': 'index', 'type': 4,       │ │
│ │                    'typeName': 'u32', 'docs': []}]}},      │ │
│ │                    'docs': []}}, {'id': 44, 'type':        │ │
│ │                    {'path': ['pallet_utility', 'pallet',   │ │
│ │                    'Event'], 'params': [], 'def':          │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'BatchInterrupted', 'fields': [{'name': │ │
│ │                    'index', 'type': 4, 'typeName': 'u32',  │ │
│ │                    'docs': []}, {'name': 'error', 'type':  │ │
│ │                    26, 'typeName': 'DispatchError',        │ │
│ │                    'docs': []}], 'index': 0, 'docs':       │ │
│ │                    ['Batch of dispatches did not complete  │ │
│ │                    fully. Index of first failing dispatch  │ │
│ │                    given, as', 'well as the error.']},     │ │
│ │                    {'name': 'BatchCompleted', 'fields':    │ │
│ │                    [], 'index': 1, 'docs': ['Batch of      │ │
│ │                    dispatches completed fully with no      │ │
│ │                    error.']}, {'name':                     │ │
│ │                    'BatchCompletedWithErrors', 'fields':   │ │
│ │                    [], 'index': 2, 'docs': ['Batch of      │ │
│ │                    dispatches completed but has            │ │
│ │                    errors.']}, {'name': 'ItemCompleted',   │ │
│ │                    'fields': [], 'index': 3, 'docs': ['A   │ │
│ │                    single item within a Batch of           │ │
│ │                    dispatches has completed with no        │ │
│ │                    error.']}, {'name': 'ItemFailed',       │ │
│ │                    'fields': [{'name': 'error', 'type':    │ │
│ │                    26, 'typeName': 'DispatchError',        │ │
│ │                    'docs': []}], 'index': 4, 'docs': ['A   │ │
│ │                    single item within a Batch of           │ │
│ │                    dispatches has completed with           │ │
│ │                    error.']}, {'name': 'DispatchedAs',     │ │
│ │                    'fields': [{'name': 'result', 'type':   │ │
│ │                    39, 'typeName': 'DispatchResult',       │ │
│ │                    'docs': []}], 'index': 5, 'docs': ['A   │ │
│ │                    call was dispatched.']}]}}, 'docs':     │ │
│ │                    ['The `Event` enum of this pallet']}},  │ │
│ │                    {'id': 45, 'type': {'path':             │ │
│ │                    ['pallet_subspace', 'pallet', 'Event'], │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'variant': {'variants': │ │
│ │                    [{'name': 'NetworkAdded', 'fields':     │ │
│ │                    [{'name': None, 'type': 46, 'typeName': │ │
│ │                    'u16', 'docs': []}, {'name': None,      │ │
│ │                    'type': 14, 'typeName': 'Vec<u8>',      │ │
│ │                    'docs': []}], 'index': 0, 'docs':       │ │
│ │                    ['Event created when a new network is   │ │
│ │                    added']}, {'name': 'NetworkRemoved',    │ │
│ │                    'fields': [{'name': None, 'type': 46,   │ │
│ │                    'typeName': 'u16', 'docs': []}],        │ │
│ │                    'index': 1, 'docs': ['Event created     │ │
│ │                    when a network is removed']}, {'name':  │ │
│ │                    'StakeAdded', 'fields': [{'name': None, │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': None, 'type': 0,  │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': None, 'type': 6,          │ │
│ │                    'typeName': 'u64', 'docs': []}],        │ │
│ │                    'index': 2, 'docs': ['Event created     │ │
│ │                    when stake has been transferred from    │ │
│ │                    the coldkey account onto the key',      │ │
│ │                    'staking account']}, {'name':           │ │
│ │                    'StakeRemoved', 'fields': [{'name':     │ │
│ │                    None, 'type': 0, 'typeName':            │ │
│ │                    'T::AccountId', 'docs': []}, {'name':   │ │
│ │                    None, 'type': 0, 'typeName':            │ │
│ │                    'T::AccountId', 'docs': []}, {'name':   │ │
│ │                    None, 'type': 6, 'typeName': 'u64',     │ │
│ │                    'docs': []}], 'index': 3, 'docs':       │ │
│ │                    ['Event created when stake has been     │ │
│ │                    removed from the key staking account    │ │
│ │                    onto the coldkey', 'account']},         │ │
│ │                    {'name': 'WeightsSet', 'fields':        │ │
│ │                    [{'name': None, 'type': 46, 'typeName': │ │
│ │                    'u16', 'docs': []}, {'name': None,      │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}], 'index': 4, 'docs': ['Event       │ │
│ │                    created when a caller successfully sets │ │
│ │                    their weights on a subnetwork']},       │ │
│ │                    {'name': 'ModuleRegistered', 'fields':  │ │
│ │                    [{'name': None, 'type': 46, 'typeName': │ │
│ │                    'u16', 'docs': []}, {'name': None,      │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name': None, 'type': 0,          │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}], 'index': 5, 'docs': ['Event       │ │
│ │                    created when a new module account has   │ │
│ │                    been registered to the chain']},        │ │
│ │                    {'name': 'ModuleDeregistered',          │ │
│ │                    'fields': [{'name': None, 'type': 46,   │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': None, 'type': 46, 'typeName':  │ │
│ │                    'u16', 'docs': []}, {'name': None,      │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}], 'index': 6, 'docs':       │ │
│ │                    ['Event created when a module account   │ │
│ │                    has been deregistered from the          │ │
│ │                    chain']}, {'name': 'ModuleUpdated',     │ │
│ │                    'fields': [{'name': None, 'type': 46,   │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': None, 'type': 0, 'typeName':   │ │
│ │                    'T::AccountId', 'docs': []}], 'index':  │ │
│ │                    7, 'docs': ["Event created when the     │ │
│ │                    module's updated information is added   │ │
│ │                    to the network"]}, {'name':             │ │
│ │                    'GlobalParamsUpdated', 'fields':        │ │
│ │                    [{'name': None, 'type': 47, 'typeName': │ │
│ │                    'GlobalParams<T>', 'docs': []}],        │ │
│ │                    'index': 8, 'docs': ['Event created     │ │
│ │                    when global parameters are updated']},  │ │
│ │                    {'name': 'SubnetParamsUpdated',         │ │
│ │                    'fields': [{'name': None, 'type': 46,   │ │
│ │                    'typeName': 'u16', 'docs': []}],        │ │
│ │                    'index': 9, 'docs': ['Event created     │ │
│ │                    when subnet parameters are              │ │
│ │                    updated']}]}}, 'docs': ['The `Event`    │ │
│ │                    enum of this pallet']}}, {'id': 46,     │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'primitive': 'u16'}, 'docs':    │ │
│ │                    []}}, {'id': 47, 'type': {'path':       │ │
│ │                    ['pallet_subspace', 'params', 'global', │ │
│ │                    'GlobalParams'], 'params': [{'name':    │ │
│ │                    'T', 'type': None}], 'def':             │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'max_name_length', 'type': 46,          │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'min_name_length', 'type': 46, │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'max_allowed_subnets', 'type': │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'max_allowed_modules', 'type': │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'max_registrations_per_block', │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name': 'max_allowed_weights',    │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name':                           │ │
│ │                    'floor_stake_delegation_fee', 'type':   │ │
│ │                    48, 'typeName': 'Percent', 'docs': []}, │ │
│ │                    {'name': 'floor_validator_weight_fee',  │ │
│ │                    'type': 48, 'typeName': 'Percent',      │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'floor_founder_share', 'type': 2,       │ │
│ │                    'typeName': 'u8', 'docs': []}, {'name': │ │
│ │                    'min_weight_stake', 'type': 6,          │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'curator', 'type': 0,          │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name':                           │ │
│ │                    'general_subnet_application_cost',      │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'subnet_immunity_period', │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'governance_config',      │ │
│ │                    'type': 49, 'typeName':                 │ │
│ │                    'GovernanceConfiguration', 'docs': []}, │ │
│ │                    {'name': 'kappa', 'type': 46,           │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'rho', 'type': 46, 'typeName': │ │
│ │                    'u16', 'docs': []}]}}, 'docs': []}},    │ │
│ │                    {'id': 48, 'type': {'path':             │ │
│ │                    ['sp_arithmetic', 'per_things',         │ │
│ │                    'Percent'], 'params': [], 'def':        │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 2, 'typeName': 'u8',      │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    49, 'type': {'path':                    │ │
│ │                    ['pallet_governance_api',               │ │
│ │                    'GovernanceConfiguration'], 'params':   │ │
│ │                    [], 'def': {'composite': {'fields':     │ │
│ │                    [{'name': 'proposal_cost', 'type': 6,   │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'proposal_expiration', 'type': │ │
│ │                    4, 'typeName': 'u32', 'docs': []},      │ │
│ │                    {'name': 'vote_mode', 'type': 50,       │ │
│ │                    'typeName': 'VoteMode', 'docs': []},    │ │
│ │                    {'name':                                │ │
│ │                    'proposal_reward_treasury_allocation',  │ │
│ │                    'type': 48, 'typeName': 'Percent',      │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'max_proposal_reward_treasury_allocati… │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name':                           │ │
│ │                    'proposal_reward_interval', 'type': 6,  │ │
│ │                    'typeName': 'u64', 'docs': []}]}},      │ │
│ │                    'docs': []}}, {'id': 50, 'type':        │ │
│ │                    {'path': ['pallet_governance_api',      │ │
│ │                    'VoteMode'], 'params': [], 'def':       │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'Authority', 'fields': [], 'index': 0,  │ │
│ │                    'docs': []}, {'name': 'Vote', 'fields': │ │
│ │                    [], 'index': 1, 'docs': []}]}}, 'docs': │ │
│ │                    []}}, {'id': 51, 'type': {'path':       │ │
│ │                    ['pallet_governance', 'pallet',         │ │
│ │                    'Event'], 'params': [{'name': 'T',      │ │
│ │                    'type': None}], 'def': {'variant':      │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'ProposalCreated', 'fields': [{'name':  │ │
│ │                    None, 'type': 6, 'typeName':            │ │
│ │                    'ProposalId', 'docs': []}], 'index': 0, │ │
│ │                    'docs': ['A new proposal has been       │ │
│ │                    created.']}, {'name':                   │ │
│ │                    'ProposalAccepted', 'fields': [{'name': │ │
│ │                    None, 'type': 6, 'typeName':            │ │
│ │                    'ProposalId', 'docs': []}], 'index': 1, │ │
│ │                    'docs': ['A proposal has been           │ │
│ │                    accepted.']}, {'name':                  │ │
│ │                    'ProposalRefused', 'fields': [{'name':  │ │
│ │                    None, 'type': 6, 'typeName':            │ │
│ │                    'ProposalId', 'docs': []}], 'index': 2, │ │
│ │                    'docs': ['A proposal has been           │ │
│ │                    refused.']}, {'name':                   │ │
│ │                    'ProposalExpired', 'fields': [{'name':  │ │
│ │                    None, 'type': 6, 'typeName':            │ │
│ │                    'ProposalId', 'docs': []}], 'index': 3, │ │
│ │                    'docs': ['A proposal has expired.']},   │ │
│ │                    {'name': 'ProposalVoted', 'fields':     │ │
│ │                    [{'name': None, 'type': 6, 'typeName':  │ │
│ │                    'u64', 'docs': []}, {'name': None,      │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': None, 'type': 9,  │ │
│ │                    'typeName': 'bool', 'docs': []}],       │ │
│ │                    'index': 4, 'docs': ['A vote has been   │ │
│ │                    cast on a proposal.']}, {'name':        │ │
│ │                    'ProposalVoteUnregistered', 'fields':   │ │
│ │                    [{'name': None, 'type': 6, 'typeName':  │ │
│ │                    'u64', 'docs': []}, {'name': None,      │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}], 'index': 5, 'docs': ['A   │ │
│ │                    vote has been unregistered from a       │ │
│ │                    proposal.']}, {'name':                  │ │
│ │                    'WhitelistModuleAdded', 'fields':       │ │
│ │                    [{'name': None, 'type': 0, 'typeName':  │ │
│ │                    'T::AccountId', 'docs': []}], 'index':  │ │
│ │                    6, 'docs': ['A module account has been  │ │
│ │                    added to the whitelist.']}, {'name':    │ │
│ │                    'WhitelistModuleRemoved', 'fields':     │ │
│ │                    [{'name': None, 'type': 0, 'typeName':  │ │
│ │                    'T::AccountId', 'docs': []}], 'index':  │ │
│ │                    7, 'docs': ['A module account has been  │ │
│ │                    removed from the whitelist.']},         │ │
│ │                    {'name': 'ApplicationCreated',          │ │
│ │                    'fields': [{'name': None, 'type': 6,    │ │
│ │                    'typeName': 'u64', 'docs': []}],        │ │
│ │                    'index': 8, 'docs': ['A new application │ │
│ │                    has been created.']}]}}, 'docs': ['The  │ │
│ │                    `Event` enum of this pallet']}}, {'id': │ │
│ │                    52, 'type': {'path':                    │ │
│ │                    ['pallet_subnet_emission', 'pallet',    │ │
│ │                    'Event'], 'params': [{'name': 'T',      │ │
│ │                    'type': None}], 'def': {'variant':      │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'EpochFinalized', 'fields': [{'name':   │ │
│ │                    None, 'type': 46, 'typeName': 'u16',    │ │
│ │                    'docs': []}], 'index': 0, 'docs':       │ │
│ │                    ['Subnets tempo has finished or         │ │
│ │                    Snapshot has been taken']}, {'name':    │ │
│ │                    'DecryptionNodeCanceled', 'fields':     │ │
│ │                    [{'name': 'subnet_id', 'type': 46,      │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'node_id', 'type': 0,          │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}], 'index': 1, 'docs': ['Weight      │ │
│ │                    copying decryption was canceled']},     │ │
│ │                    {'name': 'DecryptionNodeRotated',       │ │
│ │                    'fields': [{'name': 'subnet_id',        │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name': 'previous_node_id',       │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': 'new_node_id',    │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}], 'index': 2, 'docs':       │ │
│ │                    ['Weight copying decryption node was    │ │
│ │                    rotated']}, {'name':                    │ │
│ │                    'DecryptionNodeCallbackScheduled',      │ │
│ │                    'fields': [{'name': 'subnet_id',        │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name': 'node_id', 'type': 0,     │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'ban_block', 'type': 6,   │ │
│ │                    'typeName': 'u64', 'docs': []}],        │ │
│ │                    'index': 3, 'docs': ['Decryption node   │ │
│ │                    was called by the runtime to send       │ │
│ │                    decrypted weights back, if node fails', │ │
│ │                    'to do so on time, it will get          │ │
│ │                    banned']}, {'name':                     │ │
│ │                    'DecryptionNodeBanned', 'fields':       │ │
│ │                    [{'name': 'subnet_id', 'type': 46,      │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'node_id', 'type': 0,          │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}], 'index': 4, 'docs': ['Decryption  │ │
│ │                    node was banned, as it failed to send   │ │
│ │                    decrypted weights back to the           │ │
│ │                    runtime']}]}}, 'docs': ['The `Event`    │ │
│ │                    enum of this pallet']}}, {'id': 53,     │ │
│ │                    'type': {'path': ['pallet_offworker',   │ │
│ │                    'pallet', 'Event'], 'params': [{'name': │ │
│ │                    'T', 'type': None}], 'def': {'variant': │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'DecryptedWeightsSent', 'fields':       │ │
│ │                    [{'name': 'subnet_id', 'type': 46,      │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'block_number', 'type': 6,     │ │
│ │                    'typeName': 'BlockNumberFor<T>',        │ │
│ │                    'docs': []}, {'name': 'worker', 'type': │ │
│ │                    0, 'typeName': 'T::AccountId', 'docs':  │ │
│ │                    []}], 'index': 0, 'docs': ['Offchain    │ │
│ │                    worker sent decrypted weights']},       │ │
│ │                    {'name': 'KeepAliveSent', 'fields':     │ │
│ │                    [{'name': 'block_number', 'type': 6,    │ │
│ │                    'typeName': 'BlockNumberFor<T>',        │ │
│ │                    'docs': []}, {'name': 'worker', 'type': │ │
│ │                    0, 'typeName': 'T::AccountId', 'docs':  │ │
│ │                    []}], 'index': 1, 'docs': ['Offchain    │ │
│ │                    worker sent keep_alive message']},      │ │
│ │                    {'name': 'AuthoritiesAdded', 'fields':  │ │
│ │                    [], 'index': 2, 'docs': ['New           │ │
│ │                    authorities were successfully added']}, │ │
│ │                    {'name':                                │ │
│ │                    'DecryptionNodeCallbackSuccess',        │ │
│ │                    'fields': [{'name': 'subnet_id',        │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name': 'node_id', 'type': 0,     │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}], 'index': 3, 'docs': ['Decryption  │ │
│ │                    node successfully sent decrypted        │ │
│ │                    weights back to the runtime on          │ │
│ │                    time']}]}}, 'docs': ['The `Event` enum  │ │
│ │                    of this pallet']}}, {'id': 54, 'type':  │ │
│ │                    {'path': ['frame_system', 'Phase'],     │ │
│ │                    'params': [], 'def': {'variant':        │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'ApplyExtrinsic', 'fields': [{'name':   │ │
│ │                    None, 'type': 4, 'typeName': 'u32',     │ │
│ │                    'docs': []}], 'index': 0, 'docs': []},  │ │
│ │                    {'name': 'Finalization', 'fields': [],  │ │
│ │                    'index': 1, 'docs': []}, {'name':       │ │
│ │                    'Initialization', 'fields': [],         │ │
│ │                    'index': 2, 'docs': []}]}}, 'docs':     │ │
│ │                    []}}, {'id': 55, 'type': {'path': [],   │ │
│ │                    'params': [], 'def': {'sequence':       │ │
│ │                    {'type': 13}}, 'docs': []}}, {'id': 56, │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'sequence': {'type': 57}},      │ │
│ │                    'docs': []}}, {'id': 57, 'type':        │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'tuple': [6, 4]}, 'docs': []}}, {'id': │ │
│ │                    58, 'type': {'path': ['frame_system',   │ │
│ │                    'LastRuntimeUpgradeInfo'], 'params':    │ │
│ │                    [], 'def': {'composite': {'fields':     │ │
│ │                    [{'name': 'spec_version', 'type': 59,   │ │
│ │                    'typeName': 'codec::Compact<u32>',      │ │
│ │                    'docs': []}, {'name': 'spec_name',      │ │
│ │                    'type': 60, 'typeName':                 │ │
│ │                    'sp_runtime::RuntimeString', 'docs':    │ │
│ │                    []}]}}, 'docs': []}}, {'id': 59,        │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'compact': {'type': 4}},        │ │
│ │                    'docs': []}}, {'id': 60, 'type':        │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'primitive': 'str'}, 'docs': []}},     │ │
│ │                    {'id': 61, 'type': {'path':             │ │
│ │                    ['frame_system',                        │ │
│ │                    'CodeUpgradeAuthorization'], 'params':  │ │
│ │                    [{'name': 'T', 'type': None}], 'def':   │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'code_hash', 'type': 13, 'typeName':    │ │
│ │                    'T::Hash', 'docs': []}, {'name':        │ │
│ │                    'check_version', 'type': 9, 'typeName': │ │
│ │                    'bool', 'docs': []}]}}, 'docs': []}},   │ │
│ │                    {'id': 62, 'type': {'path':             │ │
│ │                    ['frame_system', 'pallet', 'Call'],     │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'variant': {'variants': │ │
│ │                    [{'name': 'remark', 'fields': [{'name': │ │
│ │                    'remark', 'type': 14, 'typeName':       │ │
│ │                    'Vec<u8>', 'docs': []}], 'index': 0,    │ │
│ │                    'docs': ['Make some on-chain remark.',  │ │
│ │                    '', 'Can be executed by every           │ │
│ │                    `origin`.']}, {'name':                  │ │
│ │                    'set_heap_pages', 'fields': [{'name':   │ │
│ │                    'pages', 'type': 6, 'typeName': 'u64',  │ │
│ │                    'docs': []}], 'index': 1, 'docs': ["Set │ │
│ │                    the number of pages in the WebAssembly  │ │
│ │                    environment's heap."]}, {'name':        │ │
│ │                    'set_code', 'fields': [{'name': 'code', │ │
│ │                    'type': 14, 'typeName': 'Vec<u8>',      │ │
│ │                    'docs': []}], 'index': 2, 'docs': ['Set │ │
│ │                    the new runtime code.']}, {'name':      │ │
│ │                    'set_code_without_checks', 'fields':    │ │
│ │                    [{'name': 'code', 'type': 14,           │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []}],    │ │
│ │                    'index': 3, 'docs': ['Set the new       │ │
│ │                    runtime code without doing any checks   │ │
│ │                    of the given `code`.', '', 'Note that   │ │
│ │                    runtime upgrades will not run if this   │ │
│ │                    is called with a not-increasing spec',  │ │
│ │                    'version!']}, {'name': 'set_storage',   │ │
│ │                    'fields': [{'name': 'items', 'type':    │ │
│ │                    63, 'typeName': 'Vec<KeyValue>',        │ │
│ │                    'docs': []}], 'index': 4, 'docs': ['Set │ │
│ │                    some items of storage.']}, {'name':     │ │
│ │                    'kill_storage', 'fields': [{'name':     │ │
│ │                    'keys', 'type': 65, 'typeName':         │ │
│ │                    'Vec<Key>', 'docs': []}], 'index': 5,   │ │
│ │                    'docs': ['Kill some items from          │ │
│ │                    storage.']}, {'name': 'kill_prefix',    │ │
│ │                    'fields': [{'name': 'prefix', 'type':   │ │
│ │                    14, 'typeName': 'Key', 'docs': []},     │ │
│ │                    {'name': 'subkeys', 'type': 4,          │ │
│ │                    'typeName': 'u32', 'docs': []}],        │ │
│ │                    'index': 6, 'docs': ['Kill all storage  │ │
│ │                    items with a key that starts with the   │ │
│ │                    given prefix.', '', '**NOTE:** We rely  │ │
│ │                    on the Root origin to provide us the    │ │
│ │                    number of subkeys under', 'the prefix   │ │
│ │                    we are removing to accurately calculate │ │
│ │                    the weight of this function.']},        │ │
│ │                    {'name': 'remark_with_event', 'fields': │ │
│ │                    [{'name': 'remark', 'type': 14,         │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []}],    │ │
│ │                    'index': 7, 'docs': ['Make some         │ │
│ │                    on-chain remark and emit event.']},     │ │
│ │                    {'name': 'authorize_upgrade', 'fields': │ │
│ │                    [{'name': 'code_hash', 'type': 13,      │ │
│ │                    'typeName': 'T::Hash', 'docs': []}],    │ │
│ │                    'index': 9, 'docs': ['Authorize an      │ │
│ │                    upgrade to a given `code_hash` for the  │ │
│ │                    runtime. The runtime can be supplied',  │ │
│ │                    'later.', '', 'This call requires Root  │ │
│ │                    origin.']}, {'name':                    │ │
│ │                    'authorize_upgrade_without_checks',     │ │
│ │                    'fields': [{'name': 'code_hash',        │ │
│ │                    'type': 13, 'typeName': 'T::Hash',      │ │
│ │                    'docs': []}], 'index': 10, 'docs':      │ │
│ │                    ['Authorize an upgrade to a given       │ │
│ │                    `code_hash` for the runtime. The        │ │
│ │                    runtime can be supplied', 'later.', '', │ │
│ │                    'WARNING: This authorizes an upgrade    │ │
│ │                    that will take place without any safety │ │
│ │                    checks, for', 'example that the spec    │ │
│ │                    name remains the same and that the      │ │
│ │                    version number increases. Not',         │ │
│ │                    'recommended for normal use. Use        │ │
│ │                    `authorize_upgrade` instead.', '',      │ │
│ │                    'This call requires Root origin.']},    │ │
│ │                    {'name': 'apply_authorized_upgrade',    │ │
│ │                    'fields': [{'name': 'code', 'type': 14, │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []}],    │ │
│ │                    'index': 11, 'docs': ['Provide the      │ │
│ │                    preimage (runtime binary) `code` for an │ │
│ │                    upgrade that has been authorized.', '', │ │
│ │                    'If the authorization required a        │ │
│ │                    version check, this call will ensure    │ │
│ │                    the spec name', 'remains unchanged and  │ │
│ │                    that the spec version has increased.',  │ │
│ │                    '', "Depending on the runtime's         │ │
│ │                    `OnSetCode` configuration, this         │ │
│ │                    function may directly apply", 'the new  │ │
│ │                    `code` in the same block or attempt to  │ │
│ │                    schedule the upgrade.', '', 'All        │ │
│ │                    origins are allowed.']}]}}, 'docs':     │ │
│ │                    ['Contains a variant per dispatchable   │ │
│ │                    extrinsic that this pallet has.']}},    │ │
│ │                    {'id': 63, 'type': {'path': [],         │ │
│ │                    'params': [], 'def': {'sequence':       │ │
│ │                    {'type': 64}}, 'docs': []}}, {'id': 64, │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'tuple': [14, 14]}, 'docs':     │ │
│ │                    []}}, {'id': 65, 'type': {'path': [],   │ │
│ │                    'params': [], 'def': {'sequence':       │ │
│ │                    {'type': 14}}, 'docs': []}}, {'id': 66, │ │
│ │                    'type': {'path': ['frame_system',       │ │
│ │                    'limits', 'BlockWeights'], 'params':    │ │
│ │                    [], 'def': {'composite': {'fields':     │ │
│ │                    [{'name': 'base_block', 'type': 11,     │ │
│ │                    'typeName': 'Weight', 'docs': []},      │ │
│ │                    {'name': 'max_block', 'type': 11,       │ │
│ │                    'typeName': 'Weight', 'docs': []},      │ │
│ │                    {'name': 'per_class', 'type': 67,       │ │
│ │                    'typeName':                             │ │
│ │                    'PerDispatchClass<WeightsPerClass>',    │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    67, 'type': {'path': ['frame_support',  │ │
│ │                    'dispatch', 'PerDispatchClass'],        │ │
│ │                    'params': [{'name': 'T', 'type': 68}],  │ │
│ │                    'def': {'composite': {'fields':         │ │
│ │                    [{'name': 'normal', 'type': 68,         │ │
│ │                    'typeName': 'T', 'docs': []}, {'name':  │ │
│ │                    'operational', 'type': 68, 'typeName':  │ │
│ │                    'T', 'docs': []}, {'name': 'mandatory', │ │
│ │                    'type': 68, 'typeName': 'T', 'docs':    │ │
│ │                    []}]}}, 'docs': []}}, {'id': 68,        │ │
│ │                    'type': {'path': ['frame_system',       │ │
│ │                    'limits', 'WeightsPerClass'], 'params': │ │
│ │                    [], 'def': {'composite': {'fields':     │ │
│ │                    [{'name': 'base_extrinsic', 'type': 11, │ │
│ │                    'typeName': 'Weight', 'docs': []},      │ │
│ │                    {'name': 'max_extrinsic', 'type': 69,   │ │
│ │                    'typeName': 'Option<Weight>', 'docs':   │ │
│ │                    []}, {'name': 'max_total', 'type': 69,  │ │
│ │                    'typeName': 'Option<Weight>', 'docs':   │ │
│ │                    []}, {'name': 'reserved', 'type': 69,   │ │
│ │                    'typeName': 'Option<Weight>', 'docs':   │ │
│ │                    []}]}}, 'docs': []}}, {'id': 69,        │ │
│ │                    'type': {'path': ['Option'], 'params':  │ │
│ │                    [{'name': 'T', 'type': 11}], 'def':     │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'None', 'fields': [], 'index': 0,       │ │
│ │                    'docs': []}, {'name': 'Some', 'fields': │ │
│ │                    [{'name': None, 'type': 11, 'typeName': │ │
│ │                    None, 'docs': []}], 'index': 1, 'docs': │ │
│ │                    []}]}}, 'docs': []}}, {'id': 70,        │ │
│ │                    'type': {'path': ['frame_system',       │ │
│ │                    'limits', 'BlockLength'], 'params': [], │ │
│ │                    'def': {'composite': {'fields':         │ │
│ │                    [{'name': 'max', 'type': 71,            │ │
│ │                    'typeName': 'PerDispatchClass<u32>',    │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    71, 'type': {'path': ['frame_support',  │ │
│ │                    'dispatch', 'PerDispatchClass'],        │ │
│ │                    'params': [{'name': 'T', 'type': 4}],   │ │
│ │                    'def': {'composite': {'fields':         │ │
│ │                    [{'name': 'normal', 'type': 4,          │ │
│ │                    'typeName': 'T', 'docs': []}, {'name':  │ │
│ │                    'operational', 'type': 4, 'typeName':   │ │
│ │                    'T', 'docs': []}, {'name': 'mandatory', │ │
│ │                    'type': 4, 'typeName': 'T', 'docs':     │ │
│ │                    []}]}}, 'docs': []}}, {'id': 72,        │ │
│ │                    'type': {'path': ['sp_weights',         │ │
│ │                    'RuntimeDbWeight'], 'params': [],       │ │
│ │                    'def': {'composite': {'fields':         │ │
│ │                    [{'name': 'read', 'type': 6,            │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'write', 'type': 6,            │ │
│ │                    'typeName': 'u64', 'docs': []}]}},      │ │
│ │                    'docs': []}}, {'id': 73, 'type':        │ │
│ │                    {'path': ['sp_version',                 │ │
│ │                    'RuntimeVersion'], 'params': [], 'def': │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'spec_name', 'type': 60, 'typeName':    │ │
│ │                    'RuntimeString', 'docs': []}, {'name':  │ │
│ │                    'impl_name', 'type': 60, 'typeName':    │ │
│ │                    'RuntimeString', 'docs': []}, {'name':  │ │
│ │                    'authoring_version', 'type': 4,         │ │
│ │                    'typeName': 'u32', 'docs': []},         │ │
│ │                    {'name': 'spec_version', 'type': 4,     │ │
│ │                    'typeName': 'u32', 'docs': []},         │ │
│ │                    {'name': 'impl_version', 'type': 4,     │ │
│ │                    'typeName': 'u32', 'docs': []},         │ │
│ │                    {'name': 'apis', 'type': 74,            │ │
│ │                    'typeName': 'ApisVec', 'docs': []},     │ │
│ │                    {'name': 'transaction_version', 'type': │ │
│ │                    4, 'typeName': 'u32', 'docs': []},      │ │
│ │                    {'name': 'state_version', 'type': 2,    │ │
│ │                    'typeName': 'u8', 'docs': []}]}},       │ │
│ │                    'docs': []}}, {'id': 74, 'type':        │ │
│ │                    {'path': ['Cow'], 'params': [{'name':   │ │
│ │                    'T', 'type': 75}], 'def': {'composite': │ │
│ │                    {'fields': [{'name': None, 'type': 75,  │ │
│ │                    'typeName': None, 'docs': []}]}},       │ │
│ │                    'docs': []}}, {'id': 75, 'type':        │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'sequence': {'type': 76}}, 'docs':     │ │
│ │                    []}}, {'id': 76, 'type': {'path': [],   │ │
│ │                    'params': [], 'def': {'tuple': [77,     │ │
│ │                    4]}, 'docs': []}}, {'id': 77, 'type':   │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'array': {'len': 8, 'type': 2}},       │ │
│ │                    'docs': []}}, {'id': 78, 'type':        │ │
│ │                    {'path': ['frame_system', 'pallet',     │ │
│ │                    'Error'], 'params': [{'name': 'T',      │ │
│ │                    'type': None}], 'def': {'variant':      │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'InvalidSpecName', 'fields': [],        │ │
│ │                    'index': 0, 'docs': ['The name of       │ │
│ │                    specification does not match between    │ │
│ │                    the current runtime', 'and the new      │ │
│ │                    runtime.']}, {'name':                   │ │
│ │                    'SpecVersionNeedsToIncrease', 'fields': │ │
│ │                    [], 'index': 1, 'docs': ['The           │ │
│ │                    specification version is not allowed to │ │
│ │                    decrease between the current runtime',  │ │
│ │                    'and the new runtime.']}, {'name':      │ │
│ │                    'FailedToExtractRuntimeVersion',        │ │
│ │                    'fields': [], 'index': 2, 'docs':       │ │
│ │                    ['Failed to extract the runtime version │ │
│ │                    from the new runtime.', '', 'Either     │ │
│ │                    calling `Core_version` or decoding      │ │
│ │                    `RuntimeVersion` failed.']}, {'name':   │ │
│ │                    'NonDefaultComposite', 'fields': [],    │ │
│ │                    'index': 3, 'docs': ['Suicide called    │ │
│ │                    when the account has non-default        │ │
│ │                    composite data.']}, {'name':            │ │
│ │                    'NonZeroRefCount', 'fields': [],        │ │
│ │                    'index': 4, 'docs': ['There is a        │ │
│ │                    non-zero reference count preventing the │ │
│ │                    account from being purged.']}, {'name': │ │
│ │                    'CallFiltered', 'fields': [], 'index':  │ │
│ │                    5, 'docs': ['The origin filter prevent  │ │
│ │                    the call to be dispatched.']}, {'name': │ │
│ │                    'MultiBlockMigrationsOngoing',          │ │
│ │                    'fields': [], 'index': 6, 'docs': ['A   │ │
│ │                    multi-block migration is ongoing and    │ │
│ │                    prevents the current code from being    │ │
│ │                    replaced.']}, {'name':                  │ │
│ │                    'NothingAuthorized', 'fields': [],      │ │
│ │                    'index': 7, 'docs': ['No upgrade        │ │
│ │                    authorized.']}, {'name':                │ │
│ │                    'Unauthorized', 'fields': [], 'index':  │ │
│ │                    8, 'docs': ['The submitted code is not  │ │
│ │                    authorized.']}]}}, 'docs': ['Error for  │ │
│ │                    the System pallet']}}, {'id': 79,       │ │
│ │                    'type': {'path': ['pallet_timestamp',   │ │
│ │                    'pallet', 'Call'], 'params': [{'name':  │ │
│ │                    'T', 'type': None}], 'def': {'variant': │ │
│ │                    {'variants': [{'name': 'set', 'fields': │ │
│ │                    [{'name': 'now', 'type': 12,            │ │
│ │                    'typeName': 'T::Moment', 'docs': []}],  │ │
│ │                    'index': 0, 'docs': ['Set the current   │ │
│ │                    time.', '', 'This call should be        │ │
│ │                    invoked exactly once per block. It will │ │
│ │                    panic at the finalization', "phase, if  │ │
│ │                    this call hasn't been invoked by that   │ │
│ │                    time.", '', 'The timestamp should be    │ │
│ │                    greater than the previous one by the    │ │
│ │                    amount specified by',                   │ │
│ │                    '[`Config::MinimumPeriod`].', '', 'The  │ │
│ │                    dispatch origin for this call must be   │ │
│ │                    _None_.', '', 'This dispatch class is   │ │
│ │                    _Mandatory_ to ensure it gets executed  │ │
│ │                    in the block. Be aware', 'that changing │ │
│ │                    the complexity of this call could       │ │
│ │                    result exhausting the resources in a',  │ │
│ │                    'block to execute any other calls.',    │ │
│ │                    '', '## Complexity', '- `O(1)` (Note    │ │
│ │                    that implementations of                 │ │
│ │                    `OnTimestampSet` must also be `O(1)`)', │ │
│ │                    '- 1 storage read and 1 storage         │ │
│ │                    mutation (codec `O(1)` because of       │ │
│ │                    `DidUpdate::take` in', '                │ │
│ │                    `on_finalize`)', '- 1 event handler     │ │
│ │                    `on_timestamp_set`. Must be             │ │
│ │                    `O(1)`.']}]}}, 'docs': ['Contains a     │ │
│ │                    variant per dispatchable extrinsic that │ │
│ │                    this pallet has.']}}, {'id': 80,        │ │
│ │                    'type': {'path':                        │ │
│ │                    ['bounded_collections', 'bounded_vec',  │ │
│ │                    'BoundedVec'], 'params': [{'name': 'T', │ │
│ │                    'type': 81}, {'name': 'S', 'type':      │ │
│ │                    None}], 'def': {'composite': {'fields': │ │
│ │                    [{'name': None, 'type': 82, 'typeName': │ │
│ │                    'Vec<T>', 'docs': []}]}}, 'docs': []}}, │ │
│ │                    {'id': 81, 'type': {'path':             │ │
│ │                    ['sp_consensus_aura', 'sr25519',        │ │
│ │                    'app_sr25519', 'Public'], 'params': [], │ │
│ │                    'def': {'composite': {'fields':         │ │
│ │                    [{'name': None, 'type': 1, 'typeName':  │ │
│ │                    'sr25519::Public', 'docs': []}]}},      │ │
│ │                    'docs': []}}, {'id': 82, 'type':        │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'sequence': {'type': 81}}, 'docs':     │ │
│ │                    []}}, {'id': 83, 'type': {'path':       │ │
│ │                    ['sp_consensus_slots', 'Slot'],         │ │
│ │                    'params': [], 'def': {'composite':      │ │
│ │                    {'fields': [{'name': None, 'type': 6,   │ │
│ │                    'typeName': 'u64', 'docs': []}]}},      │ │
│ │                    'docs': []}}, {'id': 84, 'type':        │ │
│ │                    {'path': ['pallet_grandpa',             │ │
│ │                    'StoredState'], 'params': [{'name':     │ │
│ │                    'N', 'type': 6}], 'def': {'variant':    │ │
│ │                    {'variants': [{'name': 'Live',          │ │
│ │                    'fields': [], 'index': 0, 'docs': []},  │ │
│ │                    {'name': 'PendingPause', 'fields':      │ │
│ │                    [{'name': 'scheduled_at', 'type': 6,    │ │
│ │                    'typeName': 'N', 'docs': []}, {'name':  │ │
│ │                    'delay', 'type': 6, 'typeName': 'N',    │ │
│ │                    'docs': []}], 'index': 1, 'docs': []},  │ │
│ │                    {'name': 'Paused', 'fields': [],        │ │
│ │                    'index': 2, 'docs': []}, {'name':       │ │
│ │                    'PendingResume', 'fields': [{'name':    │ │
│ │                    'scheduled_at', 'type': 6, 'typeName':  │ │
│ │                    'N', 'docs': []}, {'name': 'delay',     │ │
│ │                    'type': 6, 'typeName': 'N', 'docs':     │ │
│ │                    []}], 'index': 3, 'docs': []}]}},       │ │
│ │                    'docs': []}}, {'id': 85, 'type':        │ │
│ │                    {'path': ['pallet_grandpa',             │ │
│ │                    'StoredPendingChange'], 'params':       │ │
│ │                    [{'name': 'N', 'type': 6}, {'name':     │ │
│ │                    'Limit', 'type': None}], 'def':         │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'scheduled_at', 'type': 6, 'typeName':  │ │
│ │                    'N', 'docs': []}, {'name': 'delay',     │ │
│ │                    'type': 6, 'typeName': 'N', 'docs':     │ │
│ │                    []}, {'name': 'next_authorities',       │ │
│ │                    'type': 86, 'typeName':                 │ │
│ │                    'BoundedAuthorityList<Limit>', 'docs':  │ │
│ │                    []}, {'name': 'forced', 'type': 87,     │ │
│ │                    'typeName': 'Option<N>', 'docs':        │ │
│ │                    []}]}}, 'docs': []}}, {'id': 86,        │ │
│ │                    'type': {'path':                        │ │
│ │                    ['bounded_collections',                 │ │
│ │                    'weak_bounded_vec', 'WeakBoundedVec'],  │ │
│ │                    'params': [{'name': 'T', 'type': 33},   │ │
│ │                    {'name': 'S', 'type': None}], 'def':    │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 32, 'typeName': 'Vec<T>', │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    87, 'type': {'path': ['Option'],        │ │
│ │                    'params': [{'name': 'T', 'type': 6}],   │ │
│ │                    'def': {'variant': {'variants':         │ │
│ │                    [{'name': 'None', 'fields': [],         │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'Some', 'fields': [{'name': None,       │ │
│ │                    'type': 6, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 1, 'docs': []}]}},       │ │
│ │                    'docs': []}}, {'id': 88, 'type':        │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'tuple': [6, 6]}, 'docs': []}}, {'id': │ │
│ │                    89, 'type': {'path': ['pallet_grandpa', │ │
│ │                    'pallet', 'Call'], 'params': [{'name':  │ │
│ │                    'T', 'type': None}], 'def': {'variant': │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'report_equivocation', 'fields':        │ │
│ │                    [{'name': 'equivocation_proof', 'type': │ │
│ │                    90, 'typeName':                         │ │
│ │                    'Box<EquivocationProof<T::Hash,         │ │
│ │                    BlockNumberFor<T>>>', 'docs': []},      │ │
│ │                    {'name': 'key_owner_proof', 'type':     │ │
│ │                    100, 'typeName': 'T::KeyOwnerProof',    │ │
│ │                    'docs': []}], 'index': 0, 'docs':       │ │
│ │                    ['Report voter                          │ │
│ │                    equivocation/misbehavior. This method   │ │
│ │                    will verify the', 'equivocation proof   │ │
│ │                    and validate the given key ownership    │ │
│ │                    proof', 'against the extracted          │ │
│ │                    offender. If both are valid, the        │ │
│ │                    offence', 'will be reported.']},        │ │
│ │                    {'name':                                │ │
│ │                    'report_equivocation_unsigned',         │ │
│ │                    'fields': [{'name':                     │ │
│ │                    'equivocation_proof', 'type': 90,       │ │
│ │                    'typeName':                             │ │
│ │                    'Box<EquivocationProof<T::Hash,         │ │
│ │                    BlockNumberFor<T>>>', 'docs': []},      │ │
│ │                    {'name': 'key_owner_proof', 'type':     │ │
│ │                    100, 'typeName': 'T::KeyOwnerProof',    │ │
│ │                    'docs': []}], 'index': 1, 'docs':       │ │
│ │                    ['Report voter                          │ │
│ │                    equivocation/misbehavior. This method   │ │
│ │                    will verify the', 'equivocation proof   │ │
│ │                    and validate the given key ownership    │ │
│ │                    proof', 'against the extracted          │ │
│ │                    offender. If both are valid, the        │ │
│ │                    offence', 'will be reported.', '',      │ │
│ │                    'This extrinsic must be called unsigned │ │
│ │                    and it is expected that only', 'block   │ │
│ │                    authors will call it (validated in      │ │
│ │                    `ValidateUnsigned`), as such', 'if the  │ │
│ │                    block author is defined it will be      │ │
│ │                    defined as the equivocation',           │ │
│ │                    'reporter.']}, {'name': 'note_stalled', │ │
│ │                    'fields': [{'name': 'delay', 'type': 6, │ │
│ │                    'typeName': 'BlockNumberFor<T>',        │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'best_finalized_block_number', 'type':  │ │
│ │                    6, 'typeName': 'BlockNumberFor<T>',     │ │
│ │                    'docs': []}], 'index': 2, 'docs':       │ │
│ │                    ['Note that the current authority set   │ │
│ │                    of the GRANDPA finality gadget has      │ │
│ │                    stalled.', '', 'This will trigger a     │ │
│ │                    forced authority set change at the      │ │
│ │                    beginning of the next session, to', 'be │ │
│ │                    enacted `delay` blocks after that. The  │ │
│ │                    `delay` should be high enough to safely │ │
│ │                    assume', 'that the block signalling the │ │
│ │                    forced change will not be re-orged e.g. │ │
│ │                    1000 blocks.', 'The block production    │ │
│ │                    rate (which may be slowed down because  │ │
│ │                    of finality lagging) should', 'be taken │ │
│ │                    into account when choosing the `delay`. │ │
│ │                    The GRANDPA voters based on the new',   │ │
│ │                    'authority will start voting on top of  │ │
│ │                    `best_finalized_block_number` for new   │ │
│ │                    finalized', 'blocks.                    │ │
│ │                    `best_finalized_block_number` should be │ │
│ │                    the highest of the latest finalized',   │ │
│ │                    'block of all validators of the new     │ │
│ │                    authority set.', '', 'Only callable by  │ │
│ │                    root.']}]}}, 'docs': ['Contains a       │ │
│ │                    variant per dispatchable extrinsic that │ │
│ │                    this pallet has.']}}, {'id': 90,        │ │
│ │                    'type': {'path':                        │ │
│ │                    ['sp_consensus_grandpa',                │ │
│ │                    'EquivocationProof'], 'params':         │ │
│ │                    [{'name': 'H', 'type': 13}, {'name':    │ │
│ │                    'N', 'type': 6}], 'def': {'composite':  │ │
│ │                    {'fields': [{'name': 'set_id', 'type':  │ │
│ │                    6, 'typeName': 'SetId', 'docs': []},    │ │
│ │                    {'name': 'equivocation', 'type': 91,    │ │
│ │                    'typeName': 'Equivocation<H, N>',       │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    91, 'type': {'path':                    │ │
│ │                    ['sp_consensus_grandpa',                │ │
│ │                    'Equivocation'], 'params': [{'name':    │ │
│ │                    'H', 'type': 13}, {'name': 'N', 'type': │ │
│ │                    6}], 'def': {'variant': {'variants':    │ │
│ │                    [{'name': 'Prevote', 'fields':          │ │
│ │                    [{'name': None, 'type': 92, 'typeName': │ │
│ │                    'finality_grandpa::Equivocation<Author… │ │
│ │                    finality_grandpa::Prevote<\nH, N>,      │ │
│ │                    AuthoritySignature,>', 'docs': []}],    │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'Precommit', 'fields': [{'name': None,  │ │
│ │                    'type': 97, 'typeName':                 │ │
│ │                    'finality_grandpa::Equivocation<Author… │ │
│ │                    finality_grandpa::Precommit\n<H, N>,    │ │
│ │                    AuthoritySignature,>', 'docs': []}],    │ │
│ │                    'index': 1, 'docs': []}]}}, 'docs':     │ │
│ │                    []}}, {'id': 92, 'type': {'path':       │ │
│ │                    ['finality_grandpa', 'Equivocation'],   │ │
│ │                    'params': [{'name': 'Id', 'type': 34},  │ │
│ │                    {'name': 'V', 'type': 93}, {'name':     │ │
│ │                    'S', 'type': 94}], 'def': {'composite': │ │
│ │                    {'fields': [{'name': 'round_number',    │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'identity', 'type': 34,   │ │
│ │                    'typeName': 'Id', 'docs': []}, {'name': │ │
│ │                    'first', 'type': 96, 'typeName': '(V,   │ │
│ │                    S)', 'docs': []}, {'name': 'second',    │ │
│ │                    'type': 96, 'typeName': '(V, S)',       │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    93, 'type': {'path':                    │ │
│ │                    ['finality_grandpa', 'Prevote'],        │ │
│ │                    'params': [{'name': 'H', 'type': 13},   │ │
│ │                    {'name': 'N', 'type': 6}], 'def':       │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'target_hash', 'type': 13, 'typeName':  │ │
│ │                    'H', 'docs': []}, {'name':              │ │
│ │                    'target_number', 'type': 6, 'typeName': │ │
│ │                    'N', 'docs': []}]}}, 'docs': []}},      │ │
│ │                    {'id': 94, 'type': {'path':             │ │
│ │                    ['sp_consensus_grandpa', 'app',         │ │
│ │                    'Signature'], 'params': [], 'def':      │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 95, 'typeName':           │ │
│ │                    'ed25519::Signature', 'docs': []}]}},   │ │
│ │                    'docs': []}}, {'id': 95, 'type':        │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'array': {'len': 64, 'type': 2}},      │ │
│ │                    'docs': []}}, {'id': 96, 'type':        │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'tuple': [93, 94]}, 'docs': []}},      │ │
│ │                    {'id': 97, 'type': {'path':             │ │
│ │                    ['finality_grandpa', 'Equivocation'],   │ │
│ │                    'params': [{'name': 'Id', 'type': 34},  │ │
│ │                    {'name': 'V', 'type': 98}, {'name':     │ │
│ │                    'S', 'type': 94}], 'def': {'composite': │ │
│ │                    {'fields': [{'name': 'round_number',    │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'identity', 'type': 34,   │ │
│ │                    'typeName': 'Id', 'docs': []}, {'name': │ │
│ │                    'first', 'type': 99, 'typeName': '(V,   │ │
│ │                    S)', 'docs': []}, {'name': 'second',    │ │
│ │                    'type': 99, 'typeName': '(V, S)',       │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    98, 'type': {'path':                    │ │
│ │                    ['finality_grandpa', 'Precommit'],      │ │
│ │                    'params': [{'name': 'H', 'type': 13},   │ │
│ │                    {'name': 'N', 'type': 6}], 'def':       │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'target_hash', 'type': 13, 'typeName':  │ │
│ │                    'H', 'docs': []}, {'name':              │ │
│ │                    'target_number', 'type': 6, 'typeName': │ │
│ │                    'N', 'docs': []}]}}, 'docs': []}},      │ │
│ │                    {'id': 99, 'type': {'path': [],         │ │
│ │                    'params': [], 'def': {'tuple': [98,     │ │
│ │                    94]}, 'docs': []}}, {'id': 100, 'type': │ │
│ │                    {'path': ['sp_core', 'Void'], 'params': │ │
│ │                    [], 'def': {'variant': {'variants':     │ │
│ │                    []}}, 'docs': []}}, {'id': 101, 'type': │ │
│ │                    {'path': ['pallet_grandpa', 'pallet',   │ │
│ │                    'Error'], 'params': [{'name': 'T',      │ │
│ │                    'type': None}], 'def': {'variant':      │ │
│ │                    {'variants': [{'name': 'PauseFailed',   │ │
│ │                    'fields': [], 'index': 0, 'docs':       │ │
│ │                    ["Attempt to signal GRANDPA pause when  │ │
│ │                    the authority set isn't live", '(either │ │
│ │                    paused or already pending pause).']},   │ │
│ │                    {'name': 'ResumeFailed', 'fields': [],  │ │
│ │                    'index': 1, 'docs': ["Attempt to signal │ │
│ │                    GRANDPA resume when the authority set   │ │
│ │                    isn't paused", '(either live or already │ │
│ │                    pending resume).']}, {'name':           │ │
│ │                    'ChangePending', 'fields': [], 'index': │ │
│ │                    2, 'docs': ['Attempt to signal GRANDPA  │ │
│ │                    change with one already pending.']},    │ │
│ │                    {'name': 'TooSoon', 'fields': [],       │ │
│ │                    'index': 3, 'docs': ['Cannot signal     │ │
│ │                    forced change so soon after last.']},   │ │
│ │                    {'name': 'InvalidKeyOwnershipProof',    │ │
│ │                    'fields': [], 'index': 4, 'docs': ['A   │ │
│ │                    key ownership proof provided as part of │ │
│ │                    an equivocation report is invalid.']},  │ │
│ │                    {'name': 'InvalidEquivocationProof',    │ │
│ │                    'fields': [], 'index': 5, 'docs': ['An  │ │
│ │                    equivocation proof provided as part of  │ │
│ │                    an equivocation report is invalid.']},  │ │
│ │                    {'name': 'DuplicateOffenceReport',      │ │
│ │                    'fields': [], 'index': 6, 'docs': ['A   │ │
│ │                    given equivocation report is valid but  │ │
│ │                    already previously reported.']}]}},     │ │
│ │                    'docs': ['The `Error` enum of this      │ │
│ │                    pallet.']}}, {'id': 102, 'type':        │ │
│ │                    {'path': ['bounded_collections',        │ │
│ │                    'weak_bounded_vec', 'WeakBoundedVec'],  │ │
│ │                    'params': [{'name': 'T', 'type': 103},  │ │
│ │                    {'name': 'S', 'type': None}], 'def':    │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 105, 'typeName':          │ │
│ │                    'Vec<T>', 'docs': []}]}}, 'docs': []}}, │ │
│ │                    {'id': 103, 'type': {'path':            │ │
│ │                    ['pallet_balances', 'types',            │ │
│ │                    'BalanceLock'], 'params': [{'name':     │ │
│ │                    'Balance', 'type': 6}], 'def':          │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'id', 'type': 77, 'typeName':           │ │
│ │                    'LockIdentifier', 'docs': []}, {'name': │ │
│ │                    'amount', 'type': 6, 'typeName':        │ │
│ │                    'Balance', 'docs': []}, {'name':        │ │
│ │                    'reasons', 'type': 104, 'typeName':     │ │
│ │                    'Reasons', 'docs': []}]}}, 'docs':      │ │
│ │                    []}}, {'id': 104, 'type': {'path':      │ │
│ │                    ['pallet_balances', 'types',            │ │
│ │                    'Reasons'], 'params': [], 'def':        │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'Fee', 'fields': [], 'index': 0,        │ │
│ │                    'docs': []}, {'name': 'Misc', 'fields': │ │
│ │                    [], 'index': 1, 'docs': []}, {'name':   │ │
│ │                    'All', 'fields': [], 'index': 2,        │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    105, 'type': {'path': [], 'params': [], │ │
│ │                    'def': {'sequence': {'type': 103}},     │ │
│ │                    'docs': []}}, {'id': 106, 'type':       │ │
│ │                    {'path': ['bounded_collections',        │ │
│ │                    'bounded_vec', 'BoundedVec'], 'params': │ │
│ │                    [{'name': 'T', 'type': 107}, {'name':   │ │
│ │                    'S', 'type': None}], 'def':             │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 108, 'typeName':          │ │
│ │                    'Vec<T>', 'docs': []}]}}, 'docs': []}}, │ │
│ │                    {'id': 107, 'type': {'path':            │ │
│ │                    ['pallet_balances', 'types',            │ │
│ │                    'ReserveData'], 'params': [{'name':     │ │
│ │                    'ReserveIdentifier', 'type': 77},       │ │
│ │                    {'name': 'Balance', 'type': 6}], 'def': │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'id', 'type': 77, 'typeName':           │ │
│ │                    'ReserveIdentifier', 'docs': []},       │ │
│ │                    {'name': 'amount', 'type': 6,           │ │
│ │                    'typeName': 'Balance', 'docs': []}]}},  │ │
│ │                    'docs': []}}, {'id': 108, 'type':       │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'sequence': {'type': 107}}, 'docs':    │ │
│ │                    []}}, {'id': 109, 'type': {'path':      │ │
│ │                    ['bounded_collections', 'bounded_vec',  │ │
│ │                    'BoundedVec'], 'params': [{'name': 'T', │ │
│ │                    'type': 110}, {'name': 'S', 'type':     │ │
│ │                    None}], 'def': {'composite': {'fields': │ │
│ │                    [{'name': None, 'type': 111,            │ │
│ │                    'typeName': 'Vec<T>', 'docs': []}]}},   │ │
│ │                    'docs': []}}, {'id': 110, 'type':       │ │
│ │                    {'path': ['frame_support', 'traits',    │ │
│ │                    'tokens', 'misc', 'IdAmount'],          │ │
│ │                    'params': [{'name': 'Id', 'type': 40},  │ │
│ │                    {'name': 'Balance', 'type': 6}], 'def': │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'id', 'type': 40, 'typeName': 'Id',     │ │
│ │                    'docs': []}, {'name': 'amount', 'type': │ │
│ │                    6, 'typeName': 'Balance', 'docs':       │ │
│ │                    []}]}}, 'docs': []}}, {'id': 111,       │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'sequence': {'type': 110}},     │ │
│ │                    'docs': []}}, {'id': 112, 'type':       │ │
│ │                    {'path': ['bounded_collections',        │ │
│ │                    'bounded_vec', 'BoundedVec'], 'params': │ │
│ │                    [{'name': 'T', 'type': 110}, {'name':   │ │
│ │                    'S', 'type': None}], 'def':             │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 111, 'typeName':          │ │
│ │                    'Vec<T>', 'docs': []}]}}, 'docs': []}}, │ │
│ │                    {'id': 113, 'type': {'path':            │ │
│ │                    ['pallet_balances', 'pallet', 'Call'],  │ │
│ │                    'params': [{'name': 'T', 'type': None}, │ │
│ │                    {'name': 'I', 'type': None}], 'def':    │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'transfer_allow_death', 'fields':       │ │
│ │                    [{'name': 'dest', 'type': 114,          │ │
│ │                    'typeName': 'AccountIdLookupOf<T>',     │ │
│ │                    'docs': []}, {'name': 'value', 'type':  │ │
│ │                    12, 'typeName': 'T::Balance', 'docs':   │ │
│ │                    []}], 'index': 0, 'docs': ['Transfer    │ │
│ │                    some liquid free balance to another     │ │
│ │                    account.', '', '`transfer_allow_death`  │ │
│ │                    will set the `FreeBalance` of the       │ │
│ │                    sender and receiver.', "If the sender's │ │
│ │                    account is below the existential        │ │
│ │                    deposit as a result", 'of the transfer, │ │
│ │                    the account will be reaped.', '', 'The  │ │
│ │                    dispatch origin for this call must be   │ │
│ │                    `Signed` by the transactor.']},         │ │
│ │                    {'name': 'force_transfer', 'fields':    │ │
│ │                    [{'name': 'source', 'type': 114,        │ │
│ │                    'typeName': 'AccountIdLookupOf<T>',     │ │
│ │                    'docs': []}, {'name': 'dest', 'type':   │ │
│ │                    114, 'typeName':                        │ │
│ │                    'AccountIdLookupOf<T>', 'docs': []},    │ │
│ │                    {'name': 'value', 'type': 12,           │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 2, 'docs': ['Exactly as        │ │
│ │                    `transfer_allow_death`, except the      │ │
│ │                    origin must be root and the source      │ │
│ │                    account', 'may be specified.']},        │ │
│ │                    {'name': 'transfer_keep_alive',         │ │
│ │                    'fields': [{'name': 'dest', 'type':     │ │
│ │                    114, 'typeName':                        │ │
│ │                    'AccountIdLookupOf<T>', 'docs': []},    │ │
│ │                    {'name': 'value', 'type': 12,           │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 3, 'docs': ['Same as the       │ │
│ │                    [`transfer_allow_death`] call, but with │ │
│ │                    a check that the transfer will not',    │ │
│ │                    'kill the origin account.', '', '99% of │ │
│ │                    the time you want                       │ │
│ │                    [`transfer_allow_death`] instead.', '', │ │
│ │                    '[`transfer_allow_death`]:              │ │
│ │                    struct.Pallet.html#method.transfer']},  │ │
│ │                    {'name': 'transfer_all', 'fields':      │ │
│ │                    [{'name': 'dest', 'type': 114,          │ │
│ │                    'typeName': 'AccountIdLookupOf<T>',     │ │
│ │                    'docs': []}, {'name': 'keep_alive',     │ │
│ │                    'type': 9, 'typeName': 'bool', 'docs':  │ │
│ │                    []}], 'index': 4, 'docs': ['Transfer    │ │
│ │                    the entire transferable balance from    │ │
│ │                    the caller account.', '', 'NOTE: This   │ │
│ │                    function only attempts to transfer      │ │
│ │                    _transferable_ balances. This means     │ │
│ │                    that', 'any locked, reserved, or        │ │
│ │                    existential deposits (when `keep_alive` │ │
│ │                    is `true`), will not be', 'transferred  │ │
│ │                    by this function. To ensure that this   │ │
│ │                    function results in a killed account,', │ │
│ │                    'you might need to prepare the account  │ │
│ │                    by removing any reference counters,     │ │
│ │                    storage', 'deposits, etc...', '', 'The  │ │
│ │                    dispatch origin of this call must be    │ │
│ │                    Signed.', '', '- `dest`: The recipient  │ │
│ │                    of the transfer.', '- `keep_alive`: A   │ │
│ │                    boolean to determine if the             │ │
│ │                    `transfer_all` operation should send    │ │
│ │                    all', '  of the funds the account has,  │ │
│ │                    causing the sender account to be killed │ │
│ │                    (false), or', '  transfer everything    │ │
│ │                    except at least the existential         │ │
│ │                    deposit, which will guarantee to', '    │ │
│ │                    keep the sender account alive           │ │
│ │                    (true).']}, {'name': 'force_unreserve', │ │
│ │                    'fields': [{'name': 'who', 'type': 114, │ │
│ │                    'typeName': 'AccountIdLookupOf<T>',     │ │
│ │                    'docs': []}, {'name': 'amount', 'type': │ │
│ │                    6, 'typeName': 'T::Balance', 'docs':    │ │
│ │                    []}], 'index': 5, 'docs': ['Unreserve   │ │
│ │                    some balance from a user by force.',    │ │
│ │                    '', 'Can only be called by ROOT.']},    │ │
│ │                    {'name': 'upgrade_accounts', 'fields':  │ │
│ │                    [{'name': 'who', 'type': 117,           │ │
│ │                    'typeName': 'Vec<T::AccountId>',        │ │
│ │                    'docs': []}], 'index': 6, 'docs':       │ │
│ │                    ['Upgrade a specified account.', '', '- │ │
│ │                    `origin`: Must be `Signed`.', '- `who`: │ │
│ │                    The account to be upgraded.', '', 'This │ │
│ │                    will waive the transaction fee if at    │ │
│ │                    least all but 10% of the accounts       │ │
│ │                    needed to', 'be upgraded. (We let some  │ │
│ │                    not have to be upgraded just in order   │ │
│ │                    to allow for the', 'possibility of      │ │
│ │                    churn).']}, {'name':                    │ │
│ │                    'force_set_balance', 'fields':          │ │
│ │                    [{'name': 'who', 'type': 114,           │ │
│ │                    'typeName': 'AccountIdLookupOf<T>',     │ │
│ │                    'docs': []}, {'name': 'new_free',       │ │
│ │                    'type': 12, 'typeName': 'T::Balance',   │ │
│ │                    'docs': []}], 'index': 8, 'docs': ['Set │ │
│ │                    the regular balance of a given          │ │
│ │                    account.', '', 'The dispatch origin for │ │
│ │                    this call is `root`.']}, {'name':       │ │
│ │                    'force_adjust_total_issuance',          │ │
│ │                    'fields': [{'name': 'direction',        │ │
│ │                    'type': 118, 'typeName':                │ │
│ │                    'AdjustmentDirection', 'docs': []},     │ │
│ │                    {'name': 'delta', 'type': 12,           │ │
│ │                    'typeName': 'T::Balance', 'docs': []}], │ │
│ │                    'index': 9, 'docs': ['Adjust the total  │ │
│ │                    issuance in a saturating way.', '',     │ │
│ │                    'Can only be called by root and always  │ │
│ │                    needs a positive `delta`.', '', '#      │ │
│ │                    Example']}, {'name': 'burn', 'fields':  │ │
│ │                    [{'name': 'value', 'type': 12,          │ │
│ │                    'typeName': 'T::Balance', 'docs': []},  │ │
│ │                    {'name': 'keep_alive', 'type': 9,       │ │
│ │                    'typeName': 'bool', 'docs': []}],       │ │
│ │                    'index': 10, 'docs': ['Burn the         │ │
│ │                    specified liquid free balance from the  │ │
│ │                    origin account.', '', "If the origin's  │ │
│ │                    account ends up below the existential   │ │
│ │                    deposit as a result", 'of the burn and  │ │
│ │                    `keep_alive` is false, the account will │ │
│ │                    be reaped.', '', 'Unlike sending funds  │ │
│ │                    to a _burn_ address, which merely makes │ │
│ │                    the funds inaccessible,', 'this `burn`  │ │
│ │                    operation will reduce total issuance by │ │
│ │                    the amount _burned_.']}]}}, 'docs':     │ │
│ │                    ['Contains a variant per dispatchable   │ │
│ │                    extrinsic that this pallet has.']}},    │ │
│ │                    {'id': 114, 'type': {'path':            │ │
│ │                    ['sp_runtime', 'multiaddress',          │ │
│ │                    'MultiAddress'], 'params': [{'name':    │ │
│ │                    'AccountId', 'type': 0}, {'name':       │ │
│ │                    'AccountIndex', 'type': 40}], 'def':    │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'Id', 'fields': [{'name': None, 'type': │ │
│ │                    0, 'typeName': 'AccountId', 'docs':     │ │
│ │                    []}], 'index': 0, 'docs': []}, {'name': │ │
│ │                    'Index', 'fields': [{'name': None,      │ │
│ │                    'type': 115, 'typeName':                │ │
│ │                    'AccountIndex', 'docs': []}], 'index':  │ │
│ │                    1, 'docs': []}, {'name': 'Raw',         │ │
│ │                    'fields': [{'name': None, 'type': 14,   │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []}],    │ │
│ │                    'index': 2, 'docs': []}, {'name':       │ │
│ │                    'Address32', 'fields': [{'name': None,  │ │
│ │                    'type': 1, 'typeName': '[u8; 32]',      │ │
│ │                    'docs': []}], 'index': 3, 'docs': []},  │ │
│ │                    {'name': 'Address20', 'fields':         │ │
│ │                    [{'name': None, 'type': 116,            │ │
│ │                    'typeName': '[u8; 20]', 'docs': []}],   │ │
│ │                    'index': 4, 'docs': []}]}}, 'docs':     │ │
│ │                    []}}, {'id': 115, 'type': {'path': [],  │ │
│ │                    'params': [], 'def': {'compact':        │ │
│ │                    {'type': 40}}, 'docs': []}}, {'id':     │ │
│ │                    116, 'type': {'path': [], 'params': [], │ │
│ │                    'def': {'array': {'len': 20, 'type':    │ │
│ │                    2}}, 'docs': []}}, {'id': 117, 'type':  │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'sequence': {'type': 0}}, 'docs':      │ │
│ │                    []}}, {'id': 118, 'type': {'path':      │ │
│ │                    ['pallet_balances', 'types',            │ │
│ │                    'AdjustmentDirection'], 'params': [],   │ │
│ │                    'def': {'variant': {'variants':         │ │
│ │                    [{'name': 'Increase', 'fields': [],     │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'Decrease', 'fields': [], 'index': 1,   │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    119, 'type': {'path':                   │ │
│ │                    ['pallet_balances', 'pallet', 'Error'], │ │
│ │                    'params': [{'name': 'T', 'type': None}, │ │
│ │                    {'name': 'I', 'type': None}], 'def':    │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'VestingBalance', 'fields': [],         │ │
│ │                    'index': 0, 'docs': ['Vesting balance   │ │
│ │                    too high to send value.']}, {'name':    │ │
│ │                    'LiquidityRestrictions', 'fields': [],  │ │
│ │                    'index': 1, 'docs': ['Account liquidity │ │
│ │                    restrictions prevent withdrawal.']},    │ │
│ │                    {'name': 'InsufficientBalance',         │ │
│ │                    'fields': [], 'index': 2, 'docs':       │ │
│ │                    ['Balance too low to send value.']},    │ │
│ │                    {'name': 'ExistentialDeposit',          │ │
│ │                    'fields': [], 'index': 3, 'docs':       │ │
│ │                    ['Value too low to create account due   │ │
│ │                    to existential deposit.']}, {'name':    │ │
│ │                    'Expendability', 'fields': [], 'index': │ │
│ │                    4, 'docs': ['Transfer/payment would     │ │
│ │                    kill account.']}, {'name':              │ │
│ │                    'ExistingVestingSchedule', 'fields':    │ │
│ │                    [], 'index': 5, 'docs': ['A vesting     │ │
│ │                    schedule already exists for this        │ │
│ │                    account.']}, {'name': 'DeadAccount',    │ │
│ │                    'fields': [], 'index': 6, 'docs':       │ │
│ │                    ['Beneficiary account must              │ │
│ │                    pre-exist.']}, {'name':                 │ │
│ │                    'TooManyReserves', 'fields': [],        │ │
│ │                    'index': 7, 'docs': ['Number of named   │ │
│ │                    reserves exceed `MaxReserves`.']},      │ │
│ │                    {'name': 'TooManyHolds', 'fields': [],  │ │
│ │                    'index': 8, 'docs': ['Number of holds   │ │
│ │                    exceed                                  │ │
│ │                    `VariantCountOf<T::RuntimeHoldReason>`… │ │
│ │                    {'name': 'TooManyFreezes', 'fields':    │ │
│ │                    [], 'index': 9, 'docs': ['Number of     │ │
│ │                    freezes exceed `MaxFreezes`.']},        │ │
│ │                    {'name': 'IssuanceDeactivated',         │ │
│ │                    'fields': [], 'index': 10, 'docs':      │ │
│ │                    ['The issuance cannot be modified since │ │
│ │                    it is already deactivated.']}, {'name': │ │
│ │                    'DeltaZero', 'fields': [], 'index': 11, │ │
│ │                    'docs': ['The delta cannot be           │ │
│ │                    zero.']}]}}, 'docs': ['The `Error` enum │ │
│ │                    of this pallet.']}}, {'id': 120,        │ │
│ │                    'type': {'path': ['sp_arithmetic',      │ │
│ │                    'fixed_point', 'FixedU128'], 'params':  │ │
│ │                    [], 'def': {'composite': {'fields':     │ │
│ │                    [{'name': None, 'type': 8, 'typeName':  │ │
│ │                    'u128', 'docs': []}]}}, 'docs': []}},   │ │
│ │                    {'id': 121, 'type': {'path':            │ │
│ │                    ['pallet_transaction_payment',          │ │
│ │                    'Releases'], 'params': [], 'def':       │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'V1Ancient', 'fields': [], 'index': 0,  │ │
│ │                    'docs': []}, {'name': 'V2', 'fields':   │ │
│ │                    [], 'index': 1, 'docs': []}]}}, 'docs': │ │
│ │                    []}}, {'id': 122, 'type': {'path':      │ │
│ │                    ['pallet_sudo', 'pallet', 'Call'],      │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'variant': {'variants': │ │
│ │                    [{'name': 'sudo', 'fields': [{'name':   │ │
│ │                    'call', 'type': 123, 'typeName':        │ │
│ │                    'Box<<T as Config>::RuntimeCall>',      │ │
│ │                    'docs': []}], 'index': 0, 'docs':       │ │
│ │                    ['Authenticates the sudo key and        │ │
│ │                    dispatches a function call with `Root`  │ │
│ │                    origin.']}, {'name':                    │ │
│ │                    'sudo_unchecked_weight', 'fields':      │ │
│ │                    [{'name': 'call', 'type': 123,          │ │
│ │                    'typeName': 'Box<<T as                  │ │
│ │                    Config>::RuntimeCall>', 'docs': []},    │ │
│ │                    {'name': 'weight', 'type': 11,          │ │
│ │                    'typeName': 'Weight', 'docs': []}],     │ │
│ │                    'index': 1, 'docs': ['Authenticates the │ │
│ │                    sudo key and dispatches a function call │ │
│ │                    with `Root` origin.', 'This function    │ │
│ │                    does not check the weight of the call,  │ │
│ │                    and instead allows the', 'Sudo user to  │ │
│ │                    specify the weight of the call.', '',   │ │
│ │                    'The dispatch origin for this call must │ │
│ │                    be _Signed_.']}, {'name': 'set_key',    │ │
│ │                    'fields': [{'name': 'new', 'type': 114, │ │
│ │                    'typeName': 'AccountIdLookupOf<T>',     │ │
│ │                    'docs': []}], 'index': 2, 'docs':       │ │
│ │                    ['Authenticates the current sudo key    │ │
│ │                    and sets the given AccountId (`new`) as │ │
│ │                    the new sudo', 'key.']}, {'name':       │ │
│ │                    'sudo_as', 'fields': [{'name': 'who',   │ │
│ │                    'type': 114, 'typeName':                │ │
│ │                    'AccountIdLookupOf<T>', 'docs': []},    │ │
│ │                    {'name': 'call', 'type': 123,           │ │
│ │                    'typeName': 'Box<<T as                  │ │
│ │                    Config>::RuntimeCall>', 'docs': []}],   │ │
│ │                    'index': 3, 'docs': ['Authenticates the │ │
│ │                    sudo key and dispatches a function call │ │
│ │                    with `Signed` origin from', 'a given    │ │
│ │                    account.', '', 'The dispatch origin for │ │
│ │                    this call must be _Signed_.']},         │ │
│ │                    {'name': 'remove_key', 'fields': [],    │ │
│ │                    'index': 4, 'docs': ['Permanently       │ │
│ │                    removes the sudo key.', '', '**This     │ │
│ │                    cannot be un-done.**']}]}}, 'docs':     │ │
│ │                    ['Contains a variant per dispatchable   │ │
│ │                    extrinsic that this pallet has.']}},    │ │
│ │                    {'id': 123, 'type': {'path':            │ │
│ │                    ['node_subspace_runtime',               │ │
│ │                    'RuntimeCall'], 'params': [], 'def':    │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'System', 'fields': [{'name': None,     │ │
│ │                    'type': 62, 'typeName':                 │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    Runtime>', 'docs': []}], 'index': 0,    │ │
│ │                    'docs': []}, {'name': 'Timestamp',      │ │
│ │                    'fields': [{'name': None, 'type': 79,   │ │
│ │                    'typeName':                             │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    Runtime>', 'docs': []}], 'index': 1,    │ │
│ │                    'docs': []}, {'name': 'Grandpa',        │ │
│ │                    'fields': [{'name': None, 'type': 89,   │ │
│ │                    'typeName':                             │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    Runtime>', 'docs': []}], 'index': 3,    │ │
│ │                    'docs': []}, {'name': 'Balances',       │ │
│ │                    'fields': [{'name': None, 'type': 113,  │ │
│ │                    'typeName':                             │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    Runtime>', 'docs': []}], 'index': 4,    │ │
│ │                    'docs': []}, {'name': 'Sudo', 'fields': │ │
│ │                    [{'name': None, 'type': 122,            │ │
│ │                    'typeName':                             │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    Runtime>', 'docs': []}], 'index': 6,    │ │
│ │                    'docs': []}, {'name': 'Multisig',       │ │
│ │                    'fields': [{'name': None, 'type': 124,  │ │
│ │                    'typeName':                             │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    Runtime>', 'docs': []}], 'index': 7,    │ │
│ │                    'docs': []}, {'name': 'Utility',        │ │
│ │                    'fields': [{'name': None, 'type': 126,  │ │
│ │                    'typeName':                             │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    Runtime>', 'docs': []}], 'index': 8,    │ │
│ │                    'docs': []}, {'name': 'SubspaceModule', │ │
│ │                    'fields': [{'name': None, 'type': 130,  │ │
│ │                    'typeName':                             │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    Runtime>', 'docs': []}], 'index': 9,    │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'GovernanceModule', 'fields': [{'name': │ │
│ │                    None, 'type': 151, 'typeName':          │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    Runtime>', 'docs': []}], 'index': 10,   │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'SubnetEmissionModule', 'fields':       │ │
│ │                    [{'name': None, 'type': 152,            │ │
│ │                    'typeName':                             │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    Runtime>', 'docs': []}], 'index': 11,   │ │
│ │                    'docs': []}, {'name': 'Offworker',      │ │
│ │                    'fields': [{'name': None, 'type': 154,  │ │
│ │                    'typeName':                             │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    Runtime>', 'docs': []}], 'index': 12,   │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    124, 'type': {'path':                   │ │
│ │                    ['pallet_multisig', 'pallet', 'Call'],  │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'variant': {'variants': │ │
│ │                    [{'name': 'as_multi_threshold_1',       │ │
│ │                    'fields': [{'name':                     │ │
│ │                    'other_signatories', 'type': 117,       │ │
│ │                    'typeName': 'Vec<T::AccountId>',        │ │
│ │                    'docs': []}, {'name': 'call', 'type':   │ │
│ │                    123, 'typeName': 'Box<<T as             │ │
│ │                    Config>::RuntimeCall>', 'docs': []}],   │ │
│ │                    'index': 0, 'docs': ['Immediately       │ │
│ │                    dispatch a multi-signature call using a │ │
│ │                    single approval from the caller.', '',  │ │
│ │                    'The dispatch origin for this call must │ │
│ │                    be _Signed_.', '', '-                   │ │
│ │                    `other_signatories`: The accounts       │ │
│ │                    (other than the sender) who are part of │ │
│ │                    the', 'multi-signature, but do not      │ │
│ │                    participate in the approval process.',  │ │
│ │                    '- `call`: The call to be executed.',   │ │
│ │                    '', 'Result is equivalent to the        │ │
│ │                    dispatched result.', '', '##            │ │
│ │                    Complexity', 'O(Z + C) where Z is the   │ │
│ │                    length of the call and C its execution  │ │
│ │                    weight.']}, {'name': 'as_multi',        │ │
│ │                    'fields': [{'name': 'threshold',        │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name': 'other_signatories',      │ │
│ │                    'type': 117, 'typeName':                │ │
│ │                    'Vec<T::AccountId>', 'docs': []},       │ │
│ │                    {'name': 'maybe_timepoint', 'type':     │ │
│ │                    125, 'typeName':                        │ │
│ │                    'Option<Timepoint<BlockNumberFor<T>>>', │ │
│ │                    'docs': []}, {'name': 'call', 'type':   │ │
│ │                    123, 'typeName': 'Box<<T as             │ │
│ │                    Config>::RuntimeCall>', 'docs': []},    │ │
│ │                    {'name': 'max_weight', 'type': 11,      │ │
│ │                    'typeName': 'Weight', 'docs': []}],     │ │
│ │                    'index': 1, 'docs': ['Register approval │ │
│ │                    for a dispatch to be made from a        │ │
│ │                    deterministic composite account if',    │ │
│ │                    'approved by a total of `threshold - 1` │ │
│ │                    of `other_signatories`.', '', 'If there │ │
│ │                    are enough, then dispatch the call.',   │ │
│ │                    '', 'Payment: `DepositBase` will be     │ │
│ │                    reserved if this is the first approval, │ │
│ │                    plus', '`threshold` times               │ │
│ │                    `DepositFactor`. It is returned once    │ │
│ │                    this dispatch happens or', 'is          │ │
│ │                    cancelled.', '', 'The dispatch origin   │ │
│ │                    for this call must be _Signed_.', '',   │ │
│ │                    '- `threshold`: The total number of     │ │
│ │                    approvals for this dispatch before it   │ │
│ │                    is executed.', '- `other_signatories`:  │ │
│ │                    The accounts (other than the sender)    │ │
│ │                    who can approve this', 'dispatch. May   │ │
│ │                    not be empty.', '- `maybe_timepoint`:   │ │
│ │                    If this is the first approval, then     │ │
│ │                    this must be `None`. If it is', 'not    │ │
│ │                    the first approval, then it must be     │ │
│ │                    `Some`, with the timepoint (block       │ │
│ │                    number and', 'transaction index) of the │ │
│ │                    first approval transaction.', '-        │ │
│ │                    `call`: The call to be executed.', '',  │ │
│ │                    'NOTE: Unless this is the final         │ │
│ │                    approval, you will generally want to    │ │
│ │                    use', '`approve_as_multi` instead,      │ │
│ │                    since it only requires a hash of the    │ │
│ │                    call.', '', 'Result is equivalent to    │ │
│ │                    the dispatched result if `threshold` is │ │
│ │                    exactly `1`. Otherwise', 'on success,   │ │
│ │                    result is `Ok` and the result from the  │ │
│ │                    interior call, if it was executed,',    │ │
│ │                    'may be found in the deposited          │ │
│ │                    `MultisigExecuted` event.', '', '##     │ │
│ │                    Complexity', '- `O(S + Z + Call)`.', '- │ │
│ │                    Up to one balance-reserve or unreserve  │ │
│ │                    operation.', '- One passthrough         │ │
│ │                    operation, one insert, both `O(S)`      │ │
│ │                    where `S` is the number of', '          │ │
│ │                    signatories. `S` is capped by           │ │
│ │                    `MaxSignatories`, with weight being     │ │
│ │                    proportional.', '- One call encode &    │ │
│ │                    hash, both of complexity `O(Z)` where   │ │
│ │                    `Z` is tx-len.', '- One encode & hash,  │ │
│ │                    both of complexity `O(S)`.', '- Up to   │ │
│ │                    one binary search and insert (`O(logS + │ │
│ │                    S)`).', '- I/O: 1 read `O(S)`, up to 1  │ │
│ │                    mutate `O(S)`. Up to one remove.', '-   │ │
│ │                    One event.', '- The weight of the       │ │
│ │                    `call`.', '- Storage: inserts one item, │ │
│ │                    value size bounded by `MaxSignatories`, │ │
│ │                    with a deposit', '  taken for its       │ │
│ │                    lifetime of `DepositBase + threshold *  │ │
│ │                    DepositFactor`.']}, {'name':            │ │
│ │                    'approve_as_multi', 'fields': [{'name': │ │
│ │                    'threshold', 'type': 46, 'typeName':    │ │
│ │                    'u16', 'docs': []}, {'name':            │ │
│ │                    'other_signatories', 'type': 117,       │ │
│ │                    'typeName': 'Vec<T::AccountId>',        │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'maybe_timepoint', 'type': 125,         │ │
│ │                    'typeName':                             │ │
│ │                    'Option<Timepoint<BlockNumberFor<T>>>', │ │
│ │                    'docs': []}, {'name': 'call_hash',      │ │
│ │                    'type': 1, 'typeName': '[u8; 32]',      │ │
│ │                    'docs': []}, {'name': 'max_weight',     │ │
│ │                    'type': 11, 'typeName': 'Weight',       │ │
│ │                    'docs': []}], 'index': 2, 'docs':       │ │
│ │                    ['Register approval for a dispatch to   │ │
│ │                    be made from a deterministic composite  │ │
│ │                    account if', 'approved by a total of    │ │
│ │                    `threshold - 1` of                      │ │
│ │                    `other_signatories`.', '', 'Payment:    │ │
│ │                    `DepositBase` will be reserved if this  │ │
│ │                    is the first approval, plus',           │ │
│ │                    '`threshold` times `DepositFactor`. It  │ │
│ │                    is returned once this dispatch happens  │ │
│ │                    or', 'is cancelled.', '', 'The dispatch │ │
│ │                    origin for this call must be            │ │
│ │                    _Signed_.', '', '- `threshold`: The     │ │
│ │                    total number of approvals for this      │ │
│ │                    dispatch before it is executed.', '-    │ │
│ │                    `other_signatories`: The accounts       │ │
│ │                    (other than the sender) who can approve │ │
│ │                    this', 'dispatch. May not be empty.',   │ │
│ │                    '- `maybe_timepoint`: If this is the    │ │
│ │                    first approval, then this must be       │ │
│ │                    `None`. If it is', 'not the first       │ │
│ │                    approval, then it must be `Some`, with  │ │
│ │                    the timepoint (block number and',       │ │
│ │                    'transaction index) of the first        │ │
│ │                    approval transaction.', '- `call_hash`: │ │
│ │                    The hash of the call to be executed.',  │ │
│ │                    '', 'NOTE: If this is the final         │ │
│ │                    approval, you will want to use          │ │
│ │                    `as_multi` instead.', '', '##           │ │
│ │                    Complexity', '- `O(S)`.', '- Up to one  │ │
│ │                    balance-reserve or unreserve            │ │
│ │                    operation.', '- One passthrough         │ │
│ │                    operation, one insert, both `O(S)`      │ │
│ │                    where `S` is the number of', '          │ │
│ │                    signatories. `S` is capped by           │ │
│ │                    `MaxSignatories`, with weight being     │ │
│ │                    proportional.', '- One encode & hash,   │ │
│ │                    both of complexity `O(S)`.', '- Up to   │ │
│ │                    one binary search and insert (`O(logS + │ │
│ │                    S)`).', '- I/O: 1 read `O(S)`, up to 1  │ │
│ │                    mutate `O(S)`. Up to one remove.', '-   │ │
│ │                    One event.', '- Storage: inserts one    │ │
│ │                    item, value size bounded by             │ │
│ │                    `MaxSignatories`, with a deposit', '    │ │
│ │                    taken for its lifetime of `DepositBase  │ │
│ │                    + threshold * DepositFactor`.']},       │ │
│ │                    {'name': 'cancel_as_multi', 'fields':   │ │
│ │                    [{'name': 'threshold', 'type': 46,      │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'other_signatories', 'type':   │ │
│ │                    117, 'typeName': 'Vec<T::AccountId>',   │ │
│ │                    'docs': []}, {'name': 'timepoint',      │ │
│ │                    'type': 43, 'typeName':                 │ │
│ │                    'Timepoint<BlockNumberFor<T>>', 'docs': │ │
│ │                    []}, {'name': 'call_hash', 'type': 1,   │ │
│ │                    'typeName': '[u8; 32]', 'docs': []}],   │ │
│ │                    'index': 3, 'docs': ['Cancel a          │ │
│ │                    pre-existing, on-going multisig         │ │
│ │                    transaction. Any deposit reserved       │ │
│ │                    previously', 'for this operation will   │ │
│ │                    be unreserved on success.', '', 'The    │ │
│ │                    dispatch origin for this call must be   │ │
│ │                    _Signed_.', '', '- `threshold`: The     │ │
│ │                    total number of approvals for this      │ │
│ │                    dispatch before it is executed.', '-    │ │
│ │                    `other_signatories`: The accounts       │ │
│ │                    (other than the sender) who can approve │ │
│ │                    this', 'dispatch. May not be empty.',   │ │
│ │                    '- `timepoint`: The timepoint (block    │ │
│ │                    number and transaction index) of the    │ │
│ │                    first approval', 'transaction for this  │ │
│ │                    dispatch.', '- `call_hash`: The hash of │ │
│ │                    the call to be executed.', '', '##      │ │
│ │                    Complexity', '- `O(S)`.', '- Up to one  │ │
│ │                    balance-reserve or unreserve            │ │
│ │                    operation.', '- One passthrough         │ │
│ │                    operation, one insert, both `O(S)`      │ │
│ │                    where `S` is the number of', '          │ │
│ │                    signatories. `S` is capped by           │ │
│ │                    `MaxSignatories`, with weight being     │ │
│ │                    proportional.', '- One encode & hash,   │ │
│ │                    both of complexity `O(S)`.', '- One     │ │
│ │                    event.', '- I/O: 1 read `O(S)`, one     │ │
│ │                    remove.', '- Storage: removes one       │ │
│ │                    item.']}]}}, 'docs': ['Contains a       │ │
│ │                    variant per dispatchable extrinsic that │ │
│ │                    this pallet has.']}}, {'id': 125,       │ │
│ │                    'type': {'path': ['Option'], 'params':  │ │
│ │                    [{'name': 'T', 'type': 43}], 'def':     │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'None', 'fields': [], 'index': 0,       │ │
│ │                    'docs': []}, {'name': 'Some', 'fields': │ │
│ │                    [{'name': None, 'type': 43, 'typeName': │ │
│ │                    None, 'docs': []}], 'index': 1, 'docs': │ │
│ │                    []}]}}, 'docs': []}}, {'id': 126,       │ │
│ │                    'type': {'path': ['pallet_utility',     │ │
│ │                    'pallet', 'Call'], 'params': [{'name':  │ │
│ │                    'T', 'type': None}], 'def': {'variant': │ │
│ │                    {'variants': [{'name': 'batch',         │ │
│ │                    'fields': [{'name': 'calls', 'type':    │ │
│ │                    127, 'typeName': 'Vec<<T as             │ │
│ │                    Config>::RuntimeCall>', 'docs': []}],   │ │
│ │                    'index': 0, 'docs': ['Send a batch of   │ │
│ │                    dispatch calls.', '', 'May be called    │ │
│ │                    from any origin except `None`.', '', '- │ │
│ │                    `calls`: The calls to be dispatched     │ │
│ │                    from the same origin. The number of     │ │
│ │                    call must not', '  exceed the constant: │ │
│ │                    `batched_calls_limit` (available in     │ │
│ │                    constant metadata).', '', 'If origin is │ │
│ │                    root then the calls are dispatched      │ │
│ │                    without checking origin filter. (This', │ │
│ │                    'includes bypassing                     │ │
│ │                    `frame_system::Config::BaseCallFilter`… │ │
│ │                    '', '## Complexity', '- O(C) where C is │ │
│ │                    the number of calls to be batched.',    │ │
│ │                    '', 'This will return `Ok` in all       │ │
│ │                    circumstances. To determine the success │ │
│ │                    of the batch, an', 'event is deposited. │ │
│ │                    If a call failed and the batch was      │ │
│ │                    interrupted, then the',                 │ │
│ │                    '`BatchInterrupted` event is deposited, │ │
│ │                    along with the number of successful     │ │
│ │                    calls made', 'and the error of the      │ │
│ │                    failed call. If all were successful,    │ │
│ │                    then the `BatchCompleted`', 'event is   │ │
│ │                    deposited.']}, {'name':                 │ │
│ │                    'as_derivative', 'fields': [{'name':    │ │
│ │                    'index', 'type': 46, 'typeName': 'u16', │ │
│ │                    'docs': []}, {'name': 'call', 'type':   │ │
│ │                    123, 'typeName': 'Box<<T as             │ │
│ │                    Config>::RuntimeCall>', 'docs': []}],   │ │
│ │                    'index': 1, 'docs': ['Send a call       │ │
│ │                    through an indexed pseudonym of the     │ │
│ │                    sender.', '', 'Filter from origin are   │ │
│ │                    passed along. The call will be          │ │
│ │                    dispatched with an origin which', 'use  │ │
│ │                    the same filter as the origin of this   │ │
│ │                    call.', '', 'NOTE: If you need to       │ │
│ │                    ensure that any account-based filtering │ │
│ │                    is not honored (i.e.', 'because you     │ │
│ │                    expect `proxy` to have been used prior  │ │
│ │                    in the call stack and you do not want', │ │
│ │                    'the call restrictions to apply to any  │ │
│ │                    sub-accounts), then use                 │ │
│ │                    `as_multi_threshold_1`', 'in the        │ │
│ │                    Multisig pallet instead.', '', 'NOTE:   │ │
│ │                    Prior to version *12, this was called   │ │
│ │                    `as_limited_sub`.', '', 'The dispatch   │ │
│ │                    origin for this call must be            │ │
│ │                    _Signed_.']}, {'name': 'batch_all',     │ │
│ │                    'fields': [{'name': 'calls', 'type':    │ │
│ │                    127, 'typeName': 'Vec<<T as             │ │
│ │                    Config>::RuntimeCall>', 'docs': []}],   │ │
│ │                    'index': 2, 'docs': ['Send a batch of   │ │
│ │                    dispatch calls and atomically execute   │ │
│ │                    them.', 'The whole transaction will     │ │
│ │                    rollback and fail if any of the calls   │ │
│ │                    failed.', '', 'May be called from any   │ │
│ │                    origin except `None`.', '', '- `calls`: │ │
│ │                    The calls to be dispatched from the     │ │
│ │                    same origin. The number of call must    │ │
│ │                    not', '  exceed the constant:           │ │
│ │                    `batched_calls_limit` (available in     │ │
│ │                    constant metadata).', '', 'If origin is │ │
│ │                    root then the calls are dispatched      │ │
│ │                    without checking origin filter. (This', │ │
│ │                    'includes bypassing                     │ │
│ │                    `frame_system::Config::BaseCallFilter`… │ │
│ │                    '', '## Complexity', '- O(C) where C is │ │
│ │                    the number of calls to be batched.']},  │ │
│ │                    {'name': 'dispatch_as', 'fields':       │ │
│ │                    [{'name': 'as_origin', 'type': 128,     │ │
│ │                    'typeName': 'Box<T::PalletsOrigin>',    │ │
│ │                    'docs': []}, {'name': 'call', 'type':   │ │
│ │                    123, 'typeName': 'Box<<T as             │ │
│ │                    Config>::RuntimeCall>', 'docs': []}],   │ │
│ │                    'index': 3, 'docs': ['Dispatches a      │ │
│ │                    function call with a provided origin.', │ │
│ │                    '', 'The dispatch origin for this call  │ │
│ │                    must be _Root_.', '', '## Complexity',  │ │
│ │                    '- O(1).']}, {'name': 'force_batch',    │ │
│ │                    'fields': [{'name': 'calls', 'type':    │ │
│ │                    127, 'typeName': 'Vec<<T as             │ │
│ │                    Config>::RuntimeCall>', 'docs': []}],   │ │
│ │                    'index': 4, 'docs': ['Send a batch of   │ │
│ │                    dispatch calls.', "Unlike `batch`, it   │ │
│ │                    allows errors and won't interrupt.",    │ │
│ │                    '', 'May be called from any origin      │ │
│ │                    except `None`.', '', '- `calls`: The    │ │
│ │                    calls to be dispatched from the same    │ │
│ │                    origin. The number of call must not', ' │ │
│ │                    exceed the constant:                    │ │
│ │                    `batched_calls_limit` (available in     │ │
│ │                    constant metadata).', '', 'If origin is │ │
│ │                    root then the calls are dispatch        │ │
│ │                    without checking origin filter. (This', │ │
│ │                    'includes bypassing                     │ │
│ │                    `frame_system::Config::BaseCallFilter`… │ │
│ │                    '', '## Complexity', '- O(C) where C is │ │
│ │                    the number of calls to be batched.']},  │ │
│ │                    {'name': 'with_weight', 'fields':       │ │
│ │                    [{'name': 'call', 'type': 123,          │ │
│ │                    'typeName': 'Box<<T as                  │ │
│ │                    Config>::RuntimeCall>', 'docs': []},    │ │
│ │                    {'name': 'weight', 'type': 11,          │ │
│ │                    'typeName': 'Weight', 'docs': []}],     │ │
│ │                    'index': 5, 'docs': ['Dispatch a        │ │
│ │                    function call with a specified          │ │
│ │                    weight.', '', 'This function does not   │ │
│ │                    check the weight of the call, and       │ │
│ │                    instead allows the', 'Root origin to    │ │
│ │                    specify the weight of the call.', '',   │ │
│ │                    'The dispatch origin for this call must │ │
│ │                    be _Root_.']}]}}, 'docs': ['Contains a  │ │
│ │                    variant per dispatchable extrinsic that │ │
│ │                    this pallet has.']}}, {'id': 127,       │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'sequence': {'type': 123}},     │ │
│ │                    'docs': []}}, {'id': 128, 'type':       │ │
│ │                    {'path': ['node_subspace_runtime',      │ │
│ │                    'OriginCaller'], 'params': [], 'def':   │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'system', 'fields': [{'name': None,     │ │
│ │                    'type': 129, 'typeName':                │ │
│ │                    'frame_system::Origin<Runtime>',        │ │
│ │                    'docs': []}], 'index': 0, 'docs': []},  │ │
│ │                    {'name': 'Void', 'fields': [{'name':    │ │
│ │                    None, 'type': 100, 'typeName':          │ │
│ │                    'self::sp_api_hidden_includes_construc… │ │
│ │                    'docs': []}], 'index': 1, 'docs':       │ │
│ │                    []}]}}, 'docs': []}}, {'id': 129,       │ │
│ │                    'type': {'path': ['frame_support',      │ │
│ │                    'dispatch', 'RawOrigin'], 'params':     │ │
│ │                    [{'name': 'AccountId', 'type': 0}],     │ │
│ │                    'def': {'variant': {'variants':         │ │
│ │                    [{'name': 'Root', 'fields': [],         │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'Signed', 'fields': [{'name': None,     │ │
│ │                    'type': 0, 'typeName': 'AccountId',     │ │
│ │                    'docs': []}], 'index': 1, 'docs': []},  │ │
│ │                    {'name': 'None', 'fields': [], 'index': │ │
│ │                    2, 'docs': []}]}}, 'docs': []}}, {'id': │ │
│ │                    130, 'type': {'path':                   │ │
│ │                    ['pallet_subspace', 'pallet', 'Call'],  │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'variant': {'variants': │ │
│ │                    [{'name': 'add_stake', 'fields':        │ │
│ │                    [{'name': 'module_key', 'type': 0,      │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'u64', 'docs': []}],        │ │
│ │                    'index': 1, 'docs': []}, {'name':       │ │
│ │                    'remove_stake', 'fields': [{'name':     │ │
│ │                    'module_key', 'type': 0, 'typeName':    │ │
│ │                    'T::AccountId', 'docs': []}, {'name':   │ │
│ │                    'amount', 'type': 6, 'typeName': 'u64', │ │
│ │                    'docs': []}], 'index': 2, 'docs': []},  │ │
│ │                    {'name': 'add_stake_multiple',          │ │
│ │                    'fields': [{'name': 'module_keys',      │ │
│ │                    'type': 117, 'typeName':                │ │
│ │                    'Vec<T::AccountId>', 'docs': []},       │ │
│ │                    {'name': 'amounts', 'type': 131,        │ │
│ │                    'typeName': 'Vec<u64>', 'docs': []}],   │ │
│ │                    'index': 3, 'docs': []}, {'name':       │ │
│ │                    'remove_stake_multiple', 'fields':      │ │
│ │                    [{'name': 'module_keys', 'type': 117,   │ │
│ │                    'typeName': 'Vec<T::AccountId>',        │ │
│ │                    'docs': []}, {'name': 'amounts',        │ │
│ │                    'type': 131, 'typeName': 'Vec<u64>',    │ │
│ │                    'docs': []}], 'index': 4, 'docs': []},  │ │
│ │                    {'name': 'transfer_stake', 'fields':    │ │
│ │                    [{'name': 'module_key', 'type': 0,      │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'new_module_key', 'type': │ │
│ │                    0, 'typeName': 'T::AccountId', 'docs':  │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'u64', 'docs': []}],        │ │
│ │                    'index': 5, 'docs': []}, {'name':       │ │
│ │                    'transfer_multiple', 'fields':          │ │
│ │                    [{'name': 'destinations', 'type': 117,  │ │
│ │                    'typeName': 'Vec<T::AccountId>',        │ │
│ │                    'docs': []}, {'name': 'amounts',        │ │
│ │                    'type': 131, 'typeName': 'Vec<u64>',    │ │
│ │                    'docs': []}], 'index': 6, 'docs': []},  │ │
│ │                    {'name': 'register', 'fields':          │ │
│ │                    [{'name': 'network_name', 'type': 14,   │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []},     │ │
│ │                    {'name': 'name', 'type': 14,            │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []},     │ │
│ │                    {'name': 'address', 'type': 14,         │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []},     │ │
│ │                    {'name': 'module_key', 'type': 0,       │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'metadata', 'type': 132,  │ │
│ │                    'typeName': 'Option<Vec<u8>>', 'docs':  │ │
│ │                    []}], 'index': 7, 'docs': []}, {'name': │ │
│ │                    'deregister', 'fields': [{'name':       │ │
│ │                    'netuid', 'type': 46, 'typeName':       │ │
│ │                    'u16', 'docs': []}], 'index': 8,        │ │
│ │                    'docs': []}, {'name': 'update_module',  │ │
│ │                    'fields': [{'name': 'netuid', 'type':   │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'name', 'type': 14,            │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []},     │ │
│ │                    {'name': 'address', 'type': 14,         │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []},     │ │
│ │                    {'name': 'stake_delegation_fee',        │ │
│ │                    'type': 133, 'typeName':                │ │
│ │                    'Option<Percent>', 'docs': []},         │ │
│ │                    {'name': 'validator_weight_fee',        │ │
│ │                    'type': 133, 'typeName':                │ │
│ │                    'Option<Percent>', 'docs': []},         │ │
│ │                    {'name': 'metadata', 'type': 132,       │ │
│ │                    'typeName': 'Option<Vec<u8>>', 'docs':  │ │
│ │                    []}], 'index': 9, 'docs': []}, {'name': │ │
│ │                    'update_subnet', 'fields': [{'name':    │ │
│ │                    'netuid', 'type': 46, 'typeName':       │ │
│ │                    'u16', 'docs': []}, {'name': 'founder', │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': 'founder_share',  │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name': 'name', 'type': 134,      │ │
│ │                    'typeName': 'BoundedVec<u8,             │ │
│ │                    ConstU32<256>>', 'docs': []}, {'name':  │ │
│ │                    'metadata', 'type': 135, 'typeName':    │ │
│ │                    'Option<BoundedVec<u8,                  │ │
│ │                    ConstU32<120>>>', 'docs': []}, {'name': │ │
│ │                    'immunity_period', 'type': 46,          │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'incentive_ratio', 'type': 46, │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'max_allowed_uids', 'type':    │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'max_allowed_weights', 'type': │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'min_allowed_weights', 'type': │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'max_weight_age', 'type': 6,   │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'tempo', 'type': 46,           │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name':                                │ │
│ │                    'maximum_set_weight_calls_per_epoch',   │ │
│ │                    'type': 137, 'typeName': 'Option<u16>', │ │
│ │                    'docs': []}, {'name': 'vote_mode',      │ │
│ │                    'type': 50, 'typeName': 'VoteMode',     │ │
│ │                    'docs': []}, {'name': 'bonds_ma',       │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'module_burn_config',     │ │
│ │                    'type': 138, 'typeName':                │ │
│ │                    'GeneralBurnConfiguration<T>', 'docs':  │ │
│ │                    []}, {'name': 'min_validator_stake',    │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'max_allowed_validators', │ │
│ │                    'type': 137, 'typeName': 'Option<u16>', │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'use_weights_encryption', 'type': 9,    │ │
│ │                    'typeName': 'bool', 'docs': []},        │ │
│ │                    {'name': 'copier_margin', 'type': 139,  │ │
│ │                    'typeName': 'I64F64', 'docs': []},      │ │
│ │                    {'name': 'max_encryption_period',       │ │
│ │                    'type': 87, 'typeName': 'Option<u64>',  │ │
│ │                    'docs': []}], 'index': 10, 'docs': []}, │ │
│ │                    {'name': 'register_subnet', 'fields':   │ │
│ │                    [{'name': 'name', 'type': 14,           │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []},     │ │
│ │                    {'name': 'metadata', 'type': 132,       │ │
│ │                    'typeName': 'Option<Vec<u8>>', 'docs':  │ │
│ │                    []}], 'index': 12, 'docs': []}]}},      │ │
│ │                    'docs': ['Contains a variant per        │ │
│ │                    dispatchable extrinsic that this pallet │ │
│ │                    has.']}}, {'id': 131, 'type': {'path':  │ │
│ │                    [], 'params': [], 'def': {'sequence':   │ │
│ │                    {'type': 6}}, 'docs': []}}, {'id': 132, │ │
│ │                    'type': {'path': ['Option'], 'params':  │ │
│ │                    [{'name': 'T', 'type': 14}], 'def':     │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'None', 'fields': [], 'index': 0,       │ │
│ │                    'docs': []}, {'name': 'Some', 'fields': │ │
│ │                    [{'name': None, 'type': 14, 'typeName': │ │
│ │                    None, 'docs': []}], 'index': 1, 'docs': │ │
│ │                    []}]}}, 'docs': []}}, {'id': 133,       │ │
│ │                    'type': {'path': ['Option'], 'params':  │ │
│ │                    [{'name': 'T', 'type': 48}], 'def':     │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'None', 'fields': [], 'index': 0,       │ │
│ │                    'docs': []}, {'name': 'Some', 'fields': │ │
│ │                    [{'name': None, 'type': 48, 'typeName': │ │
│ │                    None, 'docs': []}], 'index': 1, 'docs': │ │
│ │                    []}]}}, 'docs': []}}, {'id': 134,       │ │
│ │                    'type': {'path':                        │ │
│ │                    ['bounded_collections', 'bounded_vec',  │ │
│ │                    'BoundedVec'], 'params': [{'name': 'T', │ │
│ │                    'type': 2}, {'name': 'S', 'type':       │ │
│ │                    None}], 'def': {'composite': {'fields': │ │
│ │                    [{'name': None, 'type': 14, 'typeName': │ │
│ │                    'Vec<T>', 'docs': []}]}}, 'docs': []}}, │ │
│ │                    {'id': 135, 'type': {'path':            │ │
│ │                    ['Option'], 'params': [{'name': 'T',    │ │
│ │                    'type': 136}], 'def': {'variant':       │ │
│ │                    {'variants': [{'name': 'None',          │ │
│ │                    'fields': [], 'index': 0, 'docs': []},  │ │
│ │                    {'name': 'Some', 'fields': [{'name':    │ │
│ │                    None, 'type': 136, 'typeName': None,    │ │
│ │                    'docs': []}], 'index': 1, 'docs':       │ │
│ │                    []}]}}, 'docs': []}}, {'id': 136,       │ │
│ │                    'type': {'path':                        │ │
│ │                    ['bounded_collections', 'bounded_vec',  │ │
│ │                    'BoundedVec'], 'params': [{'name': 'T', │ │
│ │                    'type': 2}, {'name': 'S', 'type':       │ │
│ │                    None}], 'def': {'composite': {'fields': │ │
│ │                    [{'name': None, 'type': 14, 'typeName': │ │
│ │                    'Vec<T>', 'docs': []}]}}, 'docs': []}}, │ │
│ │                    {'id': 137, 'type': {'path':            │ │
│ │                    ['Option'], 'params': [{'name': 'T',    │ │
│ │                    'type': 46}], 'def': {'variant':        │ │
│ │                    {'variants': [{'name': 'None',          │ │
│ │                    'fields': [], 'index': 0, 'docs': []},  │ │
│ │                    {'name': 'Some', 'fields': [{'name':    │ │
│ │                    None, 'type': 46, 'typeName': None,     │ │
│ │                    'docs': []}], 'index': 1, 'docs':       │ │
│ │                    []}]}}, 'docs': []}}, {'id': 138,       │ │
│ │                    'type': {'path': ['pallet_subspace',    │ │
│ │                    'params', 'burn',                       │ │
│ │                    'GeneralBurnConfiguration'], 'params':  │ │
│ │                    [{'name': 'T', 'type': None}], 'def':   │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'min_burn', 'type': 6, 'typeName':      │ │
│ │                    'u64', 'docs': []}, {'name':            │ │
│ │                    'max_burn', 'type': 6, 'typeName':      │ │
│ │                    'u64', 'docs': []}, {'name':            │ │
│ │                    'adjustment_alpha', 'type': 6,          │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name':                                │ │
│ │                    'target_registrations_interval',        │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name':                           │ │
│ │                    'target_registrations_per_interval',    │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name':                           │ │
│ │                    'max_registrations_per_interval',       │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}]}}, 'docs': []}}, {'id': 139,       │ │
│ │                    'type': {'path': ['substrate_fixed',    │ │
│ │                    'FixedI128'], 'params': [{'name':       │ │
│ │                    'Frac', 'type': 140}], 'def':           │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'bits', 'type': 150, 'typeName':        │ │
│ │                    'i128', 'docs': []}]}}, 'docs': []}},   │ │
│ │                    {'id': 140, 'type': {'path':            │ │
│ │                    ['typenum', 'uint', 'UInt'], 'params':  │ │
│ │                    [{'name': 'U', 'type': 141}, {'name':   │ │
│ │                    'B', 'type': 149}], 'def':              │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'msb', 'type': 141, 'typeName': 'U',    │ │
│ │                    'docs': []}, {'name': 'lsb', 'type':    │ │
│ │                    149, 'typeName': 'B', 'docs': []}]}},   │ │
│ │                    'docs': []}}, {'id': 141, 'type':       │ │
│ │                    {'path': ['typenum', 'uint', 'UInt'],   │ │
│ │                    'params': [{'name': 'U', 'type': 142},  │ │
│ │                    {'name': 'B', 'type': 149}], 'def':     │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'msb', 'type': 142, 'typeName': 'U',    │ │
│ │                    'docs': []}, {'name': 'lsb', 'type':    │ │
│ │                    149, 'typeName': 'B', 'docs': []}]}},   │ │
│ │                    'docs': []}}, {'id': 142, 'type':       │ │
│ │                    {'path': ['typenum', 'uint', 'UInt'],   │ │
│ │                    'params': [{'name': 'U', 'type': 143},  │ │
│ │                    {'name': 'B', 'type': 149}], 'def':     │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'msb', 'type': 143, 'typeName': 'U',    │ │
│ │                    'docs': []}, {'name': 'lsb', 'type':    │ │
│ │                    149, 'typeName': 'B', 'docs': []}]}},   │ │
│ │                    'docs': []}}, {'id': 143, 'type':       │ │
│ │                    {'path': ['typenum', 'uint', 'UInt'],   │ │
│ │                    'params': [{'name': 'U', 'type': 144},  │ │
│ │                    {'name': 'B', 'type': 149}], 'def':     │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'msb', 'type': 144, 'typeName': 'U',    │ │
│ │                    'docs': []}, {'name': 'lsb', 'type':    │ │
│ │                    149, 'typeName': 'B', 'docs': []}]}},   │ │
│ │                    'docs': []}}, {'id': 144, 'type':       │ │
│ │                    {'path': ['typenum', 'uint', 'UInt'],   │ │
│ │                    'params': [{'name': 'U', 'type': 145},  │ │
│ │                    {'name': 'B', 'type': 149}], 'def':     │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'msb', 'type': 145, 'typeName': 'U',    │ │
│ │                    'docs': []}, {'name': 'lsb', 'type':    │ │
│ │                    149, 'typeName': 'B', 'docs': []}]}},   │ │
│ │                    'docs': []}}, {'id': 145, 'type':       │ │
│ │                    {'path': ['typenum', 'uint', 'UInt'],   │ │
│ │                    'params': [{'name': 'U', 'type': 146},  │ │
│ │                    {'name': 'B', 'type': 149}], 'def':     │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'msb', 'type': 146, 'typeName': 'U',    │ │
│ │                    'docs': []}, {'name': 'lsb', 'type':    │ │
│ │                    149, 'typeName': 'B', 'docs': []}]}},   │ │
│ │                    'docs': []}}, {'id': 146, 'type':       │ │
│ │                    {'path': ['typenum', 'uint', 'UInt'],   │ │
│ │                    'params': [{'name': 'U', 'type': 147},  │ │
│ │                    {'name': 'B', 'type': 148}], 'def':     │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'msb', 'type': 147, 'typeName': 'U',    │ │
│ │                    'docs': []}, {'name': 'lsb', 'type':    │ │
│ │                    148, 'typeName': 'B', 'docs': []}]}},   │ │
│ │                    'docs': []}}, {'id': 147, 'type':       │ │
│ │                    {'path': ['typenum', 'uint', 'UTerm'],  │ │
│ │                    'params': [], 'def': {'composite':      │ │
│ │                    {'fields': []}}, 'docs': []}}, {'id':   │ │
│ │                    148, 'type': {'path': ['typenum',       │ │
│ │                    'bit', 'B1'], 'params': [], 'def':      │ │
│ │                    {'composite': {'fields': []}}, 'docs':  │ │
│ │                    []}}, {'id': 149, 'type': {'path':      │ │
│ │                    ['typenum', 'bit', 'B0'], 'params': [], │ │
│ │                    'def': {'composite': {'fields': []}},   │ │
│ │                    'docs': []}}, {'id': 150, 'type':       │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'primitive': 'i128'}, 'docs': []}},    │ │
│ │                    {'id': 151, 'type': {'path':            │ │
│ │                    ['pallet_governance', 'pallet',         │ │
│ │                    'Call'], 'params': [{'name': 'T',       │ │
│ │                    'type': None}], 'def': {'variant':      │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'add_global_params_proposal', 'fields': │ │
│ │                    [{'name': 'data', 'type': 14,           │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []},     │ │
│ │                    {'name': 'max_name_length', 'type': 46, │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'min_name_length', 'type': 46, │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'max_allowed_subnets', 'type': │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'max_allowed_modules', 'type': │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'max_registrations_per_block', │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name': 'max_allowed_weights',    │ │
│ │                    'type': 46, 'typeName': 'u16', 'docs':  │ │
│ │                    []}, {'name':                           │ │
│ │                    'floor_stake_delegation_fee', 'type':   │ │
│ │                    48, 'typeName': 'Percent', 'docs': []}, │ │
│ │                    {'name': 'floor_validator_weight_fee',  │ │
│ │                    'type': 48, 'typeName': 'Percent',      │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'floor_founder_share', 'type': 2,       │ │
│ │                    'typeName': 'u8', 'docs': []}, {'name': │ │
│ │                    'min_weight_stake', 'type': 6,          │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'curator', 'type': 0,          │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'proposal_cost', 'type':  │ │
│ │                    6, 'typeName': 'u64', 'docs': []},      │ │
│ │                    {'name': 'proposal_expiration', 'type': │ │
│ │                    4, 'typeName': 'u32', 'docs': []},      │ │
│ │                    {'name':                                │ │
│ │                    'general_subnet_application_cost',      │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'kappa', 'type': 46,      │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'rho', 'type': 46, 'typeName': │ │
│ │                    'u16', 'docs': []}, {'name':            │ │
│ │                    'subnet_immunity_period', 'type': 6,    │ │
│ │                    'typeName': 'u64', 'docs': []}],        │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'add_subnet_params_proposal', 'fields': │ │
│ │                    [{'name': 'netuid', 'type': 46,         │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'data', 'type': 14,            │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []},     │ │
│ │                    {'name': 'founder', 'type': 0,          │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}, {'name': 'founder_share', 'type':  │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'name', 'type': 134,           │ │
│ │                    'typeName': 'BoundedVec<u8,             │ │
│ │                    ConstU32<256>>', 'docs': []}, {'name':  │ │
│ │                    'metadata', 'type': 135, 'typeName':    │ │
│ │                    'Option<BoundedVec<u8,                  │ │
│ │                    ConstU32<120>>>', 'docs': []}, {'name': │ │
│ │                    'immunity_period', 'type': 46,          │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'incentive_ratio', 'type': 46, │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'max_allowed_uids', 'type':    │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'max_allowed_weights', 'type': │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'min_allowed_weights', 'type': │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'max_weight_age', 'type': 6,   │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'tempo', 'type': 46,           │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name':                                │ │
│ │                    'maximum_set_weight_calls_per_epoch',   │ │
│ │                    'type': 137, 'typeName': 'Option<u16>', │ │
│ │                    'docs': []}, {'name': 'vote_mode',      │ │
│ │                    'type': 50, 'typeName': 'VoteMode',     │ │
│ │                    'docs': []}, {'name': 'bonds_ma',       │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'module_burn_config',     │ │
│ │                    'type': 138, 'typeName':                │ │
│ │                    'GeneralBurnConfiguration<T>', 'docs':  │ │
│ │                    []}, {'name': 'min_validator_stake',    │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'max_allowed_validators', │ │
│ │                    'type': 137, 'typeName': 'Option<u16>', │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'use_weights_encryption', 'type': 9,    │ │
│ │                    'typeName': 'bool', 'docs': []},        │ │
│ │                    {'name': 'copier_margin', 'type': 139,  │ │
│ │                    'typeName': 'I64F64', 'docs': []},      │ │
│ │                    {'name': 'max_encryption_period',       │ │
│ │                    'type': 87, 'typeName': 'Option<u64>',  │ │
│ │                    'docs': []}], 'index': 1, 'docs': []},  │ │
│ │                    {'name': 'add_global_custom_proposal',  │ │
│ │                    'fields': [{'name': 'data', 'type': 14, │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []}],    │ │
│ │                    'index': 2, 'docs': []}, {'name':       │ │
│ │                    'add_subnet_custom_proposal', 'fields': │ │
│ │                    [{'name': 'netuid', 'type': 46,         │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'data', 'type': 14,            │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []}],    │ │
│ │                    'index': 3, 'docs': []}, {'name':       │ │
│ │                    'add_transfer_dao_treasury_proposal',   │ │
│ │                    'fields': [{'name': 'data', 'type': 14, │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []},     │ │
│ │                    {'name': 'value', 'type': 6,            │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'dest', 'type': 0, 'typeName': │ │
│ │                    'T::AccountId', 'docs': []}], 'index':  │ │
│ │                    4, 'docs': []}, {'name':                │ │
│ │                    'vote_proposal', 'fields': [{'name':    │ │
│ │                    'proposal_id', 'type': 6, 'typeName':   │ │
│ │                    'u64', 'docs': []}, {'name': 'agree',   │ │
│ │                    'type': 9, 'typeName': 'bool', 'docs':  │ │
│ │                    []}], 'index': 5, 'docs': []}, {'name': │ │
│ │                    'remove_vote_proposal', 'fields':       │ │
│ │                    [{'name': 'proposal_id', 'type': 6,     │ │
│ │                    'typeName': 'u64', 'docs': []}],        │ │
│ │                    'index': 6, 'docs': []}, {'name':       │ │
│ │                    'enable_vote_power_delegation',         │ │
│ │                    'fields': [], 'index': 7, 'docs': []},  │ │
│ │                    {'name':                                │ │
│ │                    'disable_vote_power_delegation',        │ │
│ │                    'fields': [], 'index': 8, 'docs': []},  │ │
│ │                    {'name': 'add_dao_application',         │ │
│ │                    'fields': [{'name': 'application_key',  │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': 'data', 'type':   │ │
│ │                    14, 'typeName': 'Vec<u8>', 'docs':      │ │
│ │                    []}], 'index': 9, 'docs': []}, {'name': │ │
│ │                    'refuse_dao_application', 'fields':     │ │
│ │                    [{'name': 'id', 'type': 6, 'typeName':  │ │
│ │                    'u64', 'docs': []}], 'index': 10,       │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'add_to_whitelist', 'fields': [{'name': │ │
│ │                    'module_key', 'type': 0, 'typeName':    │ │
│ │                    'T::AccountId', 'docs': []}], 'index':  │ │
│ │                    11, 'docs': []}, {'name':               │ │
│ │                    'remove_from_whitelist', 'fields':      │ │
│ │                    [{'name': 'module_key', 'type': 0,      │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}], 'index': 12, 'docs': []}]}},      │ │
│ │                    'docs': ['Contains a variant per        │ │
│ │                    dispatchable extrinsic that this pallet │ │
│ │                    has.']}}, {'id': 152, 'type': {'path':  │ │
│ │                    ['pallet_subnet_emission', 'pallet',    │ │
│ │                    'Call'], 'params': [{'name': 'T',       │ │
│ │                    'type': None}], 'def': {'variant':      │ │
│ │                    {'variants': [{'name': 'set_weights',   │ │
│ │                    'fields': [{'name': 'netuid', 'type':   │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'uids', 'type': 153,           │ │
│ │                    'typeName': 'Vec<u16>', 'docs': []},    │ │
│ │                    {'name': 'weights', 'type': 153,        │ │
│ │                    'typeName': 'Vec<u16>', 'docs': []}],   │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'set_weights_encrypted', 'fields':      │ │
│ │                    [{'name': 'netuid', 'type': 46,         │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'encrypted_weights', 'type':   │ │
│ │                    14, 'typeName': 'Vec<u8>', 'docs': []}, │ │
│ │                    {'name': 'decrypted_weights_hash',      │ │
│ │                    'type': 14, 'typeName': 'Vec<u8>',      │ │
│ │                    'docs': []}], 'index': 1, 'docs': []},  │ │
│ │                    {'name': 'delegate_weight_control',     │ │
│ │                    'fields': [{'name': 'netuid', 'type':   │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'target', 'type': 0,           │ │
│ │                    'typeName': 'T::AccountId', 'docs':     │ │
│ │                    []}], 'index': 2, 'docs': []}, {'name': │ │
│ │                    'remove_weight_control', 'fields':      │ │
│ │                    [{'name': 'netuid', 'type': 46,         │ │
│ │                    'typeName': 'u16', 'docs': []}],        │ │
│ │                    'index': 3, 'docs': []}]}}, 'docs':     │ │
│ │                    ['Contains a variant per dispatchable   │ │
│ │                    extrinsic that this pallet has.']}},    │ │
│ │                    {'id': 153, 'type': {'path': [],        │ │
│ │                    'params': [], 'def': {'sequence':       │ │
│ │                    {'type': 46}}, 'docs': []}}, {'id':     │ │
│ │                    154, 'type': {'path':                   │ │
│ │                    ['pallet_offworker', 'pallet', 'Call'], │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'variant': {'variants': │ │
│ │                    [{'name': 'send_decrypted_weights',     │ │
│ │                    'fields': [{'name': 'payload', 'type':  │ │
│ │                    155, 'typeName':                        │ │
│ │                    'DecryptedWeightsPayload<T::Public,     │ │
│ │                    BlockNumberFor<T>>', 'docs': []},       │ │
│ │                    {'name': 'signature', 'type': 164,      │ │
│ │                    'typeName': 'T::Signature', 'docs':     │ │
│ │                    []}], 'index': 0, 'docs': []}, {'name': │ │
│ │                    'send_ping', 'fields': [{'name':        │ │
│ │                    'payload', 'type': 166, 'typeName':     │ │
│ │                    'KeepAlivePayload<T::Public,            │ │
│ │                    BlockNumberFor<T>>', 'docs': []},       │ │
│ │                    {'name': 'signature', 'type': 164,      │ │
│ │                    'typeName': 'T::Signature', 'docs':     │ │
│ │                    []}], 'index': 1, 'docs': []}, {'name': │ │
│ │                    'add_authorities', 'fields': [{'name':  │ │
│ │                    'new_authorities', 'type': 167,         │ │
│ │                    'typeName': 'Vec<(T::AccountId,         │ │
│ │                    PublicKey)>', 'docs': []}], 'index': 2, │ │
│ │                    'docs': []}]}}, 'docs': ['Contains a    │ │
│ │                    variant per dispatchable extrinsic that │ │
│ │                    this pallet has.']}}, {'id': 155,       │ │
│ │                    'type': {'path': ['pallet_offworker',   │ │
│ │                    'types', 'DecryptedWeightsPayload'],    │ │
│ │                    'params': [{'name': 'Public', 'type':   │ │
│ │                    156}, {'name': 'BlockNumber', 'type':   │ │
│ │                    6}], 'def': {'composite': {'fields':    │ │
│ │                    [{'name': 'subnet_id', 'type': 46,      │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'decrypted_weights', 'type':   │ │
│ │                    158, 'typeName': 'Vec<BlockWeights>',   │ │
│ │                    'docs': []}, {'name': 'delta', 'type':  │ │
│ │                    139, 'typeName': 'I64F64', 'docs': []}, │ │
│ │                    {'name': 'block_number', 'type': 6,     │ │
│ │                    'typeName': 'BlockNumber', 'docs': []}, │ │
│ │                    {'name': 'public', 'type': 156,         │ │
│ │                    'typeName': 'Public', 'docs': []},      │ │
│ │                    {'name': 'forced_send_by_rotation',     │ │
│ │                    'type': 9, 'typeName': 'bool', 'docs':  │ │
│ │                    []}]}}, 'docs': []}}, {'id': 156,       │ │
│ │                    'type': {'path': ['sp_runtime',         │ │
│ │                    'MultiSigner'], 'params': [], 'def':    │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'Ed25519', 'fields': [{'name': None,    │ │
│ │                    'type': 1, 'typeName':                  │ │
│ │                    'ed25519::Public', 'docs': []}],        │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'Sr25519', 'fields': [{'name': None,    │ │
│ │                    'type': 1, 'typeName':                  │ │
│ │                    'sr25519::Public', 'docs': []}],        │ │
│ │                    'index': 1, 'docs': []}, {'name':       │ │
│ │                    'Ecdsa', 'fields': [{'name': None,      │ │
│ │                    'type': 157, 'typeName':                │ │
│ │                    'ecdsa::Public', 'docs': []}], 'index': │ │
│ │                    2, 'docs': []}]}}, 'docs': []}}, {'id': │ │
│ │                    157, 'type': {'path': [], 'params': [], │ │
│ │                    'def': {'array': {'len': 33, 'type':    │ │
│ │                    2}}, 'docs': []}}, {'id': 158, 'type':  │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'sequence': {'type': 159}}, 'docs':    │ │
│ │                    []}}, {'id': 159, 'type': {'path': [],  │ │
│ │                    'params': [], 'def': {'tuple': [6,      │ │
│ │                    160]}, 'docs': []}}, {'id': 160,        │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'sequence': {'type': 161}},     │ │
│ │                    'docs': []}}, {'id': 161, 'type':       │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'tuple': [46, 162, 14]}, 'docs': []}}, │ │
│ │                    {'id': 162, 'type': {'path': [],        │ │
│ │                    'params': [], 'def': {'sequence':       │ │
│ │                    {'type': 163}}, 'docs': []}}, {'id':    │ │
│ │                    163, 'type': {'path': [], 'params': [], │ │
│ │                    'def': {'tuple': [46, 46]}, 'docs':     │ │
│ │                    []}}, {'id': 164, 'type': {'path':      │ │
│ │                    ['sp_runtime', 'MultiSignature'],       │ │
│ │                    'params': [], 'def': {'variant':        │ │
│ │                    {'variants': [{'name': 'Ed25519',       │ │
│ │                    'fields': [{'name': None, 'type': 95,   │ │
│ │                    'typeName': 'ed25519::Signature',       │ │
│ │                    'docs': []}], 'index': 0, 'docs': []},  │ │
│ │                    {'name': 'Sr25519', 'fields': [{'name': │ │
│ │                    None, 'type': 95, 'typeName':           │ │
│ │                    'sr25519::Signature', 'docs': []}],     │ │
│ │                    'index': 1, 'docs': []}, {'name':       │ │
│ │                    'Ecdsa', 'fields': [{'name': None,      │ │
│ │                    'type': 165, 'typeName':                │ │
│ │                    'ecdsa::Signature', 'docs': []}],       │ │
│ │                    'index': 2, 'docs': []}]}}, 'docs':     │ │
│ │                    []}}, {'id': 165, 'type': {'path': [],  │ │
│ │                    'params': [], 'def': {'array': {'len':  │ │
│ │                    65, 'type': 2}}, 'docs': []}}, {'id':   │ │
│ │                    166, 'type': {'path':                   │ │
│ │                    ['pallet_offworker', 'types',           │ │
│ │                    'KeepAlivePayload'], 'params':          │ │
│ │                    [{'name': 'Public', 'type': 156},       │ │
│ │                    {'name': 'BlockNumber', 'type': 6}],    │ │
│ │                    'def': {'composite': {'fields':         │ │
│ │                    [{'name': 'public_key', 'type': 64,     │ │
│ │                    'typeName': '(Vec<u8>, Vec<u8>)',       │ │
│ │                    'docs': []}, {'name': 'block_number',   │ │
│ │                    'type': 6, 'typeName': 'BlockNumber',   │ │
│ │                    'docs': []}, {'name': 'public', 'type': │ │
│ │                    156, 'typeName': 'Public', 'docs':      │ │
│ │                    []}]}}, 'docs': []}}, {'id': 167,       │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'sequence': {'type': 168}},     │ │
│ │                    'docs': []}}, {'id': 168, 'type':       │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'tuple': [0, 64]}, 'docs': []}},       │ │
│ │                    {'id': 169, 'type': {'path':            │ │
│ │                    ['pallet_sudo', 'pallet', 'Error'],     │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'variant': {'variants': │ │
│ │                    [{'name': 'RequireSudo', 'fields': [],  │ │
│ │                    'index': 0, 'docs': ['Sender must be    │ │
│ │                    the Sudo account.']}]}}, 'docs':        │ │
│ │                    ['Error for the Sudo pallet.']}},       │ │
│ │                    {'id': 170, 'type': {'path': [],        │ │
│ │                    'params': [], 'def': {'tuple': [0, 1]}, │ │
│ │                    'docs': []}}, {'id': 171, 'type':       │ │
│ │                    {'path': ['pallet_multisig',            │ │
│ │                    'Multisig'], 'params': [{'name':        │ │
│ │                    'BlockNumber', 'type': 6}, {'name':     │ │
│ │                    'Balance', 'type': 6}, {'name':         │ │
│ │                    'AccountId', 'type': 0}, {'name':       │ │
│ │                    'MaxApprovals', 'type': None}], 'def':  │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'when', 'type': 43, 'typeName':         │ │
│ │                    'Timepoint<BlockNumber>', 'docs': []},  │ │
│ │                    {'name': 'deposit', 'type': 6,          │ │
│ │                    'typeName': 'Balance', 'docs': []},     │ │
│ │                    {'name': 'depositor', 'type': 0,        │ │
│ │                    'typeName': 'AccountId', 'docs': []},   │ │
│ │                    {'name': 'approvals', 'type': 172,      │ │
│ │                    'typeName': 'BoundedVec<AccountId,      │ │
│ │                    MaxApprovals>', 'docs': []}]}}, 'docs': │ │
│ │                    []}}, {'id': 172, 'type': {'path':      │ │
│ │                    ['bounded_collections', 'bounded_vec',  │ │
│ │                    'BoundedVec'], 'params': [{'name': 'T', │ │
│ │                    'type': 0}, {'name': 'S', 'type':       │ │
│ │                    None}], 'def': {'composite': {'fields': │ │
│ │                    [{'name': None, 'type': 117,            │ │
│ │                    'typeName': 'Vec<T>', 'docs': []}]}},   │ │
│ │                    'docs': []}}, {'id': 173, 'type':       │ │
│ │                    {'path': ['pallet_multisig', 'pallet',  │ │
│ │                    'Error'], 'params': [{'name': 'T',      │ │
│ │                    'type': None}], 'def': {'variant':      │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'MinimumThreshold', 'fields': [],       │ │
│ │                    'index': 0, 'docs': ['Threshold must be │ │
│ │                    2 or greater.']}, {'name':              │ │
│ │                    'AlreadyApproved', 'fields': [],        │ │
│ │                    'index': 1, 'docs': ['Call is already   │ │
│ │                    approved by this signatory.']},         │ │
│ │                    {'name': 'NoApprovalsNeeded', 'fields': │ │
│ │                    [], 'index': 2, 'docs': ["Call doesn't  │ │
│ │                    need any (more) approvals."]}, {'name': │ │
│ │                    'TooFewSignatories', 'fields': [],      │ │
│ │                    'index': 3, 'docs': ['There are too few │ │
│ │                    signatories in the list.']}, {'name':   │ │
│ │                    'TooManySignatories', 'fields': [],     │ │
│ │                    'index': 4, 'docs': ['There are too     │ │
│ │                    many signatories in the list.']},       │ │
│ │                    {'name': 'SignatoriesOutOfOrder',       │ │
│ │                    'fields': [], 'index': 5, 'docs': ['The │ │
│ │                    signatories were provided out of order; │ │
│ │                    they should be ordered.']}, {'name':    │ │
│ │                    'SenderInSignatories', 'fields': [],    │ │
│ │                    'index': 6, 'docs': ["The sender was    │ │
│ │                    contained in the other signatories; it  │ │
│ │                    shouldn't be."]}, {'name': 'NotFound',  │ │
│ │                    'fields': [], 'index': 7, 'docs':       │ │
│ │                    ['Multisig operation not found when     │ │
│ │                    attempting to cancel.']}, {'name':      │ │
│ │                    'NotOwner', 'fields': [], 'index': 8,   │ │
│ │                    'docs': ['Only the account that         │ │
│ │                    originally created the multisig is able │ │
│ │                    to cancel it.']}, {'name':              │ │
│ │                    'NoTimepoint', 'fields': [], 'index':   │ │
│ │                    9, 'docs': ['No timepoint was given,    │ │
│ │                    yet the multisig operation is already   │ │
│ │                    underway.']}, {'name':                  │ │
│ │                    'WrongTimepoint', 'fields': [],         │ │
│ │                    'index': 10, 'docs': ['A different      │ │
│ │                    timepoint was given to the multisig     │ │
│ │                    operation that is underway.']},         │ │
│ │                    {'name': 'UnexpectedTimepoint',         │ │
│ │                    'fields': [], 'index': 11, 'docs': ['A  │ │
│ │                    timepoint was given, yet no multisig    │ │
│ │                    operation is underway.']}, {'name':     │ │
│ │                    'MaxWeightTooLow', 'fields': [],        │ │
│ │                    'index': 12, 'docs': ['The maximum      │ │
│ │                    weight information provided was too     │ │
│ │                    low.']}, {'name': 'AlreadyStored',      │ │
│ │                    'fields': [], 'index': 13, 'docs':      │ │
│ │                    ['The data to be stored is already      │ │
│ │                    stored.']}]}}, 'docs': ['The `Error`    │ │
│ │                    enum of this pallet.']}}, {'id': 174,   │ │
│ │                    'type': {'path': ['pallet_utility',     │ │
│ │                    'pallet', 'Error'], 'params': [{'name': │ │
│ │                    'T', 'type': None}], 'def': {'variant': │ │
│ │                    {'variants': [{'name': 'TooManyCalls',  │ │
│ │                    'fields': [], 'index': 0, 'docs': ['Too │ │
│ │                    many calls batched.']}]}}, 'docs':      │ │
│ │                    ['The `Error` enum of this pallet.']}}, │ │
│ │                    {'id': 175, 'type': {'path': [],        │ │
│ │                    'params': [], 'def': {'sequence':       │ │
│ │                    {'type': 9}}, 'docs': []}}, {'id': 176, │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'tuple': [46, 0]}, 'docs':      │ │
│ │                    []}}, {'id': 177, 'type': {'path': [],  │ │
│ │                    'params': [], 'def': {'tuple': [0, 0]}, │ │
│ │                    'docs': []}}, {'id': 178, 'type':       │ │
│ │                    {'path': ['BTreeSet'], 'params':        │ │
│ │                    [{'name': 'T', 'type': 46}], 'def':     │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 153, 'typeName': None,    │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    179, 'type': {'path':                   │ │
│ │                    ['pallet_subspace', 'pallet',           │ │
│ │                    'MinimumFees'], 'params': [], 'def':    │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'stake_delegation_fee', 'type': 48,     │ │
│ │                    'typeName': 'Percent', 'docs': []},     │ │
│ │                    {'name': 'validator_weight_fee',        │ │
│ │                    'type': 48, 'typeName': 'Percent',      │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    180, 'type': {'path':                   │ │
│ │                    ['pallet_subspace', 'pallet',           │ │
│ │                    'ValidatorFees'], 'params': [], 'def':  │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'stake_delegation_fee', 'type': 48,     │ │
│ │                    'typeName': 'Percent', 'docs': []},     │ │
│ │                    {'name': 'validator_weight_fee',        │ │
│ │                    'type': 48, 'typeName': 'Percent',      │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    181, 'type': {'path': ['frame_support', │ │
│ │                    'PalletId'], 'params': [], 'def':       │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 77, 'typeName': '[u8;     │ │
│ │                    8]', 'docs': []}]}}, 'docs': []}},      │ │
│ │                    {'id': 182, 'type': {'path':            │ │
│ │                    ['pallet_subspace', 'pallet', 'Error'], │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'variant': {'variants': │ │
│ │                    [{'name': 'NetworkDoesNotExist',        │ │
│ │                    'fields': [], 'index': 0, 'docs': ['The │ │
│ │                    specified network does not exist.']},   │ │
│ │                    {'name': 'ModuleDoesNotExist',          │ │
│ │                    'fields': [], 'index': 1, 'docs': ['The │ │
│ │                    specified module does not exist.']},    │ │
│ │                    {'name': 'NetworkIsImmuned', 'fields':  │ │
│ │                    [], 'index': 2, 'docs': ['The network   │ │
│ │                    is immune to changes.']}, {'name':      │ │
│ │                    'NotEnoughBalanceToRegisterSubnet',     │ │
│ │                    'fields': [], 'index': 3, 'docs':       │ │
│ │                    ['Insufficient balance to register a    │ │
│ │                    subnet.']}, {'name':                    │ │
│ │                    'NotEnoughStakeToWithdraw', 'fields':   │ │
│ │                    [], 'index': 4, 'docs': ['Insufficient  │ │
│ │                    stake to withdraw the requested         │ │
│ │                    amount.']}, {'name':                    │ │
│ │                    'NotEnoughBalanceToStake', 'fields':    │ │
│ │                    [], 'index': 5, 'docs': ['Insufficient  │ │
│ │                    balance in the cold key account to      │ │
│ │                    stake the requested amount.']},         │ │
│ │                    {'name': 'WeightVecNotEqualSize',       │ │
│ │                    'fields': [], 'index': 6, 'docs': ['The │ │
│ │                    weight vectors for keys and values have │ │
│ │                    different sizes.']}, {'name':           │ │
│ │                    'DuplicateUids', 'fields': [], 'index': │ │
│ │                    7, 'docs': ['Duplicate UIDs detected in │ │
│ │                    the weight matrix.']}, {'name':         │ │
│ │                    'InvalidUid', 'fields': [], 'index': 8, │ │
│ │                    'docs': ['At least one UID in the       │ │
│ │                    weight matrix does not exist in the     │ │
│ │                    metagraph.']}, {'name':                 │ │
│ │                    'InvalidUidsLength', 'fields': [],      │ │
│ │                    'index': 9, 'docs': ['The number of     │ │
│ │                    UIDs in the weight matrix is different  │ │
│ │                    from the allowed amount.']}, {'name':   │ │
│ │                    'TooManyRegistrationsPerBlock',         │ │
│ │                    'fields': [], 'index': 10, 'docs':      │ │
│ │                    ['The number of registrations in this   │ │
│ │                    block exceeds the allowed limit.']},    │ │
│ │                    {'name':                                │ │
│ │                    'TooManyRegistrationsPerInterval',      │ │
│ │                    'fields': [], 'index': 11, 'docs':      │ │
│ │                    ['The number of registrations in this   │ │
│ │                    interval exceeds the allowed limit.']}, │ │
│ │                    {'name':                                │ │
│ │                    'TooManySubnetRegistrationsPerInterval… │ │
│ │                    'fields': [], 'index': 12, 'docs':      │ │
│ │                    ['The number of subnet registrations in │ │
│ │                    this interval exceeds the allowed       │ │
│ │                    limit.']}, {'name':                     │ │
│ │                    'AlreadyRegistered', 'fields': [],      │ │
│ │                    'index': 13, 'docs': ['The module is    │ │
│ │                    already registered in the active        │ │
│ │                    set.']}, {'name':                       │ │
│ │                    'CouldNotConvertToBalance', 'fields':   │ │
│ │                    [], 'index': 14, 'docs': ['Failed to    │ │
│ │                    convert between u64 and T::Balance.']}, │ │
│ │                    {'name': 'InvalidTempo', 'fields': [],  │ │
│ │                    'index': 15, 'docs': ['The specified    │ │
│ │                    tempo (epoch) is not valid.']},         │ │
│ │                    {'name': 'SettingWeightsTooFast',       │ │
│ │                    'fields': [], 'index': 16, 'docs':      │ │
│ │                    ['Attempted to set weights twice within │ │
│ │                    net_epoch/2 blocks.']}, {'name':        │ │
│ │                    'InvalidMaxAllowedUids', 'fields': [],  │ │
│ │                    'index': 17, 'docs': ['Attempted to set │ │
│ │                    max allowed UIDs to a value less than   │ │
│ │                    the current number of registered',      │ │
│ │                    'UIDs.']}, {'name':                     │ │
│ │                    'NetuidDoesNotExist', 'fields': [],     │ │
│ │                    'index': 18, 'docs': ['The specified    │ │
│ │                    netuid does not exist.']}, {'name':     │ │
│ │                    'SubnetNameAlreadyExists', 'fields':    │ │
│ │                    [], 'index': 19, 'docs': ['A subnet     │ │
│ │                    with the given name already exists.']}, │ │
│ │                    {'name': 'SubnetNameTooShort',          │ │
│ │                    'fields': [], 'index': 20, 'docs':      │ │
│ │                    ['The subnet name is too short.']},     │ │
│ │                    {'name': 'SubnetNameTooLong', 'fields': │ │
│ │                    [], 'index': 21, 'docs': ['The subnet   │ │
│ │                    name is too long.']}, {'name':          │ │
│ │                    'InvalidSubnetName', 'fields': [],      │ │
│ │                    'index': 22, 'docs': ['The subnet name  │ │
│ │                    contains invalid characters.']},        │ │
│ │                    {'name': 'BalanceNotAdded', 'fields':   │ │
│ │                    [], 'index': 23, 'docs': ['Failed to    │ │
│ │                    add balance to the account.']},         │ │
│ │                    {'name': 'StakeNotRemoved', 'fields':   │ │
│ │                    [], 'index': 24, 'docs': ['Failed to    │ │
│ │                    remove stake from the account.']},      │ │
│ │                    {'name': 'KeyAlreadyRegistered',        │ │
│ │                    'fields': [], 'index': 25, 'docs':      │ │
│ │                    ['The key is already registered.']},    │ │
│ │                    {'name': 'EmptyKeys', 'fields': [],     │ │
│ │                    'index': 26, 'docs': ['No keys provided │ │
│ │                    (empty key set).']}, {'name':           │ │
│ │                    'TooManyKeys', 'fields': [], 'index':   │ │
│ │                    27, 'docs': ['Too many keys             │ │
│ │                    provided.']}, {'name': 'InvalidShares', │ │
│ │                    'fields': [], 'index': 28, 'docs':      │ │
│ │                    ['Invalid shares distribution.']},      │ │
│ │                    {'name': 'NotFounder', 'fields': [],    │ │
│ │                    'index': 29, 'docs': ['The caller is    │ │
│ │                    not the founder of the subnet.']},      │ │
│ │                    {'name': 'NotEnoughStakeToSetWeights',  │ │
│ │                    'fields': [], 'index': 30, 'docs':      │ │
│ │                    ['Insufficient stake to set             │ │
│ │                    weights.']}, {'name':                   │ │
│ │                    'NotEnoughStakeToStartNetwork',         │ │
│ │                    'fields': [], 'index': 31, 'docs':      │ │
│ │                    ['Insufficient stake to start a         │ │
│ │                    network.']}, {'name':                   │ │
│ │                    'NotEnoughStakePerWeight', 'fields':    │ │
│ │                    [], 'index': 32, 'docs': ['Insufficient │ │
│ │                    stake per weight.']}, {'name':          │ │
│ │                    'NoSelfWeight', 'fields': [], 'index':  │ │
│ │                    33, 'docs': ['No self-weight            │ │
│ │                    provided.']}, {'name':                  │ │
│ │                    'DifferentLengths', 'fields': [],       │ │
│ │                    'index': 34, 'docs': ['Vectors have     │ │
│ │                    different lengths.']}, {'name':         │ │
│ │                    'NotEnoughBalanceToRegister', 'fields': │ │
│ │                    [], 'index': 35, 'docs': ['Insufficient │ │
│ │                    balance to register.']}, {'name':       │ │
│ │                    'StakeNotAdded', 'fields': [], 'index': │ │
│ │                    36, 'docs': ['Failed to add stake to    │ │
│ │                    the account.']}, {'name':               │ │
│ │                    'BalanceNotRemoved', 'fields': [],      │ │
│ │                    'index': 37, 'docs': ['Failed to remove │ │
│ │                    balance from the account.']}, {'name':  │ │
│ │                    'BalanceCouldNotBeRemoved', 'fields':   │ │
│ │                    [], 'index': 38, 'docs': ['Balance      │ │
│ │                    could not be removed from the           │ │
│ │                    account.']}, {'name':                   │ │
│ │                    'NotEnoughStakeToRegister', 'fields':   │ │
│ │                    [], 'index': 39, 'docs': ['Insufficient │ │
│ │                    stake to register.']}, {'name':         │ │
│ │                    'StillRegistered', 'fields': [],        │ │
│ │                    'index': 40, 'docs': ['The entity is    │ │
│ │                    still registered and cannot be          │ │
│ │                    modified.']}, {'name':                  │ │
│ │                    'MaxAllowedModules', 'fields': [],      │ │
│ │                    'index': 41, 'docs': ['Attempted to set │ │
│ │                    max allowed modules to a value less     │ │
│ │                    than the current number of',            │ │
│ │                    'registered modules.']}, {'name':       │ │
│ │                    'NotEnoughBalanceToTransfer', 'fields': │ │
│ │                    [], 'index': 42, 'docs': ['Insufficient │ │
│ │                    balance to transfer.']}, {'name':       │ │
│ │                    'NotVoteMode', 'fields': [], 'index':   │ │
│ │                    43, 'docs': ['The system is not in vote │ │
│ │                    mode.']}, {'name': 'InvalidTrustRatio', │ │
│ │                    'fields': [], 'index': 44, 'docs':      │ │
│ │                    ['The trust ratio is invalid.']},       │ │
│ │                    {'name': 'InvalidMinAllowedWeights',    │ │
│ │                    'fields': [], 'index': 45, 'docs':      │ │
│ │                    ['The minimum allowed weights value is  │ │
│ │                    invalid.']}, {'name':                   │ │
│ │                    'InvalidMaxAllowedWeights', 'fields':   │ │
│ │                    [], 'index': 46, 'docs': ['The maximum  │ │
│ │                    allowed weights value is invalid.']},   │ │
│ │                    {'name': 'InvalidMinDelegationFee',     │ │
│ │                    'fields': [], 'index': 47, 'docs':      │ │
│ │                    ['The minimum delegation fee is         │ │
│ │                    invalid.']}, {'name':                   │ │
│ │                    'InvalidModuleMetadata', 'fields': [],  │ │
│ │                    'index': 48, 'docs': ['The module       │ │
│ │                    metadata is invalid.']}, {'name':       │ │
│ │                    'ModuleMetadataTooLong', 'fields': [],  │ │
│ │                    'index': 49, 'docs': ['The module       │ │
│ │                    metadata is too long.']}, {'name':      │ │
│ │                    'InvalidSubnetMetadata', 'fields': [],  │ │
│ │                    'index': 50, 'docs': ['The module       │ │
│ │                    metadata is invalid.']}, {'name':       │ │
│ │                    'SubnetMetadataTooLong', 'fields': [],  │ │
│ │                    'index': 51, 'docs': ['The module       │ │
│ │                    metadata is too long.']}, {'name':      │ │
│ │                    'InvalidMaxNameLength', 'fields': [],   │ │
│ │                    'index': 52, 'docs': ['The maximum name │ │
│ │                    length is invalid.']}, {'name':         │ │
│ │                    'InvalidMinNameLenght', 'fields': [],   │ │
│ │                    'index': 53, 'docs': ['The minimum name │ │
│ │                    length is invalid.']}, {'name':         │ │
│ │                    'InvalidMaxAllowedSubnets', 'fields':   │ │
│ │                    [], 'index': 54, 'docs': ['The maximum  │ │
│ │                    allowed subnets value is invalid.']},   │ │
│ │                    {'name': 'InvalidMaxAllowedModules',    │ │
│ │                    'fields': [], 'index': 55, 'docs':      │ │
│ │                    ['The maximum allowed modules value is  │ │
│ │                    invalid.']}, {'name':                   │ │
│ │                    'InvalidMaxRegistrationsPerBlock',      │ │
│ │                    'fields': [], 'index': 56, 'docs':      │ │
│ │                    ['The maximum registrations per block   │ │
│ │                    value is invalid.']}, {'name':          │ │
│ │                    'InvalidMinBurn', 'fields': [],         │ │
│ │                    'index': 57, 'docs': ['The minimum burn │ │
│ │                    value is invalid, likely too small.']}, │ │
│ │                    {'name': 'InvalidMaxBurn', 'fields':    │ │
│ │                    [], 'index': 58, 'docs': ['The maximum  │ │
│ │                    burn value is invalid.']}, {'name':     │ │
│ │                    'ModuleNameTooLong', 'fields': [],      │ │
│ │                    'index': 59, 'docs': ['The module name  │ │
│ │                    is too long.']}, {'name':               │ │
│ │                    'ModuleNameTooShort', 'fields': [],     │ │
│ │                    'index': 60, 'docs': ['The module name  │ │
│ │                    is too short.']}, {'name':              │ │
│ │                    'InvalidModuleName', 'fields': [],      │ │
│ │                    'index': 61, 'docs': ['The module name  │ │
│ │                    is invalid. It must be a UTF-8 encoded  │ │
│ │                    string.']}, {'name':                    │ │
│ │                    'ModuleAddressTooLong', 'fields': [],   │ │
│ │                    'index': 62, 'docs': ['The module       │ │
│ │                    address is too long.']}, {'name':       │ │
│ │                    'InvalidModuleAddress', 'fields': [],   │ │
│ │                    'index': 63, 'docs': ['The module       │ │
│ │                    address is invalid.']}, {'name':        │ │
│ │                    'ModuleNameAlreadyExists', 'fields':    │ │
│ │                    [], 'index': 64, 'docs': ['A module     │ │
│ │                    with this name already exists in the    │ │
│ │                    subnet.']}, {'name':                    │ │
│ │                    'InvalidFounderShare', 'fields': [],    │ │
│ │                    'index': 65, 'docs': ['The founder      │ │
│ │                    share is invalid.']}, {'name':          │ │
│ │                    'InvalidIncentiveRatio', 'fields': [],  │ │
│ │                    'index': 66, 'docs': ['The incentive    │ │
│ │                    ratio is invalid.']}, {'name':          │ │
│ │                    'InvalidGeneralSubnetApplicationCost',  │ │
│ │                    'fields': [], 'index': 67, 'docs':      │ │
│ │                    ['The general subnet application cost   │ │
│ │                    is invalid.']}, {'name':                │ │
│ │                    'InvalidProposalExpiration', 'fields':  │ │
│ │                    [], 'index': 68, 'docs': ['The proposal │ │
│ │                    expiration is invalid.']}, {'name':     │ │
│ │                    'InvalidMaxWeightAge', 'fields': [],    │ │
│ │                    'index': 69, 'docs': ['The maximum      │ │
│ │                    weight age is invalid.']}, {'name':     │ │
│ │                    'MaxSetWeightsPerEpochReached',         │ │
│ │                    'fields': [], 'index': 70, 'docs':      │ │
│ │                    ['The maximum number of set weights per │ │
│ │                    epoch has been reached.']}, {'name':    │ │
│ │                    'ArithmeticError', 'fields': [],        │ │
│ │                    'index': 71, 'docs': ['An arithmetic    │ │
│ │                    error occurred during calculation.']},  │ │
│ │                    {'name':                                │ │
│ │                    'InvalidTargetRegistrationsPerInterval… │ │
│ │                    'fields': [], 'index': 72, 'docs':      │ │
│ │                    ['The target registrations per interval │ │
│ │                    is invalid.']}, {'name':                │ │
│ │                    'InvalidMaxRegistrationsPerInterval',   │ │
│ │                    'fields': [], 'index': 73, 'docs':      │ │
│ │                    ['The maximum registrations per         │ │
│ │                    interval is invalid.']}, {'name':       │ │
│ │                    'InvalidAdjustmentAlpha', 'fields': [], │ │
│ │                    'index': 74, 'docs': ['The adjustment   │ │
│ │                    alpha value is invalid.']}, {'name':    │ │
│ │                    'InvalidTargetRegistrationsInterval',   │ │
│ │                    'fields': [], 'index': 75, 'docs':      │ │
│ │                    ['The target registrations interval is  │ │
│ │                    invalid.']}, {'name':                   │ │
│ │                    'InvalidMinImmunityStake', 'fields':    │ │
│ │                    [], 'index': 76, 'docs': ['The minimum  │ │
│ │                    immunity stake is invalid.']}, {'name': │ │
│ │                    'ExtrinsicPanicked', 'fields': [],      │ │
│ │                    'index': 77, 'docs': ['The extrinsic    │ │
│ │                    panicked during execution.']}, {'name': │ │
│ │                    'StepPanicked', 'fields': [], 'index':  │ │
│ │                    78, 'docs': ['A step in the process     │ │
│ │                    panicked.']}, {'name': 'StakeTooSmall', │ │
│ │                    'fields': [], 'index': 79, 'docs':      │ │
│ │                    ['The stake amount to add or remove is  │ │
│ │                    too small. Minimum is 0.5 unit.']},     │ │
│ │                    {'name': 'DelegatingControl', 'fields': │ │
│ │                    [], 'index': 80, 'docs': ['The          │ │
│ │                    validator is delegating weights to      │ │
│ │                    another validator']}, {'name':          │ │
│ │                    'NotDelegatingControl', 'fields': [],   │ │
│ │                    'index': 81, 'docs': ['The validator is │ │
│ │                    not delegating weights to another       │ │
│ │                    validator']}, {'name':                  │ │
│ │                    'RootnetSubnetNotFound', 'fields': [],  │ │
│ │                    'index': 82, 'docs': ['There is no      │ │
│ │                    subnet that is running with the Rootnet │ │
│ │                    consensus']}, {'name':                  │ │
│ │                    'InvalidMinValidatorStake', 'fields':   │ │
│ │                    [], 'index': 83, 'docs':                │ │
│ │                    ['MinValidatorStake must be lower than  │ │
│ │                    250k']}, {'name':                       │ │
│ │                    'InvalidMaxAllowedValidators',          │ │
│ │                    'fields': [], 'index': 84, 'docs':      │ │
│ │                    ['The maximum allowed validators value  │ │
│ │                    is invalid, minimum is 10.']}, {'name': │ │
│ │                    'InvalidMaxEncryptionPeriod', 'fields': │ │
│ │                    [], 'index': 85, 'docs': ['The          │ │
│ │                    encryption period is too short or long, │ │
│ │                    minimum is 360 blocks max is 20_880     │ │
│ │                    blocks']}, {'name': 'SubnetEncrypted',  │ │
│ │                    'fields': [], 'index': 86, 'docs':      │ │
│ │                    ['Subnet is using encrypted weight      │ │
│ │                    calls']}, {'name':                      │ │
│ │                    'SubnetNotEncrypted', 'fields': [],     │ │
│ │                    'index': 87, 'docs': ['Subnet is not    │ │
│ │                    using encrypted weight calls']},        │ │
│ │                    {'name': 'UidNotWhitelisted', 'fields': │ │
│ │                    [], 'index': 88, 'docs': ['Uid is not   │ │
│ │                    present in LegitWhitelist, it needs to  │ │
│ │                    be whitelisted by DAO']}, {'name':      │ │
│ │                    'InvalidCopierMargin', 'fields': [],    │ │
│ │                    'index': 89, 'docs': ['The copier       │ │
│ │                    margin must be between 0 and 1']},      │ │
│ │                    {'name': 'InvalidFloorFounderShare',    │ │
│ │                    'fields': [], 'index': 90, 'docs':      │ │
│ │                    ['Floor Founder Share must be between 0 │ │
│ │                    and 100']}, {'name':                    │ │
│ │                    'InvalidSubnetImmunityPeriod',          │ │
│ │                    'fields': [], 'index': 91, 'docs':      │ │
│ │                    ['Subnet Immunity Period has to be more │ │
│ │                    than 0']}, {'name': 'InvalidKappa',     │ │
│ │                    'fields': [], 'index': 92, 'docs':      │ │
│ │                    ['Kappa has to be more than 0']},       │ │
│ │                    {'name': 'InvalidRho', 'fields': [],    │ │
│ │                    'index': 93, 'docs': ['Rho must be more │ │
│ │                    than 0']}, {'name':                     │ │
│ │                    'InvalidMaximumSetWeightCallsPerEpoch', │ │
│ │                    'fields': [], 'index': 94, 'docs':      │ │
│ │                    ['The maximum allowed set weight calls  │ │
│ │                    per epoch must be more than 0']},       │ │
│ │                    {'name': 'InvalidModuleParams',         │ │
│ │                    'fields': [], 'index': 95, 'docs':      │ │
│ │                    ['Some module parameter is invalid']},  │ │
│ │                    {'name': 'InvalidMinFees', 'fields':    │ │
│ │                    [], 'index': 96, 'docs': ['The provided │ │
│ │                    minimum fees are invalid. This can      │ │
│ │                    happen when:', '- Stake delegation fee  │ │
│ │                    is below the system minimum', '-        │ │
│ │                    Validator weight fee is below the       │ │
│ │                    system minimum', '- Either fee exceeds  │ │
│ │                    100%']}, {'name': 'CannotDecreaseFee',  │ │
│ │                    'fields': [], 'index': 97, 'docs':      │ │
│ │                    ['Cannot decrease fees below their      │ │
│ │                    current values.', 'Fees can only be     │ │
│ │                    increased to prevent economic           │ │
│ │                    attacks.']}, {'name':                   │ │
│ │                    'NotEnoughBalance', 'fields': [],       │ │
│ │                    'index': 98, 'docs': ['General error    │ │
│ │                    for not having enough balance']},       │ │
│ │                    {'name': 'NotEnoughBridgedTokens',      │ │
│ │                    'fields': [], 'index': 99, 'docs':      │ │
│ │                    ['Not having enough tokens to bridge    │ │
│ │                    back']}, {'name':                       │ │
│ │                    'OutsideValidBlockRange', 'fields': [], │ │
│ │                    'index': 100, 'docs': ['User is trying  │ │
│ │                    to bridge tokens in closed              │ │
│ │                    period']}]}}, 'docs': ['The `Error`     │ │
│ │                    enum of this pallet.']}}, {'id': 183,   │ │
│ │                    'type': {'path': ['pallet_governance',  │ │
│ │                    'proposal', 'Proposal'], 'params':      │ │
│ │                    [{'name': 'T', 'type': None}], 'def':   │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'id', 'type': 6, 'typeName':            │ │
│ │                    'ProposalId', 'docs': []}, {'name':     │ │
│ │                    'proposer', 'type': 0, 'typeName':      │ │
│ │                    'T::AccountId', 'docs': []}, {'name':   │ │
│ │                    'expiration_block', 'type': 6,          │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'data', 'type': 184,           │ │
│ │                    'typeName': 'ProposalData<T>', 'docs':  │ │
│ │                    []}, {'name': 'status', 'type': 186,    │ │
│ │                    'typeName': 'ProposalStatus<T>',        │ │
│ │                    'docs': []}, {'name': 'metadata',       │ │
│ │                    'type': 134, 'typeName':                │ │
│ │                    'BoundedVec<u8, ConstU32<256>>',        │ │
│ │                    'docs': []}, {'name': 'proposal_cost',  │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'creation_block', 'type': │ │
│ │                    6, 'typeName': 'u64', 'docs': []}]}},   │ │
│ │                    'docs': []}}, {'id': 184, 'type':       │ │
│ │                    {'path': ['pallet_governance',          │ │
│ │                    'proposal', 'ProposalData'], 'params':  │ │
│ │                    [{'name': 'T', 'type': None}], 'def':   │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'GlobalCustom', 'fields': [], 'index':  │ │
│ │                    0, 'docs': []}, {'name':                │ │
│ │                    'GlobalParams', 'fields': [{'name':     │ │
│ │                    None, 'type': 47, 'typeName':           │ │
│ │                    'pallet_subspace::GlobalParams<T>',     │ │
│ │                    'docs': []}], 'index': 1, 'docs': []},  │ │
│ │                    {'name': 'SubnetCustom', 'fields':      │ │
│ │                    [{'name': 'subnet_id', 'type': 46,      │ │
│ │                    'typeName': 'SubnetId', 'docs': []}],   │ │
│ │                    'index': 2, 'docs': []}, {'name':       │ │
│ │                    'SubnetParams', 'fields': [{'name':     │ │
│ │                    'subnet_id', 'type': 46, 'typeName':    │ │
│ │                    'SubnetId', 'docs': []}, {'name':       │ │
│ │                    'params', 'type': 185, 'typeName':      │ │
│ │                    'pallet_subspace::SubnetParams<T>',     │ │
│ │                    'docs': []}], 'index': 3, 'docs': []},  │ │
│ │                    {'name': 'TransferDaoTreasury',         │ │
│ │                    'fields': [{'name': 'account', 'type':  │ │
│ │                    0, 'typeName': 'T::AccountId', 'docs':  │ │
│ │                    []}, {'name': 'amount', 'type': 6,      │ │
│ │                    'typeName': 'u64', 'docs': []}],        │ │
│ │                    'index': 4, 'docs': []}]}}, 'docs':     │ │
│ │                    []}}, {'id': 185, 'type': {'path':      │ │
│ │                    ['pallet_subspace', 'params', 'subnet', │ │
│ │                    'SubnetParams'], 'params': [{'name':    │ │
│ │                    'T', 'type': None}], 'def':             │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'founder', 'type': 0, 'typeName':       │ │
│ │                    'T::AccountId', 'docs': []}, {'name':   │ │
│ │                    'founder_share', 'type': 46,            │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'immunity_period', 'type': 46, │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'incentive_ratio', 'type': 46, │ │
│ │                    'typeName': 'u16', 'docs': []},         │ │
│ │                    {'name': 'max_allowed_uids', 'type':    │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'max_allowed_weights', 'type': │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'min_allowed_weights', 'type': │ │
│ │                    46, 'typeName': 'u16', 'docs': []},     │ │
│ │                    {'name': 'max_weight_age', 'type': 6,   │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'name', 'type': 134,           │ │
│ │                    'typeName': 'BoundedVec<u8,             │ │
│ │                    ConstU32<256>>', 'docs': []}, {'name':  │ │
│ │                    'metadata', 'type': 135, 'typeName':    │ │
│ │                    'Option<BoundedVec<u8,                  │ │
│ │                    ConstU32<120>>>', 'docs': []}, {'name': │ │
│ │                    'tempo', 'type': 46, 'typeName': 'u16', │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'maximum_set_weight_calls_per_epoch',   │ │
│ │                    'type': 137, 'typeName': 'Option<u16>', │ │
│ │                    'docs': []}, {'name': 'bonds_ma',       │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'module_burn_config',     │ │
│ │                    'type': 138, 'typeName':                │ │
│ │                    'GeneralBurnConfiguration<T>', 'docs':  │ │
│ │                    []}, {'name': 'min_validator_stake',    │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'max_allowed_validators', │ │
│ │                    'type': 137, 'typeName': 'Option<u16>', │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'governance_config', 'type': 49,        │ │
│ │                    'typeName': 'GovernanceConfiguration',  │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'use_weights_encryption', 'type': 9,    │ │
│ │                    'typeName': 'bool', 'docs': []},        │ │
│ │                    {'name': 'copier_margin', 'type': 139,  │ │
│ │                    'typeName': 'I64F64', 'docs': []},      │ │
│ │                    {'name': 'max_encryption_period',       │ │
│ │                    'type': 87, 'typeName': 'Option<u64>',  │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    186, 'type': {'path':                   │ │
│ │                    ['pallet_governance', 'proposal',       │ │
│ │                    'ProposalStatus'], 'params': [{'name':  │ │
│ │                    'T', 'type': None}], 'def': {'variant': │ │
│ │                    {'variants': [{'name': 'Open',          │ │
│ │                    'fields': [{'name': 'votes_for',        │ │
│ │                    'type': 187, 'typeName':                │ │
│ │                    'BoundedBTreeSet<T::AccountId,          │ │
│ │                    ConstU32<{ u32::MAX }>>', 'docs': []},  │ │
│ │                    {'name': 'votes_against', 'type': 187,  │ │
│ │                    'typeName':                             │ │
│ │                    'BoundedBTreeSet<T::AccountId,          │ │
│ │                    ConstU32<{ u32::MAX }>>', 'docs': []},  │ │
│ │                    {'name': 'stake_for', 'type': 6,        │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'stake_against', 'type': 6,    │ │
│ │                    'typeName': 'u64', 'docs': []}],        │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'Accepted', 'fields': [{'name':         │ │
│ │                    'block', 'type': 6, 'typeName': 'u64',  │ │
│ │                    'docs': []}, {'name': 'stake_for',      │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'stake_against', 'type':  │ │
│ │                    6, 'typeName': 'u64', 'docs': []}],     │ │
│ │                    'index': 1, 'docs': []}, {'name':       │ │
│ │                    'Refused', 'fields': [{'name': 'block', │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'stake_for', 'type': 6,   │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'stake_against', 'type': 6,    │ │
│ │                    'typeName': 'u64', 'docs': []}],        │ │
│ │                    'index': 2, 'docs': []}, {'name':       │ │
│ │                    'Expired', 'fields': [], 'index': 3,    │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    187, 'type': {'path':                   │ │
│ │                    ['bounded_collections',                 │ │
│ │                    'bounded_btree_set',                    │ │
│ │                    'BoundedBTreeSet'], 'params': [{'name': │ │
│ │                    'T', 'type': 0}, {'name': 'S', 'type':  │ │
│ │                    None}], 'def': {'composite': {'fields': │ │
│ │                    [{'name': None, 'type': 188,            │ │
│ │                    'typeName': 'BTreeSet<T>', 'docs':      │ │
│ │                    []}]}}, 'docs': []}}, {'id': 188,       │ │
│ │                    'type': {'path': ['BTreeSet'],          │ │
│ │                    'params': [{'name': 'T', 'type': 0}],   │ │
│ │                    'def': {'composite': {'fields':         │ │
│ │                    [{'name': None, 'type': 117,            │ │
│ │                    'typeName': None, 'docs': []}]}},       │ │
│ │                    'docs': []}}, {'id': 189, 'type':       │ │
│ │                    {'path': ['pallet_governance',          │ │
│ │                    'proposal', 'UnrewardedProposal'],      │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'composite': {'fields': │ │
│ │                    [{'name': 'subnet_id', 'type': 137,     │ │
│ │                    'typeName': 'Option<SubnetId>', 'docs': │ │
│ │                    []}, {'name': 'block', 'type': 6,       │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'votes_for', 'type': 190,      │ │
│ │                    'typeName':                             │ │
│ │                    'BoundedBTreeMap<T::AccountId, u64,     │ │
│ │                    ConstU32<{ u32::MAX }>>', 'docs': []},  │ │
│ │                    {'name': 'votes_against', 'type': 190,  │ │
│ │                    'typeName':                             │ │
│ │                    'BoundedBTreeMap<T::AccountId, u64,     │ │
│ │                    ConstU32<{ u32::MAX }>>', 'docs':       │ │
│ │                    []}]}}, 'docs': []}}, {'id': 190,       │ │
│ │                    'type': {'path':                        │ │
│ │                    ['bounded_collections',                 │ │
│ │                    'bounded_btree_map',                    │ │
│ │                    'BoundedBTreeMap'], 'params': [{'name': │ │
│ │                    'K', 'type': 0}, {'name': 'V', 'type':  │ │
│ │                    6}, {'name': 'S', 'type': None}],       │ │
│ │                    'def': {'composite': {'fields':         │ │
│ │                    [{'name': None, 'type': 191,            │ │
│ │                    'typeName': 'BTreeMap<K, V>', 'docs':   │ │
│ │                    []}]}}, 'docs': []}}, {'id': 191,       │ │
│ │                    'type': {'path': ['BTreeMap'],          │ │
│ │                    'params': [{'name': 'K', 'type': 0},    │ │
│ │                    {'name': 'V', 'type': 6}], 'def':       │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 192, 'typeName': None,    │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    192, 'type': {'path': [], 'params': [], │ │
│ │                    'def': {'sequence': {'type': 193}},     │ │
│ │                    'docs': []}}, {'id': 193, 'type':       │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'tuple': [0, 6]}, 'docs': []}}, {'id': │ │
│ │                    194, 'type': {'path':                   │ │
│ │                    ['pallet_governance', 'dao',            │ │
│ │                    'CuratorApplication'], 'params':        │ │
│ │                    [{'name': 'T', 'type': None}], 'def':   │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'id', 'type': 6, 'typeName': 'u64',     │ │
│ │                    'docs': []}, {'name': 'user_id',        │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': 'paying_for',     │ │
│ │                    'type': 0, 'typeName': 'T::AccountId',  │ │
│ │                    'docs': []}, {'name': 'data', 'type':   │ │
│ │                    134, 'typeName': 'BoundedVec<u8,        │ │
│ │                    ConstU32<256>>', 'docs': []}, {'name':  │ │
│ │                    'status', 'type': 195, 'typeName':      │ │
│ │                    'ApplicationStatus', 'docs': []},       │ │
│ │                    {'name': 'application_cost', 'type': 6, │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'block_number', 'type': 6,     │ │
│ │                    'typeName': 'u64', 'docs': []}]}},      │ │
│ │                    'docs': []}}, {'id': 195, 'type':       │ │
│ │                    {'path': ['pallet_governance', 'dao',   │ │
│ │                    'ApplicationStatus'], 'params': [],     │ │
│ │                    'def': {'variant': {'variants':         │ │
│ │                    [{'name': 'Pending', 'fields': [],      │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'Accepted', 'fields': [], 'index': 1,   │ │
│ │                    'docs': []}, {'name': 'Refused',        │ │
│ │                    'fields': [], 'index': 2, 'docs': []},  │ │
│ │                    {'name': 'Removed', 'fields': [],       │ │
│ │                    'index': 3, 'docs': []}]}}, 'docs':     │ │
│ │                    []}}, {'id': 196, 'type': {'path':      │ │
│ │                    ['pallet_governance', 'pallet',         │ │
│ │                    'Error'], 'params': [{'name': 'T',      │ │
│ │                    'type': None}], 'def': {'variant':      │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'ProposalIsFinished', 'fields': [],     │ │
│ │                    'index': 0, 'docs': ['The proposal is   │ │
│ │                    already finished. Do not retry.']},     │ │
│ │                    {'name':                                │ │
│ │                    'InvalidProposalFinalizationParameters… │ │
│ │                    'fields': [], 'index': 1, 'docs':       │ │
│ │                    ['Invalid parameters were provided to   │ │
│ │                    the finalization process.']}, {'name':  │ │
│ │                    'InvalidProposalVotingParameters',      │ │
│ │                    'fields': [], 'index': 2, 'docs':       │ │
│ │                    ['Invalid parameters were provided to   │ │
│ │                    the voting process.']}, {'name':        │ │
│ │                    'InvalidProposalCost', 'fields': [],    │ │
│ │                    'index': 3, 'docs': ['Negative proposal │ │
│ │                    cost when setting global or subnet      │ │
│ │                    governance configuration.']}, {'name':  │ │
│ │                    'InvalidProposalExpiration', 'fields':  │ │
│ │                    [], 'index': 4, 'docs': ['Negative      │ │
│ │                    expiration when setting global or       │ │
│ │                    subnet governance configuration.']},    │ │
│ │                    {'name': 'NotEnoughBalanceToPropose',   │ │
│ │                    'fields': [], 'index': 5, 'docs': ["Key │ │
│ │                    doesn't have enough tokens to create a  │ │
│ │                    proposal."]}, {'name':                  │ │
│ │                    'ProposalDataTooSmall', 'fields': [],   │ │
│ │                    'index': 6, 'docs': ['Proposal data is  │ │
│ │                    empty.']}, {'name':                     │ │
│ │                    'ProposalDataTooLarge', 'fields': [],   │ │
│ │                    'index': 7, 'docs': ['Proposal data is  │ │
│ │                    bigger than 256 characters.']},         │ │
│ │                    {'name':                                │ │
│ │                    'ModuleDelegatingForMaxStakers',        │ │
│ │                    'fields': [], 'index': 8, 'docs': ['The │ │
│ │                    staked module is already delegating for │ │
│ │                    2 ^ 32 keys.']}, {'name':               │ │
│ │                    'ProposalNotFound', 'fields': [],       │ │
│ │                    'index': 9, 'docs': ["Proposal with     │ │
│ │                    given id doesn't exist."]}, {'name':    │ │
│ │                    'ProposalClosed', 'fields': [],         │ │
│ │                    'index': 10, 'docs': ['Proposal was     │ │
│ │                    either accepted, refused or expired and │ │
│ │                    cannot accept votes.']}, {'name':       │ │
│ │                    'InvalidProposalData', 'fields': [],    │ │
│ │                    'index': 11, 'docs': ["Proposal data    │ │
│ │                    isn't composed by valid UTF-8           │ │
│ │                    characters."]}, {'name':                │ │
│ │                    'InvalidCurrencyConversionValue',       │ │
│ │                    'fields': [], 'index': 12, 'docs':      │ │
│ │                    ['Invalid value given when transforming │ │
│ │                    a u64 into T::Currency.']}, {'name':    │ │
│ │                    'InsufficientDaoTreasuryFunds',         │ │
│ │                    'fields': [], 'index': 13, 'docs':      │ │
│ │                    ["Dao Treasury doesn't have enough      │ │
│ │                    funds to be transferred."]}, {'name':   │ │
│ │                    'NotVoteMode', 'fields': [], 'index':   │ │
│ │                    14, 'docs': ['Subnet is on Authority    │ │
│ │                    Mode.']}, {'name': 'AlreadyVoted',      │ │
│ │                    'fields': [], 'index': 15, 'docs':      │ │
│ │                    ['Key has already voted on given        │ │
│ │                    Proposal.']}, {'name': 'NotVoted',      │ │
│ │                    'fields': [], 'index': 16, 'docs':      │ │
│ │                    ["Key hasn't voted on given             │ │
│ │                    Proposal."]}, {'name':                  │ │
│ │                    'InsufficientStake', 'fields': [],      │ │
│ │                    'index': 17, 'docs': ["Key doesn't have │ │
│ │                    enough stake to vote."]}, {'name':      │ │
│ │                    'VoterIsDelegatingVotingPower',         │ │
│ │                    'fields': [], 'index': 18, 'docs':      │ │
│ │                    ['The voter is delegating its voting    │ │
│ │                    power to their staked modules. Disable  │ │
│ │                    voting power', 'delegation.']},         │ │
│ │                    {'name': 'VoteModeIsNotAuthority',      │ │
│ │                    'fields': [], 'index': 19, 'docs':      │ │
│ │                    ['The network vote mode must be         │ │
│ │                    authority for changes to be             │ │
│ │                    imposed.']}, {'name': 'InternalError',  │ │
│ │                    'fields': [], 'index': 20, 'docs': ['An │ │
│ │                    internal error occurred, probably       │ │
│ │                    relating to the size of the bounded     │ │
│ │                    sets.']}, {'name':                      │ │
│ │                    'ApplicationTooSmall', 'fields': [],    │ │
│ │                    'index': 21, 'docs': ['The application  │ │
│ │                    data is too small or empty.']},         │ │
│ │                    {'name': 'InvalidApplicationSize',      │ │
│ │                    'fields': [], 'index': 22, 'docs':      │ │
│ │                    ['The application data is too large,    │ │
│ │                    exceeding the maximum allowed size.']}, │ │
│ │                    {'name': 'ApplicationNotPending',       │ │
│ │                    'fields': [], 'index': 23, 'docs':      │ │
│ │                    ['The application is not in a pending   │ │
│ │                    state.']}, {'name':                     │ │
│ │                    'ApplicationKeyAlreadyUsed', 'fields':  │ │
│ │                    [], 'index': 24, 'docs': ['The          │ │
│ │                    application key is already used in      │ │
│ │                    another application.']}, {'name':       │ │
│ │                    'InvalidApplication', 'fields': [],     │ │
│ │                    'index': 25, 'docs': ['The application  │ │
│ │                    data is invalid or malformed.']},       │ │
│ │                    {'name': 'NotEnoughBalanceToApply',     │ │
│ │                    'fields': [], 'index': 26, 'docs':      │ │
│ │                    ["The account doesn't have enough       │ │
│ │                    balance to submit an application."]},   │ │
│ │                    {'name': 'NotCurator', 'fields': [],    │ │
│ │                    'index': 27, 'docs': ['The operation    │ │
│ │                    can only be performed by the            │ │
│ │                    curator.']}, {'name':                   │ │
│ │                    'ApplicationNotFound', 'fields': [],    │ │
│ │                    'index': 28, 'docs': ['The application  │ │
│ │                    with the given ID was not found.']},    │ │
│ │                    {'name': 'AlreadyWhitelisted',          │ │
│ │                    'fields': [], 'index': 29, 'docs':      │ │
│ │                    ['The account is already whitelisted    │ │
│ │                    and cannot be added again.']}, {'name': │ │
│ │                    'NotWhitelisted', 'fields': [],         │ │
│ │                    'index': 30, 'docs': ['The account is   │ │
│ │                    not whitelisted and cannot be removed   │ │
│ │                    from the whitelist.']}, {'name':        │ │
│ │                    'CouldNotConvertToBalance', 'fields':   │ │
│ │                    [], 'index': 31, 'docs': ['Failed to    │ │
│ │                    convert the given value to a            │ │
│ │                    balance.']}]}}, 'docs': ['The `Error`   │ │
│ │                    enum of this pallet.']}}, {'id': 197,   │ │
│ │                    'type': {'path':                        │ │
│ │                    ['pallet_subnet_emission', 'pallet',    │ │
│ │                    'EncryptionMechanism'], 'params': [],   │ │
│ │                    'def': {'composite': {'fields':         │ │
│ │                    [{'name': 'encrypted', 'type': 14,      │ │
│ │                    'typeName': 'Vec<u8>', 'docs': []},     │ │
│ │                    {'name': 'decrypted_hashes', 'type':    │ │
│ │                    14, 'typeName': 'Vec<u8>', 'docs':      │ │
│ │                    []}]}}, 'docs': []}}, {'id': 198,       │ │
│ │                    'type': {'path':                        │ │
│ │                    ['pallet_subnet_emission', 'types',     │ │
│ │                    'SubnetDecryptionInfo'], 'params':      │ │
│ │                    [{'name': 'T', 'type': 199}], 'def':    │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'node_id', 'type': 0, 'typeName':       │ │
│ │                    'T::AccountId', 'docs': []}, {'name':   │ │
│ │                    'node_public_key', 'type': 64,          │ │
│ │                    'typeName': 'PublicKey', 'docs': []},   │ │
│ │                    {'name': 'validity_block', 'type': 87,  │ │
│ │                    'typeName': 'Option<u64>', 'docs': []}, │ │
│ │                    {'name': 'last_keep_alive', 'type': 6,  │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'rotating_from', 'type': 41,   │ │
│ │                    'typeName': 'Option<T::AccountId>',     │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    199, 'type': {'path':                   │ │
│ │                    ['node_subspace_runtime', 'Runtime'],   │ │
│ │                    'params': [], 'def': {'composite':      │ │
│ │                    {'fields': []}}, 'docs': []}}, {'id':   │ │
│ │                    200, 'type': {'path':                   │ │
│ │                    ['pallet_subnet_emission_api',          │ │
│ │                    'SubnetConsensus'], 'params': [],       │ │
│ │                    'def': {'variant': {'variants':         │ │
│ │                    [{'name': 'Yuma', 'fields': [],         │ │
│ │                    'index': 0, 'docs': []}, {'name':       │ │
│ │                    'Linear', 'fields': [], 'index': 1,     │ │
│ │                    'docs': []}, {'name': 'Treasury',       │ │
│ │                    'fields': [], 'index': 2, 'docs': []},  │ │
│ │                    {'name': 'Root', 'fields': [], 'index': │ │
│ │                    3, 'docs': []}]}}, 'docs': []}}, {'id': │ │
│ │                    201, 'type': {'path': [], 'params': [], │ │
│ │                    'def': {'tuple': [46, 6]}, 'docs':      │ │
│ │                    []}}, {'id': 202, 'type': {'path':      │ │
│ │                    ['pallet_subnet_emission',              │ │
│ │                    'subnet_consensus', 'util', 'params',   │ │
│ │                    'ConsensusParams'], 'params': [{'name': │ │
│ │                    'T', 'type': None}], 'def':             │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'subnet_id', 'type': 46, 'typeName':    │ │
│ │                    'u16', 'docs': []}, {'name':            │ │
│ │                    'token_emission', 'type': 6,            │ │
│ │                    'typeName': 'BalanceOf<T>', 'docs':     │ │
│ │                    []}, {'name': 'modules', 'type': 203,   │ │
│ │                    'typeName':                             │ │
│ │                    'BTreeMap<ModuleKey<T::AccountId>,      │ │
│ │                    ModuleParams<T::AccountId>>', 'docs':   │ │
│ │                    []}, {'name': 'kappa', 'type': 206,     │ │
│ │                    'typeName': 'I32F32', 'docs': []},      │ │
│ │                    {'name': 'founder_key', 'type': 212,    │ │
│ │                    'typeName': 'AccountKey<T::AccountId>', │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'founder_emission', 'type': 6,          │ │
│ │                    'typeName': 'BalanceOf<T>', 'docs':     │ │
│ │                    []}, {'name': 'current_block', 'type':  │ │
│ │                    6, 'typeName': 'u64', 'docs': []},      │ │
│ │                    {'name': 'activity_cutoff', 'type': 6,  │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'use_weights_encryption',      │ │
│ │                    'type': 9, 'typeName': 'bool', 'docs':  │ │
│ │                    []}, {'name': 'max_allowed_validators', │ │
│ │                    'type': 137, 'typeName': 'Option<u16>', │ │
│ │                    'docs': []}, {'name':                   │ │
│ │                    'bonds_moving_average', 'type': 6,      │ │
│ │                    'typeName': 'u64', 'docs': []},         │ │
│ │                    {'name': 'alpha_values', 'type': 213,   │ │
│ │                    'typeName': '(I32F32, I32F32)', 'docs': │ │
│ │                    []}, {'name': 'min_val_stake', 'type':  │ │
│ │                    139, 'typeName': 'I64F64', 'docs':      │ │
│ │                    []}]}}, 'docs': []}}, {'id': 203,       │ │
│ │                    'type': {'path': ['BTreeMap'],          │ │
│ │                    'params': [{'name': 'K', 'type': 204},  │ │
│ │                    {'name': 'V', 'type': 205}], 'def':     │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 210, 'typeName': None,    │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    204, 'type': {'path':                   │ │
│ │                    ['pallet_subnet_emission',              │ │
│ │                    'subnet_consensus', 'util', 'params',   │ │
│ │                    'ModuleKey'], 'params': [{'name':       │ │
│ │                    'AccountId', 'type': 0}], 'def':        │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 0, 'typeName':            │ │
│ │                    'AccountId', 'docs': []}]}}, 'docs':    │ │
│ │                    []}}, {'id': 205, 'type': {'path':      │ │
│ │                    ['pallet_subnet_emission',              │ │
│ │                    'subnet_consensus', 'util', 'params',   │ │
│ │                    'ModuleParams'], 'params': [{'name':    │ │
│ │                    'AccountId', 'type': 0}], 'def':        │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    'uid', 'type': 46, 'typeName': 'u16',   │ │
│ │                    'docs': []}, {'name': 'last_update',    │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'block_at_registration',  │ │
│ │                    'type': 6, 'typeName': 'u64', 'docs':   │ │
│ │                    []}, {'name': 'validator_permit',       │ │
│ │                    'type': 9, 'typeName': 'bool', 'docs':  │ │
│ │                    []}, {'name': 'stake_normalized',       │ │
│ │                    'type': 206, 'typeName': 'I32F32',      │ │
│ │                    'docs': []}, {'name': 'stake_original', │ │
│ │                    'type': 139, 'typeName': 'I64F64',      │ │
│ │                    'docs': []}, {'name': 'delegated_to',   │ │
│ │                    'type': 208, 'typeName':                │ │
│ │                    'Option<(AccountId, Percent)>', 'docs': │ │
│ │                    []}, {'name': 'bonds', 'type': 162,     │ │
│ │                    'typeName': 'Vec<(u16, u16)>', 'docs':  │ │
│ │                    []}, {'name': 'weight_encrypted',       │ │
│ │                    'type': 14, 'typeName': 'Vec<u8>',      │ │
│ │                    'docs': []}, {'name': 'weight_hash',    │ │
│ │                    'type': 14, 'typeName': 'Vec<u8>',      │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    206, 'type': {'path':                   │ │
│ │                    ['substrate_fixed', 'FixedI64'],        │ │
│ │                    'params': [{'name': 'Frac', 'type':     │ │
│ │                    141}], 'def': {'composite': {'fields':  │ │
│ │                    [{'name': 'bits', 'type': 207,          │ │
│ │                    'typeName': 'i64', 'docs': []}]}},      │ │
│ │                    'docs': []}}, {'id': 207, 'type':       │ │
│ │                    {'path': [], 'params': [], 'def':       │ │
│ │                    {'primitive': 'i64'}, 'docs': []}},     │ │
│ │                    {'id': 208, 'type': {'path':            │ │
│ │                    ['Option'], 'params': [{'name': 'T',    │ │
│ │                    'type': 209}], 'def': {'variant':       │ │
│ │                    {'variants': [{'name': 'None',          │ │
│ │                    'fields': [], 'index': 0, 'docs': []},  │ │
│ │                    {'name': 'Some', 'fields': [{'name':    │ │
│ │                    None, 'type': 209, 'typeName': None,    │ │
│ │                    'docs': []}], 'index': 1, 'docs':       │ │
│ │                    []}]}}, 'docs': []}}, {'id': 209,       │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'tuple': [0, 48]}, 'docs':      │ │
│ │                    []}}, {'id': 210, 'type': {'path': [],  │ │
│ │                    'params': [], 'def': {'sequence':       │ │
│ │                    {'type': 211}}, 'docs': []}}, {'id':    │ │
│ │                    211, 'type': {'path': [], 'params': [], │ │
│ │                    'def': {'tuple': [204, 205]}, 'docs':   │ │
│ │                    []}}, {'id': 212, 'type': {'path':      │ │
│ │                    ['pallet_subnet_emission',              │ │
│ │                    'subnet_consensus', 'util', 'params',   │ │
│ │                    'AccountKey'], 'params': [{'name':      │ │
│ │                    'AccountId', 'type': 0}], 'def':        │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 0, 'typeName':            │ │
│ │                    'AccountId', 'docs': []}]}}, 'docs':    │ │
│ │                    []}}, {'id': 213, 'type': {'path': [],  │ │
│ │                    'params': [], 'def': {'tuple': [206,    │ │
│ │                    206]}, 'docs': []}}, {'id': 214,        │ │
│ │                    'type': {'path': [], 'params': [],      │ │
│ │                    'def': {'sequence': {'type': 198}},     │ │
│ │                    'docs': []}}, {'id': 215, 'type':       │ │
│ │                    {'path': ['bounded_collections',        │ │
│ │                    'bounded_vec', 'BoundedVec'], 'params': │ │
│ │                    [{'name': 'T', 'type': 168}, {'name':   │ │
│ │                    'S', 'type': None}], 'def':             │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 167, 'typeName':          │ │
│ │                    'Vec<T>', 'docs': []}]}}, 'docs': []}}, │ │
│ │                    {'id': 216, 'type': {'path':            │ │
│ │                    ['pallet_offworker', 'pallet',          │ │
│ │                    'Error'], 'params': [{'name': 'T',      │ │
│ │                    'type': None}], 'def': {'variant':      │ │
│ │                    {'variants': [{'name':                  │ │
│ │                    'InvalidDecryptionKey', 'fields': [],   │ │
│ │                    'index': 0, 'docs': ['Decryption key is │ │
│ │                    invalid for a given subnet']}, {'name': │ │
│ │                    'InvalidSubnetId', 'fields': [],        │ │
│ │                    'index': 1, 'docs': ['Subnet ID is      │ │
│ │                    invalid']}, {'name':                    │ │
│ │                    'TooManyAuthorities', 'fields': [],     │ │
│ │                    'index': 2, 'docs': ['Attempted to add  │ │
│ │                    more authorities than the maximum       │ │
│ │                    allowed']}, {'name':                    │ │
│ │                    'EmptyDecryptedWeights', 'fields': [],  │ │
│ │                    'index': 3, 'docs': ['Attempted to send │ │
│ │                    empty decrypted weights']}, {'name':    │ │
│ │                    'DecryptedWeightsLengthMismatch',       │ │
│ │                    'fields': [], 'index': 4, 'docs':       │ │
│ │                    ['Send more decrypted weights than      │ │
│ │                    expected epoch count']}]}}, 'docs':     │ │
│ │                    ['The `Error` enum of this pallet.']}}, │ │
│ │                    {'id': 217, 'type': {'path':            │ │
│ │                    ['sp_runtime', 'generic',               │ │
│ │                    'unchecked_extrinsic',                  │ │
│ │                    'UncheckedExtrinsic'], 'params':        │ │
│ │                    [{'name': 'Address', 'type': 114},      │ │
│ │                    {'name': 'Call', 'type': 123}, {'name': │ │
│ │                    'Signature', 'type': 164}, {'name':     │ │
│ │                    'Extra', 'type': 218}], 'def':          │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 14, 'typeName': None,     │ │
│ │                    'docs': []}]}}, 'docs': []}}, {'id':    │ │
│ │                    218, 'type': {'path': [], 'params': [], │ │
│ │                    'def': {'tuple': [219, 220, 221, 222,   │ │
│ │                    223, 225, 226, 227]}, 'docs': []}},     │ │
│ │                    {'id': 219, 'type': {'path':            │ │
│ │                    ['frame_system', 'extensions',          │ │
│ │                    'check_non_zero_sender',                │ │
│ │                    'CheckNonZeroSender'], 'params':        │ │
│ │                    [{'name': 'T', 'type': None}], 'def':   │ │
│ │                    {'composite': {'fields': []}}, 'docs':  │ │
│ │                    []}}, {'id': 220, 'type': {'path':      │ │
│ │                    ['frame_system', 'extensions',          │ │
│ │                    'check_spec_version',                   │ │
│ │                    'CheckSpecVersion'], 'params':          │ │
│ │                    [{'name': 'T', 'type': None}], 'def':   │ │
│ │                    {'composite': {'fields': []}}, 'docs':  │ │
│ │                    []}}, {'id': 221, 'type': {'path':      │ │
│ │                    ['frame_system', 'extensions',          │ │
│ │                    'check_tx_version', 'CheckTxVersion'],  │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'composite': {'fields': │ │
│ │                    []}}, 'docs': []}}, {'id': 222, 'type': │ │
│ │                    {'path': ['frame_system', 'extensions', │ │
│ │                    'check_genesis', 'CheckGenesis'],       │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'composite': {'fields': │ │
│ │                    []}}, 'docs': []}}, {'id': 223, 'type': │ │
│ │                    {'path': ['frame_system', 'extensions', │ │
│ │                    'check_mortality', 'CheckMortality'],   │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'composite': {'fields': │ │
│ │                    [{'name': None, 'type': 224,            │ │
│ │                    'typeName': 'Era', 'docs': []}]}},      │ │
│ │                    'docs': []}}, {'id': 224, 'type':       │ │
│ │                    {'path': ['sp_runtime', 'generic',      │ │
│ │                    'era', 'Era'], 'params': [], 'def':     │ │
│ │                    {'variant': {'variants': [{'name':      │ │
│ │                    'Immortal', 'fields': [], 'index': 0,   │ │
│ │                    'docs': []}, {'name': 'Mortal1',        │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 1, 'docs': []}, {'name':       │ │
│ │                    'Mortal2', 'fields': [{'name': None,    │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 2, 'docs': []}, {'name': │ │
│ │                    'Mortal3', 'fields': [{'name': None,    │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 3, 'docs': []}, {'name': │ │
│ │                    'Mortal4', 'fields': [{'name': None,    │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 4, 'docs': []}, {'name': │ │
│ │                    'Mortal5', 'fields': [{'name': None,    │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 5, 'docs': []}, {'name': │ │
│ │                    'Mortal6', 'fields': [{'name': None,    │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 6, 'docs': []}, {'name': │ │
│ │                    'Mortal7', 'fields': [{'name': None,    │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 7, 'docs': []}, {'name': │ │
│ │                    'Mortal8', 'fields': [{'name': None,    │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 8, 'docs': []}, {'name': │ │
│ │                    'Mortal9', 'fields': [{'name': None,    │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 9, 'docs': []}, {'name': │ │
│ │                    'Mortal10', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 10, 'docs': []},         │ │
│ │                    {'name': 'Mortal11', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 11,        │ │
│ │                    'docs': []}, {'name': 'Mortal12',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 12, 'docs': []}, {'name':      │ │
│ │                    'Mortal13', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 13, 'docs': []},         │ │
│ │                    {'name': 'Mortal14', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 14,        │ │
│ │                    'docs': []}, {'name': 'Mortal15',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 15, 'docs': []}, {'name':      │ │
│ │                    'Mortal16', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 16, 'docs': []},         │ │
│ │                    {'name': 'Mortal17', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 17,        │ │
│ │                    'docs': []}, {'name': 'Mortal18',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 18, 'docs': []}, {'name':      │ │
│ │                    'Mortal19', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 19, 'docs': []},         │ │
│ │                    {'name': 'Mortal20', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 20,        │ │
│ │                    'docs': []}, {'name': 'Mortal21',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 21, 'docs': []}, {'name':      │ │
│ │                    'Mortal22', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 22, 'docs': []},         │ │
│ │                    {'name': 'Mortal23', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 23,        │ │
│ │                    'docs': []}, {'name': 'Mortal24',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 24, 'docs': []}, {'name':      │ │
│ │                    'Mortal25', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 25, 'docs': []},         │ │
│ │                    {'name': 'Mortal26', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 26,        │ │
│ │                    'docs': []}, {'name': 'Mortal27',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 27, 'docs': []}, {'name':      │ │
│ │                    'Mortal28', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 28, 'docs': []},         │ │
│ │                    {'name': 'Mortal29', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 29,        │ │
│ │                    'docs': []}, {'name': 'Mortal30',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 30, 'docs': []}, {'name':      │ │
│ │                    'Mortal31', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 31, 'docs': []},         │ │
│ │                    {'name': 'Mortal32', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 32,        │ │
│ │                    'docs': []}, {'name': 'Mortal33',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 33, 'docs': []}, {'name':      │ │
│ │                    'Mortal34', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 34, 'docs': []},         │ │
│ │                    {'name': 'Mortal35', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 35,        │ │
│ │                    'docs': []}, {'name': 'Mortal36',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 36, 'docs': []}, {'name':      │ │
│ │                    'Mortal37', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 37, 'docs': []},         │ │
│ │                    {'name': 'Mortal38', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 38,        │ │
│ │                    'docs': []}, {'name': 'Mortal39',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 39, 'docs': []}, {'name':      │ │
│ │                    'Mortal40', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 40, 'docs': []},         │ │
│ │                    {'name': 'Mortal41', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 41,        │ │
│ │                    'docs': []}, {'name': 'Mortal42',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 42, 'docs': []}, {'name':      │ │
│ │                    'Mortal43', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 43, 'docs': []},         │ │
│ │                    {'name': 'Mortal44', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 44,        │ │
│ │                    'docs': []}, {'name': 'Mortal45',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 45, 'docs': []}, {'name':      │ │
│ │                    'Mortal46', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 46, 'docs': []},         │ │
│ │                    {'name': 'Mortal47', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 47,        │ │
│ │                    'docs': []}, {'name': 'Mortal48',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 48, 'docs': []}, {'name':      │ │
│ │                    'Mortal49', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 49, 'docs': []},         │ │
│ │                    {'name': 'Mortal50', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 50,        │ │
│ │                    'docs': []}, {'name': 'Mortal51',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 51, 'docs': []}, {'name':      │ │
│ │                    'Mortal52', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 52, 'docs': []},         │ │
│ │                    {'name': 'Mortal53', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 53,        │ │
│ │                    'docs': []}, {'name': 'Mortal54',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 54, 'docs': []}, {'name':      │ │
│ │                    'Mortal55', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 55, 'docs': []},         │ │
│ │                    {'name': 'Mortal56', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 56,        │ │
│ │                    'docs': []}, {'name': 'Mortal57',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 57, 'docs': []}, {'name':      │ │
│ │                    'Mortal58', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 58, 'docs': []},         │ │
│ │                    {'name': 'Mortal59', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 59,        │ │
│ │                    'docs': []}, {'name': 'Mortal60',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 60, 'docs': []}, {'name':      │ │
│ │                    'Mortal61', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 61, 'docs': []},         │ │
│ │                    {'name': 'Mortal62', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 62,        │ │
│ │                    'docs': []}, {'name': 'Mortal63',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 63, 'docs': []}, {'name':      │ │
│ │                    'Mortal64', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 64, 'docs': []},         │ │
│ │                    {'name': 'Mortal65', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 65,        │ │
│ │                    'docs': []}, {'name': 'Mortal66',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 66, 'docs': []}, {'name':      │ │
│ │                    'Mortal67', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 67, 'docs': []},         │ │
│ │                    {'name': 'Mortal68', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 68,        │ │
│ │                    'docs': []}, {'name': 'Mortal69',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 69, 'docs': []}, {'name':      │ │
│ │                    'Mortal70', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 70, 'docs': []},         │ │
│ │                    {'name': 'Mortal71', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 71,        │ │
│ │                    'docs': []}, {'name': 'Mortal72',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 72, 'docs': []}, {'name':      │ │
│ │                    'Mortal73', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 73, 'docs': []},         │ │
│ │                    {'name': 'Mortal74', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 74,        │ │
│ │                    'docs': []}, {'name': 'Mortal75',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 75, 'docs': []}, {'name':      │ │
│ │                    'Mortal76', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 76, 'docs': []},         │ │
│ │                    {'name': 'Mortal77', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 77,        │ │
│ │                    'docs': []}, {'name': 'Mortal78',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 78, 'docs': []}, {'name':      │ │
│ │                    'Mortal79', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 79, 'docs': []},         │ │
│ │                    {'name': 'Mortal80', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 80,        │ │
│ │                    'docs': []}, {'name': 'Mortal81',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 81, 'docs': []}, {'name':      │ │
│ │                    'Mortal82', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 82, 'docs': []},         │ │
│ │                    {'name': 'Mortal83', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 83,        │ │
│ │                    'docs': []}, {'name': 'Mortal84',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 84, 'docs': []}, {'name':      │ │
│ │                    'Mortal85', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 85, 'docs': []},         │ │
│ │                    {'name': 'Mortal86', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 86,        │ │
│ │                    'docs': []}, {'name': 'Mortal87',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 87, 'docs': []}, {'name':      │ │
│ │                    'Mortal88', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 88, 'docs': []},         │ │
│ │                    {'name': 'Mortal89', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 89,        │ │
│ │                    'docs': []}, {'name': 'Mortal90',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 90, 'docs': []}, {'name':      │ │
│ │                    'Mortal91', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 91, 'docs': []},         │ │
│ │                    {'name': 'Mortal92', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 92,        │ │
│ │                    'docs': []}, {'name': 'Mortal93',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 93, 'docs': []}, {'name':      │ │
│ │                    'Mortal94', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 94, 'docs': []},         │ │
│ │                    {'name': 'Mortal95', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 95,        │ │
│ │                    'docs': []}, {'name': 'Mortal96',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 96, 'docs': []}, {'name':      │ │
│ │                    'Mortal97', 'fields': [{'name': None,   │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 97, 'docs': []},         │ │
│ │                    {'name': 'Mortal98', 'fields':          │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 98,        │ │
│ │                    'docs': []}, {'name': 'Mortal99',       │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 99, 'docs': []}, {'name':      │ │
│ │                    'Mortal100', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 100, 'docs': []},        │ │
│ │                    {'name': 'Mortal101', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 101,       │ │
│ │                    'docs': []}, {'name': 'Mortal102',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 102, 'docs': []}, {'name':     │ │
│ │                    'Mortal103', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 103, 'docs': []},        │ │
│ │                    {'name': 'Mortal104', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 104,       │ │
│ │                    'docs': []}, {'name': 'Mortal105',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 105, 'docs': []}, {'name':     │ │
│ │                    'Mortal106', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 106, 'docs': []},        │ │
│ │                    {'name': 'Mortal107', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 107,       │ │
│ │                    'docs': []}, {'name': 'Mortal108',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 108, 'docs': []}, {'name':     │ │
│ │                    'Mortal109', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 109, 'docs': []},        │ │
│ │                    {'name': 'Mortal110', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 110,       │ │
│ │                    'docs': []}, {'name': 'Mortal111',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 111, 'docs': []}, {'name':     │ │
│ │                    'Mortal112', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 112, 'docs': []},        │ │
│ │                    {'name': 'Mortal113', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 113,       │ │
│ │                    'docs': []}, {'name': 'Mortal114',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 114, 'docs': []}, {'name':     │ │
│ │                    'Mortal115', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 115, 'docs': []},        │ │
│ │                    {'name': 'Mortal116', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 116,       │ │
│ │                    'docs': []}, {'name': 'Mortal117',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 117, 'docs': []}, {'name':     │ │
│ │                    'Mortal118', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 118, 'docs': []},        │ │
│ │                    {'name': 'Mortal119', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 119,       │ │
│ │                    'docs': []}, {'name': 'Mortal120',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 120, 'docs': []}, {'name':     │ │
│ │                    'Mortal121', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 121, 'docs': []},        │ │
│ │                    {'name': 'Mortal122', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 122,       │ │
│ │                    'docs': []}, {'name': 'Mortal123',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 123, 'docs': []}, {'name':     │ │
│ │                    'Mortal124', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 124, 'docs': []},        │ │
│ │                    {'name': 'Mortal125', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 125,       │ │
│ │                    'docs': []}, {'name': 'Mortal126',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 126, 'docs': []}, {'name':     │ │
│ │                    'Mortal127', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 127, 'docs': []},        │ │
│ │                    {'name': 'Mortal128', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 128,       │ │
│ │                    'docs': []}, {'name': 'Mortal129',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 129, 'docs': []}, {'name':     │ │
│ │                    'Mortal130', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 130, 'docs': []},        │ │
│ │                    {'name': 'Mortal131', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 131,       │ │
│ │                    'docs': []}, {'name': 'Mortal132',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 132, 'docs': []}, {'name':     │ │
│ │                    'Mortal133', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 133, 'docs': []},        │ │
│ │                    {'name': 'Mortal134', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 134,       │ │
│ │                    'docs': []}, {'name': 'Mortal135',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 135, 'docs': []}, {'name':     │ │
│ │                    'Mortal136', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 136, 'docs': []},        │ │
│ │                    {'name': 'Mortal137', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 137,       │ │
│ │                    'docs': []}, {'name': 'Mortal138',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 138, 'docs': []}, {'name':     │ │
│ │                    'Mortal139', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 139, 'docs': []},        │ │
│ │                    {'name': 'Mortal140', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 140,       │ │
│ │                    'docs': []}, {'name': 'Mortal141',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 141, 'docs': []}, {'name':     │ │
│ │                    'Mortal142', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 142, 'docs': []},        │ │
│ │                    {'name': 'Mortal143', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 143,       │ │
│ │                    'docs': []}, {'name': 'Mortal144',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 144, 'docs': []}, {'name':     │ │
│ │                    'Mortal145', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 145, 'docs': []},        │ │
│ │                    {'name': 'Mortal146', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 146,       │ │
│ │                    'docs': []}, {'name': 'Mortal147',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 147, 'docs': []}, {'name':     │ │
│ │                    'Mortal148', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 148, 'docs': []},        │ │
│ │                    {'name': 'Mortal149', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 149,       │ │
│ │                    'docs': []}, {'name': 'Mortal150',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 150, 'docs': []}, {'name':     │ │
│ │                    'Mortal151', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 151, 'docs': []},        │ │
│ │                    {'name': 'Mortal152', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 152,       │ │
│ │                    'docs': []}, {'name': 'Mortal153',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 153, 'docs': []}, {'name':     │ │
│ │                    'Mortal154', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 154, 'docs': []},        │ │
│ │                    {'name': 'Mortal155', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 155,       │ │
│ │                    'docs': []}, {'name': 'Mortal156',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 156, 'docs': []}, {'name':     │ │
│ │                    'Mortal157', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 157, 'docs': []},        │ │
│ │                    {'name': 'Mortal158', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 158,       │ │
│ │                    'docs': []}, {'name': 'Mortal159',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 159, 'docs': []}, {'name':     │ │
│ │                    'Mortal160', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 160, 'docs': []},        │ │
│ │                    {'name': 'Mortal161', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 161,       │ │
│ │                    'docs': []}, {'name': 'Mortal162',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 162, 'docs': []}, {'name':     │ │
│ │                    'Mortal163', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 163, 'docs': []},        │ │
│ │                    {'name': 'Mortal164', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 164,       │ │
│ │                    'docs': []}, {'name': 'Mortal165',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 165, 'docs': []}, {'name':     │ │
│ │                    'Mortal166', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 166, 'docs': []},        │ │
│ │                    {'name': 'Mortal167', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 167,       │ │
│ │                    'docs': []}, {'name': 'Mortal168',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 168, 'docs': []}, {'name':     │ │
│ │                    'Mortal169', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 169, 'docs': []},        │ │
│ │                    {'name': 'Mortal170', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 170,       │ │
│ │                    'docs': []}, {'name': 'Mortal171',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 171, 'docs': []}, {'name':     │ │
│ │                    'Mortal172', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 172, 'docs': []},        │ │
│ │                    {'name': 'Mortal173', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 173,       │ │
│ │                    'docs': []}, {'name': 'Mortal174',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 174, 'docs': []}, {'name':     │ │
│ │                    'Mortal175', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 175, 'docs': []},        │ │
│ │                    {'name': 'Mortal176', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 176,       │ │
│ │                    'docs': []}, {'name': 'Mortal177',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 177, 'docs': []}, {'name':     │ │
│ │                    'Mortal178', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 178, 'docs': []},        │ │
│ │                    {'name': 'Mortal179', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 179,       │ │
│ │                    'docs': []}, {'name': 'Mortal180',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 180, 'docs': []}, {'name':     │ │
│ │                    'Mortal181', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 181, 'docs': []},        │ │
│ │                    {'name': 'Mortal182', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 182,       │ │
│ │                    'docs': []}, {'name': 'Mortal183',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 183, 'docs': []}, {'name':     │ │
│ │                    'Mortal184', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 184, 'docs': []},        │ │
│ │                    {'name': 'Mortal185', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 185,       │ │
│ │                    'docs': []}, {'name': 'Mortal186',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 186, 'docs': []}, {'name':     │ │
│ │                    'Mortal187', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 187, 'docs': []},        │ │
│ │                    {'name': 'Mortal188', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 188,       │ │
│ │                    'docs': []}, {'name': 'Mortal189',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 189, 'docs': []}, {'name':     │ │
│ │                    'Mortal190', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 190, 'docs': []},        │ │
│ │                    {'name': 'Mortal191', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 191,       │ │
│ │                    'docs': []}, {'name': 'Mortal192',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 192, 'docs': []}, {'name':     │ │
│ │                    'Mortal193', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 193, 'docs': []},        │ │
│ │                    {'name': 'Mortal194', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 194,       │ │
│ │                    'docs': []}, {'name': 'Mortal195',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 195, 'docs': []}, {'name':     │ │
│ │                    'Mortal196', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 196, 'docs': []},        │ │
│ │                    {'name': 'Mortal197', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 197,       │ │
│ │                    'docs': []}, {'name': 'Mortal198',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 198, 'docs': []}, {'name':     │ │
│ │                    'Mortal199', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 199, 'docs': []},        │ │
│ │                    {'name': 'Mortal200', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 200,       │ │
│ │                    'docs': []}, {'name': 'Mortal201',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 201, 'docs': []}, {'name':     │ │
│ │                    'Mortal202', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 202, 'docs': []},        │ │
│ │                    {'name': 'Mortal203', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 203,       │ │
│ │                    'docs': []}, {'name': 'Mortal204',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 204, 'docs': []}, {'name':     │ │
│ │                    'Mortal205', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 205, 'docs': []},        │ │
│ │                    {'name': 'Mortal206', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 206,       │ │
│ │                    'docs': []}, {'name': 'Mortal207',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 207, 'docs': []}, {'name':     │ │
│ │                    'Mortal208', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 208, 'docs': []},        │ │
│ │                    {'name': 'Mortal209', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 209,       │ │
│ │                    'docs': []}, {'name': 'Mortal210',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 210, 'docs': []}, {'name':     │ │
│ │                    'Mortal211', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 211, 'docs': []},        │ │
│ │                    {'name': 'Mortal212', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 212,       │ │
│ │                    'docs': []}, {'name': 'Mortal213',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 213, 'docs': []}, {'name':     │ │
│ │                    'Mortal214', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 214, 'docs': []},        │ │
│ │                    {'name': 'Mortal215', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 215,       │ │
│ │                    'docs': []}, {'name': 'Mortal216',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 216, 'docs': []}, {'name':     │ │
│ │                    'Mortal217', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 217, 'docs': []},        │ │
│ │                    {'name': 'Mortal218', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 218,       │ │
│ │                    'docs': []}, {'name': 'Mortal219',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 219, 'docs': []}, {'name':     │ │
│ │                    'Mortal220', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 220, 'docs': []},        │ │
│ │                    {'name': 'Mortal221', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 221,       │ │
│ │                    'docs': []}, {'name': 'Mortal222',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 222, 'docs': []}, {'name':     │ │
│ │                    'Mortal223', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 223, 'docs': []},        │ │
│ │                    {'name': 'Mortal224', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 224,       │ │
│ │                    'docs': []}, {'name': 'Mortal225',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 225, 'docs': []}, {'name':     │ │
│ │                    'Mortal226', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 226, 'docs': []},        │ │
│ │                    {'name': 'Mortal227', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 227,       │ │
│ │                    'docs': []}, {'name': 'Mortal228',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 228, 'docs': []}, {'name':     │ │
│ │                    'Mortal229', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 229, 'docs': []},        │ │
│ │                    {'name': 'Mortal230', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 230,       │ │
│ │                    'docs': []}, {'name': 'Mortal231',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 231, 'docs': []}, {'name':     │ │
│ │                    'Mortal232', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 232, 'docs': []},        │ │
│ │                    {'name': 'Mortal233', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 233,       │ │
│ │                    'docs': []}, {'name': 'Mortal234',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 234, 'docs': []}, {'name':     │ │
│ │                    'Mortal235', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 235, 'docs': []},        │ │
│ │                    {'name': 'Mortal236', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 236,       │ │
│ │                    'docs': []}, {'name': 'Mortal237',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 237, 'docs': []}, {'name':     │ │
│ │                    'Mortal238', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 238, 'docs': []},        │ │
│ │                    {'name': 'Mortal239', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 239,       │ │
│ │                    'docs': []}, {'name': 'Mortal240',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 240, 'docs': []}, {'name':     │ │
│ │                    'Mortal241', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 241, 'docs': []},        │ │
│ │                    {'name': 'Mortal242', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 242,       │ │
│ │                    'docs': []}, {'name': 'Mortal243',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 243, 'docs': []}, {'name':     │ │
│ │                    'Mortal244', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 244, 'docs': []},        │ │
│ │                    {'name': 'Mortal245', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 245,       │ │
│ │                    'docs': []}, {'name': 'Mortal246',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 246, 'docs': []}, {'name':     │ │
│ │                    'Mortal247', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 247, 'docs': []},        │ │
│ │                    {'name': 'Mortal248', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 248,       │ │
│ │                    'docs': []}, {'name': 'Mortal249',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 249, 'docs': []}, {'name':     │ │
│ │                    'Mortal250', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 250, 'docs': []},        │ │
│ │                    {'name': 'Mortal251', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 251,       │ │
│ │                    'docs': []}, {'name': 'Mortal252',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 252, 'docs': []}, {'name':     │ │
│ │                    'Mortal253', 'fields': [{'name': None,  │ │
│ │                    'type': 2, 'typeName': None, 'docs':    │ │
│ │                    []}], 'index': 253, 'docs': []},        │ │
│ │                    {'name': 'Mortal254', 'fields':         │ │
│ │                    [{'name': None, 'type': 2, 'typeName':  │ │
│ │                    None, 'docs': []}], 'index': 254,       │ │
│ │                    'docs': []}, {'name': 'Mortal255',      │ │
│ │                    'fields': [{'name': None, 'type': 2,    │ │
│ │                    'typeName': None, 'docs': []}],         │ │
│ │                    'index': 255, 'docs': []}]}}, 'docs':   │ │
│ │                    []}}, {'id': 225, 'type': {'path':      │ │
│ │                    ['frame_system', 'extensions',          │ │
│ │                    'check_nonce', 'CheckNonce'], 'params': │ │
│ │                    [{'name': 'T', 'type': None}], 'def':   │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 59, 'typeName':           │ │
│ │                    'T::Nonce', 'docs': []}]}}, 'docs':     │ │
│ │                    []}}, {'id': 226, 'type': {'path':      │ │
│ │                    ['frame_system', 'extensions',          │ │
│ │                    'check_weight', 'CheckWeight'],         │ │
│ │                    'params': [{'name': 'T', 'type':        │ │
│ │                    None}], 'def': {'composite': {'fields': │ │
│ │                    []}}, 'docs': []}}, {'id': 227, 'type': │ │
│ │                    {'path': ['pallet_transaction_payment', │ │
│ │                    'ChargeTransactionPayment'], 'params':  │ │
│ │                    [{'name': 'T', 'type': None}], 'def':   │ │
│ │                    {'composite': {'fields': [{'name':      │ │
│ │                    None, 'type': 12, 'typeName':           │ │
│ │                    'BalanceOf<T>', 'docs': []}]}}, 'docs': │ │
│ │                    []}}]}, 'pallets': [{'name': 'System',  │ │
│ │                    'storage': {'prefix': 'System',         │ │
│ │                    'entries': [{'name': 'Account',         │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Blake2_128Concat'],       │ │
│ │                    'key': 0, 'value': 3}}, 'default':      │ │
│ │                    '0x00000000000000000000000000000000000… │ │
│ │                    'documentation': [' The full account    │ │
│ │                    information for a particular account    │ │
│ │                    ID.']}, {'name': 'ExtrinsicCount',      │ │
│ │                    'modifier': 'Optional', 'type':         │ │
│ │                    {'Plain': 4}, 'default': '\x00',        │ │
│ │                    'documentation': [' Total extrinsics    │ │
│ │                    count for the current block.']},        │ │
│ │                    {'name': 'InherentsApplied',            │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 9}, 'default': '\x00',        │ │
│ │                    'documentation': [' Whether all         │ │
│ │                    inherents have been applied.']},        │ │
│ │                    {'name': 'BlockWeight', 'modifier':     │ │
│ │                    'Default', 'type': {'Plain': 10},       │ │
│ │                    'default': '\x00\x00\x00\x00\x00\x00',  │ │
│ │                    'documentation': [' The current weight  │ │
│ │                    for the block.']}, {'name':             │ │
│ │                    'AllExtrinsicsLen', 'modifier':         │ │
│ │                    'Optional', 'type': {'Plain': 4},       │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    Total length (in bytes) for all         │ │
│ │                    extrinsics put together, for the        │ │
│ │                    current block.']}, {'name':             │ │
│ │                    'BlockHash', 'modifier': 'Default',     │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Twox64Concat'], 'key': 6, 'value':    │ │
│ │                    13}}, 'default':                        │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00\x00\… │ │
│ │                    'documentation': [' Map of block        │ │
│ │                    numbers to block hashes.']}, {'name':   │ │
│ │                    'ExtrinsicData', 'modifier': 'Default', │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Twox64Concat'], 'key': 4, 'value':    │ │
│ │                    14}}, 'default': '\x00',                │ │
│ │                    'documentation': [" Extrinsics data for │ │
│ │                    the current block (maps an extrinsic's  │ │
│ │                    index to its data)."]}, {'name':        │ │
│ │                    'Number', 'modifier': 'Default',        │ │
│ │                    'type': {'Plain': 6}, 'default':        │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' The current block   │ │
│ │                    number being processed. Set by          │ │
│ │                    `execute_block`.']}, {'name':           │ │
│ │                    'ParentHash', 'modifier': 'Default',    │ │
│ │                    'type': {'Plain': 13}, 'default':       │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00\x00\… │ │
│ │                    'documentation': [' Hash of the         │ │
│ │                    previous block.']}, {'name': 'Digest',  │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 15}, 'default': '\x00',       │ │
│ │                    'documentation': [' Digest of the       │ │
│ │                    current block, also part of the block   │ │
│ │                    header.']}, {'name': 'Events',          │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 19}, 'default': '\x00',       │ │
│ │                    'documentation': [' Events deposited    │ │
│ │                    for the current block.', '', ' NOTE:    │ │
│ │                    The item is unbound and should          │ │
│ │                    therefore never be read on chain.', '   │ │
│ │                    It could otherwise inflate the PoV size │ │
│ │                    of a block.', '', ' Events have a large │ │
│ │                    in-memory size. Box the events to not   │ │
│ │                    go out-of-memory', ' just in case       │ │
│ │                    someone still reads them from within    │ │
│ │                    the runtime.']}, {'name': 'EventCount', │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 4}, 'default':                │ │
│ │                    '\x00\x00\x00\x00', 'documentation': [' │ │
│ │                    The number of events in the `Events<T>` │ │
│ │                    list.']}, {'name': 'EventTopics',       │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Blake2_128Concat'],       │ │
│ │                    'key': 13, 'value': 56}}, 'default':    │ │
│ │                    '\x00', 'documentation': [' Mapping     │ │
│ │                    between a topic (represented by         │ │
│ │                    T::Hash) and a vector of indexes', ' of │ │
│ │                    events in the `<Events<T>>` list.', '', │ │
│ │                    ' All topic vectors have deterministic  │ │
│ │                    storage locations depending on the      │ │
│ │                    topic. This', ' allows light-clients to │ │
│ │                    leverage the changes trie storage       │ │
│ │                    tracking mechanism and', ' in case of   │ │
│ │                    changes fetch the list of events of     │ │
│ │                    interest.', '', ' The value has the     │ │
│ │                    type `(BlockNumberFor<T>, EventIndex)`  │ │
│ │                    because if we used only just', ' the    │ │
│ │                    `EventIndex` then in case if the topic  │ │
│ │                    has the same contents on the next       │ │
│ │                    block', ' no notification will be       │ │
│ │                    triggered thus the event might be       │ │
│ │                    lost.']}, {'name':                      │ │
│ │                    'LastRuntimeUpgrade', 'modifier':       │ │
│ │                    'Optional', 'type': {'Plain': 58},      │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    Stores the `spec_version` and           │ │
│ │                    `spec_name` of when the last runtime    │ │
│ │                    upgrade happened.']}, {'name':          │ │
│ │                    'UpgradedToU32RefCount', 'modifier':    │ │
│ │                    'Default', 'type': {'Plain': 9},        │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    True if we have upgraded so that `type  │ │
│ │                    RefCount` is `u32`. False (default) if  │ │
│ │                    not.']}, {'name':                       │ │
│ │                    'UpgradedToTripleRefCount', 'modifier': │ │
│ │                    'Default', 'type': {'Plain': 9},        │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    True if we have upgraded so that        │ │
│ │                    AccountInfo contains three types of     │ │
│ │                    `RefCount`. False', ' (default) if      │ │
│ │                    not.']}, {'name': 'ExecutionPhase',     │ │
│ │                    'modifier': 'Optional', 'type':         │ │
│ │                    {'Plain': 54}, 'default': '\x00',       │ │
│ │                    'documentation': [' The execution phase │ │
│ │                    of the block.']}, {'name':              │ │
│ │                    'AuthorizedUpgrade', 'modifier':        │ │
│ │                    'Optional', 'type': {'Plain': 61},      │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    `Some` if a code upgrade has been       │ │
│ │                    authorized.']}]}, 'calls': {'ty': 62},  │ │
│ │                    'event': {'ty': 22}, 'constants':       │ │
│ │                    [{'name': 'BlockWeights', 'type': 66,   │ │
│ │                    'value':                                │ │
│ │                    '0x624d186c000b00204aa9d10113fffffffff… │ │
│ │                    'documentation': [' Block & extrinsics  │ │
│ │                    weights: base values and limits.']},    │ │
│ │                    {'name': 'BlockLength', 'type': 70,     │ │
│ │                    'value': '0x000078000000a0000000a000',  │ │
│ │                    'documentation': [' The maximum length  │ │
│ │                    of a block (in bytes).']}, {'name':     │ │
│ │                    'BlockHashCount', 'type': 6, 'value':   │ │
│ │                    '`\t\x00\x00\x00\x00\x00\x00',          │ │
│ │                    'documentation': [' Maximum number of   │ │
│ │                    block number to block hash mappings to  │ │
│ │                    keep (oldest pruned first).']},         │ │
│ │                    {'name': 'DbWeight', 'type': 72,        │ │
│ │                    'value':                                │ │
│ │                    '0x40787d010000000000e1f50500000000',   │ │
│ │                    'documentation': [' The weight of       │ │
│ │                    runtime database operations the runtime │ │
│ │                    can invoke.']}, {'name': 'Version',     │ │
│ │                    'type': 73, 'value':                    │ │
│ │                    '0x346e6f64652d7375627370616365346e6f6… │ │
│ │                    'documentation': [" Get the chain's     │ │
│ │                    in-code version."]}, {'name':           │ │
│ │                    'SS58Prefix', 'type': 46, 'value':      │ │
│ │                    '*\x00', 'documentation': [' The        │ │
│ │                    designated SS58 prefix of this chain.', │ │
│ │                    '', ' This replaces the "ss58Format"    │ │
│ │                    property declared in the chain spec.    │ │
│ │                    Reason is', ' that the runtime should   │ │
│ │                    know about the prefix in order to make  │ │
│ │                    use of it as', ' an identifier of the   │ │
│ │                    chain.']}], 'error': {'ty': 78},        │ │
│ │                    'index': 0}, {'name': 'Timestamp',      │ │
│ │                    'storage': {'prefix': 'Timestamp',      │ │
│ │                    'entries': [{'name': 'Now', 'modifier': │ │
│ │                    'Default', 'type': {'Plain': 6},        │ │
│ │                    'default':                              │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' The current time    │ │
│ │                    for the current block.']}, {'name':     │ │
│ │                    'DidUpdate', 'modifier': 'Default',     │ │
│ │                    'type': {'Plain': 9}, 'default':        │ │
│ │                    '\x00', 'documentation': [' Whether the │ │
│ │                    timestamp has been updated in this      │ │
│ │                    block.', '', ' This value is updated to │ │
│ │                    `true` upon successful submission of a  │ │
│ │                    timestamp by a node.', ' It is then     │ │
│ │                    checked at the end of each block        │ │
│ │                    execution in the `on_finalize`          │ │
│ │                    hook.']}]}, 'calls': {'ty': 79},        │ │
│ │                    'event': None, 'constants': [{'name':   │ │
│ │                    'MinimumPeriod', 'type': 6, 'value':    │ │
│ │                    '0xa00f000000000000', 'documentation':  │ │
│ │                    [' The minimum period between blocks.', │ │
│ │                    '', ' Be aware that this is different   │ │
│ │                    to the *expected* period that the block │ │
│ │                    production', ' apparatus provides. Your │ │
│ │                    chosen consensus system will generally  │ │
│ │                    work with this to', ' determine a       │ │
│ │                    sensible block time. For example, in    │ │
│ │                    the Aura pallet it will be double       │ │
│ │                    this', ' period on default              │ │
│ │                    settings.']}], 'error': None, 'index':  │ │
│ │                    1}, {'name': 'Aura', 'storage':         │ │
│ │                    {'prefix': 'Aura', 'entries': [{'name': │ │
│ │                    'Authorities', 'modifier': 'Default',   │ │
│ │                    'type': {'Plain': 80}, 'default':       │ │
│ │                    '\x00', 'documentation': [' The current │ │
│ │                    authority set.']}, {'name':             │ │
│ │                    'CurrentSlot', 'modifier': 'Default',   │ │
│ │                    'type': {'Plain': 83}, 'default':       │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' The current slot of │ │
│ │                    this block.', '', ' This will be set in │ │
│ │                    `on_initialize`.']}]}, 'calls': None,   │ │
│ │                    'event': None, 'constants': [{'name':   │ │
│ │                    'SlotDuration', 'type': 6, 'value':     │ │
│ │                    '@\x1f\x00\x00\x00\x00\x00\x00',        │ │
│ │                    'documentation': [' The slot duration   │ │
│ │                    Aura should run with, expressed in      │ │
│ │                    milliseconds.', ' The effective value   │ │
│ │                    of this type should not change while    │ │
│ │                    the chain is running.', '', ' For       │ │
│ │                    backwards compatibility either use      │ │
│ │                    [`MinimumPeriodTimesTwo`] or a          │ │
│ │                    const.']}], 'error': None, 'index': 2}, │ │
│ │                    {'name': 'Grandpa', 'storage':          │ │
│ │                    {'prefix': 'Grandpa', 'entries':        │ │
│ │                    [{'name': 'State', 'modifier':          │ │
│ │                    'Default', 'type': {'Plain': 84},       │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    State of the current authority set.']}, │ │
│ │                    {'name': 'PendingChange', 'modifier':   │ │
│ │                    'Optional', 'type': {'Plain': 85},      │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    Pending change: (signaled at, scheduled │ │
│ │                    change).']}, {'name': 'NextForced',     │ │
│ │                    'modifier': 'Optional', 'type':         │ │
│ │                    {'Plain': 6}, 'default': '\x00',        │ │
│ │                    'documentation': [' next block number   │ │
│ │                    where we can force a change.']},        │ │
│ │                    {'name': 'Stalled', 'modifier':         │ │
│ │                    'Optional', 'type': {'Plain': 88},      │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    `true` if we are currently stalled.']}, │ │
│ │                    {'name': 'CurrentSetId', 'modifier':    │ │
│ │                    'Default', 'type': {'Plain': 6},        │ │
│ │                    'default':                              │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' The number of       │ │
│ │                    changes (both in terms of keys and      │ │
│ │                    underlying economic responsibilities)', │ │
│ │                    ' in the "set" of Grandpa validators    │ │
│ │                    from genesis.']}, {'name':              │ │
│ │                    'SetIdSession', 'modifier': 'Optional', │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Twox64Concat'], 'key': 6, 'value':    │ │
│ │                    4}}, 'default': '\x00',                 │ │
│ │                    'documentation': [' A mapping from      │ │
│ │                    grandpa set ID to the index of the      │ │
│ │                    *most recent* session for which its', ' │ │
│ │                    members were responsible.', '', ' This  │ │
│ │                    is only used for validating             │ │
│ │                    equivocation proofs. An equivocation    │ │
│ │                    proof must', ' contains a key-ownership │ │
│ │                    proof for a given session, therefore we │ │
│ │                    need a way to tie', ' together sessions │ │
│ │                    and GRANDPA set ids, i.e. we need to    │ │
│ │                    validate that a validator', ' was the   │ │
│ │                    owner of a given key on a given         │ │
│ │                    session, and what the active set ID     │ │
│ │                    was', ' during that session.', '', '    │ │
│ │                    TWOX-NOTE: `SetId` is not under user    │ │
│ │                    control.']}, {'name': 'Authorities',    │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 86}, 'default': '\x00',       │ │
│ │                    'documentation': [' The current list of │ │
│ │                    authorities.']}]}, 'calls': {'ty': 89}, │ │
│ │                    'event': {'ty': 31}, 'constants':       │ │
│ │                    [{'name': 'MaxAuthorities', 'type': 4,  │ │
│ │                    'value': '0x80000000', 'documentation': │ │
│ │                    [' Max Authorities in use']}, {'name':  │ │
│ │                    'MaxNominators', 'type': 4, 'value':    │ │
│ │                    '0xc8000000', 'documentation': [' The   │ │
│ │                    maximum number of nominators for each   │ │
│ │                    validator.']}, {'name':                 │ │
│ │                    'MaxSetIdSessionEntries', 'type': 6,    │ │
│ │                    'value':                                │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' The maximum number  │ │
│ │                    of entries to keep in the set id to     │ │
│ │                    session index mapping.', '', ' Since    │ │
│ │                    the `SetIdSession` map is only used for │ │
│ │                    validating equivocations this', ' value │ │
│ │                    should relate to the bonding duration   │ │
│ │                    of whatever staking system is', ' being │ │
│ │                    used (if any). If equivocation handling │ │
│ │                    is not enabled then this value', ' can  │ │
│ │                    be zero.']}], 'error': {'ty': 101},     │ │
│ │                    'index': 3}, {'name': 'Balances',       │ │
│ │                    'storage': {'prefix': 'Balances',       │ │
│ │                    'entries': [{'name': 'TotalIssuance',   │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 6}, 'default':                │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' The total units     │ │
│ │                    issued in the system.']}, {'name':      │ │
│ │                    'InactiveIssuance', 'modifier':         │ │
│ │                    'Default', 'type': {'Plain': 6},        │ │
│ │                    'default':                              │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' The total units of  │ │
│ │                    outstanding deactivated balance in the  │ │
│ │                    system.']}, {'name': 'Account',         │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Blake2_128Concat'],       │ │
│ │                    'key': 0, 'value': 5}}, 'default':      │ │
│ │                    '0x00000000000000000000000000000000000… │ │
│ │                    'documentation': [' The Balances pallet │ │
│ │                    example of storing the balance of an    │ │
│ │                    account.', '', ' # Example', '', '      │ │
│ │                    ```nocompile', '  impl                  │ │
│ │                    pallet_balances::Config for Runtime {', │ │
│ │                    '    type AccountStore =                │ │
│ │                    StorageMapShim<Self::Account<Runtime>,  │ │
│ │                    frame_system::Provider<Runtime>,        │ │
│ │                    AccountId,                              │ │
│ │                    Self::AccountData<Balance>>', '  }', '  │ │
│ │                    ```', '', ' You can also store the      │ │
│ │                    balance of an account in the `System`   │ │
│ │                    pallet.', '', ' # Example', '', '       │ │
│ │                    ```nocompile', '  impl                  │ │
│ │                    pallet_balances::Config for Runtime {', │ │
│ │                    '   type AccountStore = System', '  }', │ │
│ │                    ' ```', '', ' But this comes with       │ │
│ │                    tradeoffs, storing account balances in  │ │
│ │                    the system pallet stores', '            │ │
│ │                    `frame_system` data alongside the       │ │
│ │                    account data contrary to storing        │ │
│ │                    account balances in the', ' `Balances`  │ │
│ │                    pallet, which uses a `StorageMap` to    │ │
│ │                    store balances data only.', ' NOTE:     │ │
│ │                    This is only used in the case that this │ │
│ │                    pallet is used to store balances.']},   │ │
│ │                    {'name': 'Locks', 'modifier':           │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Blake2_128Concat'], 'key': 0,         │ │
│ │                    'value': 102}}, 'default': '\x00',      │ │
│ │                    'documentation': [' Any liquidity locks │ │
│ │                    on some account balances.', ' NOTE:     │ │
│ │                    Should only be accessed when setting,   │ │
│ │                    changing and freeing a lock.', '', '    │ │
│ │                    Use of locks is deprecated in favour of │ │
│ │                    freezes. See                            │ │
│ │                    `https://github.com/paritytech/substra… │ │
│ │                    {'name': 'Reserves', 'modifier':        │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Blake2_128Concat'], 'key': 0,         │ │
│ │                    'value': 106}}, 'default': '\x00',      │ │
│ │                    'documentation': [' Named reserves on   │ │
│ │                    some account balances.', '', ' Use of   │ │
│ │                    reserves is deprecated in favour of     │ │
│ │                    holds. See                              │ │
│ │                    `https://github.com/paritytech/substra… │ │
│ │                    {'name': 'Holds', 'modifier':           │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Blake2_128Concat'], 'key': 0,         │ │
│ │                    'value': 109}}, 'default': '\x00',      │ │
│ │                    'documentation': [' Holds on account    │ │
│ │                    balances.']}, {'name': 'Freezes',       │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Blake2_128Concat'],       │ │
│ │                    'key': 0, 'value': 112}}, 'default':    │ │
│ │                    '\x00', 'documentation': [' Freeze      │ │
│ │                    locks on account balances.']}]},        │ │
│ │                    'calls': {'ty': 113}, 'event': {'ty':   │ │
│ │                    35}, 'constants': [{'name':             │ │
│ │                    'ExistentialDeposit', 'type': 6,        │ │
│ │                    'value': '0xf401000000000000',          │ │
│ │                    'documentation': [' The minimum amount  │ │
│ │                    required to keep an account open. MUST  │ │
│ │                    BE GREATER THAN ZERO!', '', ' If you    │ │
│ │                    *really* need it to be zero, you can    │ │
│ │                    enable the feature `insecure_zero_ed`   │ │
│ │                    for', ' this pallet. However, you do so │ │
│ │                    at your own risk: this will open up a   │ │
│ │                    major DoS vector.', ' In case you have  │ │
│ │                    multiple sources of provider            │ │
│ │                    references, you may also get            │ │
│ │                    unexpected', ' behaviour if you set     │ │
│ │                    this to zero.', '', ' Bottom line: Do   │ │
│ │                    yourself a favour and make it at least  │ │
│ │                    one!']}, {'name': 'MaxLocks', 'type':   │ │
│ │                    4, 'value': '2\x00\x00\x00',            │ │
│ │                    'documentation': [' The maximum number  │ │
│ │                    of locks that should exist on an        │ │
│ │                    account.', ' Not strictly enforced, but │ │
│ │                    used for weight estimation.', '', ' Use │ │
│ │                    of locks is deprecated in favour of     │ │
│ │                    freezes. See                            │ │
│ │                    `https://github.com/paritytech/substra… │ │
│ │                    {'name': 'MaxReserves', 'type': 4,      │ │
│ │                    'value': '\x00\x00\x00\x00',            │ │
│ │                    'documentation': [' The maximum number  │ │
│ │                    of named reserves that can exist on an  │ │
│ │                    account.', '', ' Use of reserves is     │ │
│ │                    deprecated in favour of holds. See      │ │
│ │                    `https://github.com/paritytech/substra… │ │
│ │                    {'name': 'MaxFreezes', 'type': 4,       │ │
│ │                    'value': '\x00\x00\x00\x00',            │ │
│ │                    'documentation': [' The maximum number  │ │
│ │                    of individual freeze locks that can     │ │
│ │                    exist on an account at any time.']}],   │ │
│ │                    'error': {'ty': 119}, 'index': 4},      │ │
│ │                    {'name': 'TransactionPayment',          │ │
│ │                    'storage': {'prefix':                   │ │
│ │                    'TransactionPayment', 'entries':        │ │
│ │                    [{'name': 'NextFeeMultiplier',          │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 120}, 'default':              │ │
│ │                    '0x000064a7b3b6e00d0000000000000000',   │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'StorageVersion', 'modifier':           │ │
│ │                    'Default', 'type': {'Plain': 121},      │ │
│ │                    'default': '\x00', 'documentation':     │ │
│ │                    []}]}, 'calls': None, 'event': {'ty':   │ │
│ │                    37}, 'constants': [{'name':             │ │
│ │                    'OperationalFeeMultiplier', 'type': 2,  │ │
│ │                    'value': '\x01', 'documentation': [' A  │ │
│ │                    fee multiplier for `Operational`        │ │
│ │                    extrinsics to compute "virtual tip" to  │ │
│ │                    boost their', ' `priority`', '', ' This │ │
│ │                    value is multiplied by the `final_fee`  │ │
│ │                    to obtain a "virtual tip" that is       │ │
│ │                    later', ' added to a tip component in   │ │
│ │                    regular `priority` calculations.', ' It │ │
│ │                    means that a `Normal` transaction can   │ │
│ │                    front-run a similarly-sized             │ │
│ │                    `Operational`', ' extrinsic (with no    │ │
│ │                    tip), by including a tip value greater  │ │
│ │                    than the virtual tip.', '', '           │ │
│ │                    ```rust,ignore', ' // For `Normal`', '  │ │
│ │                    let priority = priority_calc(tip);',    │ │
│ │                    '', ' // For `Operational`', ' let      │ │
│ │                    virtual_tip = (inclusion_fee + tip) *   │ │
│ │                    OperationalFeeMultiplier;', ' let       │ │
│ │                    priority = priority_calc(tip +          │ │
│ │                    virtual_tip);', ' ```', '', ' Note that │ │
│ │                    since we use `final_fee` the multiplier │ │
│ │                    applies also to the regular `tip`', '   │ │
│ │                    sent with the transaction. So, not only │ │
│ │                    does the transaction get a priority     │ │
│ │                    bump based', ' on the `inclusion_fee`,  │ │
│ │                    but we also amplify the impact of tips  │ │
│ │                    applied to `Operational`', '            │ │
│ │                    transactions.']}], 'error': None,       │ │
│ │                    'index': 5}, {'name': 'Sudo',           │ │
│ │                    'storage': {'prefix': 'Sudo',           │ │
│ │                    'entries': [{'name': 'Key', 'modifier': │ │
│ │                    'Optional', 'type': {'Plain': 0},       │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    The `AccountId` of the sudo key.']}]},  │ │
│ │                    'calls': {'ty': 122}, 'event': {'ty':   │ │
│ │                    38}, 'constants': [], 'error': {'ty':   │ │
│ │                    169}, 'index': 6}, {'name': 'Multisig', │ │
│ │                    'storage': {'prefix': 'Multisig',       │ │
│ │                    'entries': [{'name': 'Multisigs',       │ │
│ │                    'modifier': 'Optional', 'type': {'Map': │ │
│ │                    {'hashers': ['Twox64Concat',            │ │
│ │                    'Blake2_128Concat'], 'key': 170,        │ │
│ │                    'value': 171}}, 'default': '\x00',      │ │
│ │                    'documentation': [' The set of open     │ │
│ │                    multisig operations.']}]}, 'calls':     │ │
│ │                    {'ty': 124}, 'event': {'ty': 42},       │ │
│ │                    'constants': [{'name': 'DepositBase',   │ │
│ │                    'type': 6, 'value':                     │ │
│ │                    '0x00f36f0600000000', 'documentation':  │ │
│ │                    [' The base amount of currency needed   │ │
│ │                    to reserve for creating a multisig      │ │
│ │                    execution or to', ' store a dispatch    │ │
│ │                    call for later.', '', ' This is held    │ │
│ │                    for an additional storage item whose    │ │
│ │                    value size is', ' `4 +                  │ │
│ │                    sizeof((BlockNumber, Balance,           │ │
│ │                    AccountId))` bytes and whose key size   │ │
│ │                    is', ' `32 + sizeof(AccountId)`         │ │
│ │                    bytes.']}, {'name': 'DepositFactor',    │ │
│ │                    'type': 6, 'value':                     │ │
│ │                    '0x0048e80100000000', 'documentation':  │ │
│ │                    [' The amount of currency needed per    │ │
│ │                    unit threshold when creating a multisig │ │
│ │                    execution.', '', ' This is held for     │ │
│ │                    adding 32 bytes more into a             │ │
│ │                    pre-existing storage value.']},         │ │
│ │                    {'name': 'MaxSignatories', 'type': 4,   │ │
│ │                    'value': 'd\x00\x00\x00',               │ │
│ │                    'documentation': [' The maximum amount  │ │
│ │                    of signatories allowed in the           │ │
│ │                    multisig.']}], 'error': {'ty': 173},    │ │
│ │                    'index': 7}, {'name': 'Utility',        │ │
│ │                    'storage': None, 'calls': {'ty': 126},  │ │
│ │                    'event': {'ty': 44}, 'constants':       │ │
│ │                    [{'name': 'batched_calls_limit',        │ │
│ │                    'type': 4, 'value': '0xaa2a0000',       │ │
│ │                    'documentation': [' The limit on the    │ │
│ │                    number of batched calls.']}], 'error':  │ │
│ │                    {'ty': 174}, 'index': 8}, {'name':      │ │
│ │                    'SubspaceModule', 'storage': {'prefix': │ │
│ │                    'SubspaceModule', 'entries': [{'name':  │ │
│ │                    'Bonds', 'modifier': 'Default', 'type': │ │
│ │                    {'Map': {'hashers': ['Identity',        │ │
│ │                    'Identity'], 'key': 163, 'value':       │ │
│ │                    162}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'BondsMovingAverage', 'modifier':       │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value': 6}},  │ │
│ │                    'default': '0xa0bb0d0000000000',        │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'ValidatorPermits', 'modifier':         │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    175}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'ValidatorTrust', 'modifier':           │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    153}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'PruningScores', 'modifier': 'Default', │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    153}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'MaxAllowedValidators', 'modifier':     │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    137}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'Consensus', 'modifier': 'Default',     │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    153}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'Active', 'modifier': 'Default',        │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    175}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name': 'Rank',  │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 153}}, 'default': '\x00',      │ │
│ │                    'documentation': []}, {'name': 'Burn',  │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 6}}, 'default':                │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'MaximumSetWeightCallsPerEpoch',        │ │
│ │                    'modifier': 'Optional', 'type': {'Map': │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 46}}, 'default': '\x00',       │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'SetWeightCallsPerEpoch', 'modifier':   │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity', 'Identity'], 'key': 176,   │ │
│ │                    'value': 46}}, 'default': '\x00\x00',   │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'SubnetNames', 'modifier': 'Default',   │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity'], 'key': 46, 'value': 14}}, │ │
│ │                    'default': '\x00', 'documentation':     │ │
│ │                    []}, {'name': 'SubnetMetadata',         │ │
│ │                    'modifier': 'Optional', 'type': {'Map': │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 136}}, 'default': '\x00',      │ │
│ │                    'documentation': []}, {'name': 'N',     │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 46}}, 'default': '\x00\x00',   │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'Founder', 'modifier': 'Default',       │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity'], 'key': 46, 'value': 0}},  │ │
│ │                    'default':                              │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00\x00\… │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'IncentiveRatio', 'modifier':           │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value': 46}}, │ │
│ │                    'default': '2\x00', 'documentation':    │ │
│ │                    []}, {'name': 'ModuleBurnConfig',       │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 138}}, 'default':              │ │
│ │                    '0x00e40b5402000000005cb2ec22000000fff… │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'RegistrationsThisInterval',            │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 46}}, 'default': '\x00\x00',   │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'MaxEncryptionPeriod', 'modifier':      │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value': 87}}, │ │
│ │                    'default': '\x00', 'documentation':     │ │
│ │                    []}, {'name': 'CopierMargin',           │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 139}}, 'default':              │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00\x00\… │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'UseWeightsEncryption', 'modifier':     │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value': 9}},  │ │
│ │                    'default': '\x00', 'documentation':     │ │
│ │                    []}, {'name': 'AlphaValues',            │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 163}}, 'default':              │ │
│ │                    '0x33b366e6', 'documentation': []},     │ │
│ │                    {'name': 'MinValidatorStake',           │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 6}}, 'default':                │ │
│ │                    '0x00203d88792d0000', 'documentation':  │ │
│ │                    []}, {'name': 'MaxAllowedUids',         │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 46}}, 'default': '0xa401',     │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'ImmunityPeriod', 'modifier':           │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value': 46}}, │ │
│ │                    'default': '\x00\x00', 'documentation': │ │
│ │                    []}, {'name': 'MinAllowedWeights',      │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 46}}, 'default': '\x01\x00',   │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'MaxWeightAge', 'modifier': 'Default',  │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity'], 'key': 46, 'value': 6}},  │ │
│ │                    'default':                              │ │
│ │                    '\x10\x0e\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'MaxAllowedWeights', 'modifier':        │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value': 46}}, │ │
│ │                    'default': '0xa401', 'documentation':   │ │
│ │                    []}, {'name': 'Tempo', 'modifier':      │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value': 46}}, │ │
│ │                    'default': 'd\x00', 'documentation':    │ │
│ │                    []}, {'name': 'FounderShare',           │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 46}}, 'default': '\x10\x00',   │ │
│ │                    'documentation': []}, {'name': 'Uids',  │ │
│ │                    'modifier': 'Optional', 'type': {'Map': │ │
│ │                    {'hashers': ['Identity',                │ │
│ │                    'Blake2_128Concat'], 'key': 176,        │ │
│ │                    'value': 46}}, 'default': '\x00',       │ │
│ │                    'documentation': []}, {'name': 'Keys',  │ │
│ │                    'modifier': 'Optional', 'type': {'Map': │ │
│ │                    {'hashers': ['Identity', 'Identity'],   │ │
│ │                    'key': 163, 'value': 0}}, 'default':    │ │
│ │                    '\x00', 'documentation': []}, {'name':  │ │
│ │                    'Name', 'modifier': 'Default', 'type':  │ │
│ │                    {'Map': {'hashers': ['Twox64Concat',    │ │
│ │                    'Twox64Concat'], 'key': 163, 'value':   │ │
│ │                    14}}, 'default': '\x00',                │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'Address', 'modifier': 'Default',       │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Twox64Concat', 'Twox64Concat'],       │ │
│ │                    'key': 163, 'value': 14}}, 'default':   │ │
│ │                    '\x00', 'documentation': []}, {'name':  │ │
│ │                    'Metadata', 'modifier': 'Optional',     │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Twox64Concat', 'Twox64Concat'],       │ │
│ │                    'key': 176, 'value': 14}}, 'default':   │ │
│ │                    '\x00', 'documentation': []}, {'name':  │ │
│ │                    'Incentive', 'modifier': 'Default',     │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    153}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name': 'Trust', │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 153}}, 'default': '\x00',      │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'Dividends', 'modifier': 'Default',     │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    153}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'Emission', 'modifier': 'Default',      │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    131}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'LastUpdate', 'modifier': 'Default',    │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    131}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'SubnetRegistrationBlock', 'modifier':  │ │
│ │                    'Optional', 'type': {'Map': {'hashers': │ │
│ │                    ['Identity'], 'key': 46, 'value': 6}},  │ │
│ │                    'default': '\x00', 'documentation':     │ │
│ │                    []}, {'name': 'RegistrationBlock',      │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity', 'Identity'],   │ │
│ │                    'key': 163, 'value': 6}}, 'default':    │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': []}, {'name': 'Rho',   │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 46}, 'default': '\n\x00',     │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'RootNetWeightCalls', 'modifier':       │ │
│ │                    'Optional', 'type': {'Map': {'hashers': │ │
│ │                    ['Identity'], 'key': 46, 'value': 40}}, │ │
│ │                    'default': '\x00', 'documentation':     │ │
│ │                    []}, {'name': 'Kappa', 'modifier':      │ │
│ │                    'Default', 'type': {'Plain': 46},       │ │
│ │                    'default': '0xff7f', 'documentation':   │ │
│ │                    []}, {'name': 'MaxNameLength',          │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 46}, 'default': ' \x00',      │ │
│ │                    'documentation': [' Maximum allowed     │ │
│ │                    length for names']}, {'name':           │ │
│ │                    'MinNameLength', 'modifier': 'Default', │ │
│ │                    'type': {'Plain': 46}, 'default':       │ │
│ │                    '\x02\x00', 'documentation': [' Minimum │ │
│ │                    allowed length for names']}, {'name':   │ │
│ │                    'MaxAllowedSubnets', 'modifier':        │ │
│ │                    'Default', 'type': {'Plain': 46},       │ │
│ │                    'default': '\x00\x01', 'documentation': │ │
│ │                    [' Maximum number of allowed            │ │
│ │                    subnets']}, {'name':                    │ │
│ │                    'MaxAllowedModules', 'modifier':        │ │
│ │                    'Default', 'type': {'Plain': 46},       │ │
│ │                    'default': "\x10'", 'documentation': [' │ │
│ │                    Maximum allowed modules globally']},    │ │
│ │                    {'name': 'MinWeightStake', 'modifier':  │ │
│ │                    'Default', 'type': {'Plain': 6},        │ │
│ │                    'default':                              │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' Minimum stake       │ │
│ │                    weight']}, {'name':                     │ │
│ │                    'MaxAllowedWeightsGlobal', 'modifier':  │ │
│ │                    'Default', 'type': {'Plain': 46},       │ │
│ │                    'default': '\x00\x02', 'documentation': │ │
│ │                    [' Global maximum allowed weights']},   │ │
│ │                    {'name': 'RegistrationsPerBlock',       │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 46}, 'default': '\x00\x00',   │ │
│ │                    'documentation': [' Number of           │ │
│ │                    registrations in the current block']},  │ │
│ │                    {'name': 'MaxRegistrationsPerBlock',    │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 46}, 'default': '\n\x00',     │ │
│ │                    'documentation': [' Maximum allowed     │ │
│ │                    registrations per block']}, {'name':    │ │
│ │                    'StakeFrom', 'modifier': 'Default',     │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity', 'Identity'], 'key': 177,   │ │
│ │                    'value': 6}}, 'default':                │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' Maps (from_account, │ │
│ │                    to_account) to stake amount']},         │ │
│ │                    {'name': 'StakeTo', 'modifier':         │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity', 'Identity'], 'key': 177,   │ │
│ │                    'value': 6}}, 'default':                │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' Maps (to_account,   │ │
│ │                    from_account) to stake amount']},       │ │
│ │                    {'name': 'TotalStake', 'modifier':      │ │
│ │                    'Default', 'type': {'Plain': 6},        │ │
│ │                    'default':                              │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' Total stake in the  │ │
│ │                    system']}, {'name': 'SubnetGaps',       │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 178}, 'default': '\x00',      │ │
│ │                    'documentation': [' Available subnet    │ │
│ │                    IDs that can be reused']}, {'name':     │ │
│ │                    'FloorFounderShare', 'modifier':        │ │
│ │                    'Default', 'type': {'Plain': 2},        │ │
│ │                    'default': '\x08', 'documentation': ['  │ │
│ │                    Minimum share percentage for subnet     │ │
│ │                    founders']}, {'name':                   │ │
│ │                    'SubnetBurnConfig', 'modifier':         │ │
│ │                    'Default', 'type': {'Plain': 138},      │ │
│ │                    'default':                              │ │
│ │                    '0x00204aa9d101000000407a10f35a0000fff… │ │
│ │                    'documentation': [' General burn        │ │
│ │                    configuration for subnet                │ │
│ │                    registration']}, {'name':               │ │
│ │                    'SubnetRegistrationsThisInterval',      │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 46}, 'default': '\x00\x00',   │ │
│ │                    'documentation': [' Subnet              │ │
│ │                    registrations in current interval']},   │ │
│ │                    {'name': 'SubnetBurn', 'modifier':      │ │
│ │                    'Default', 'type': {'Plain': 6},        │ │
│ │                    'default': '0x00204aa9d1010000',        │ │
│ │                    'documentation': [' Minimum burn amount │ │
│ │                    for subnet registration']}, {'name':    │ │
│ │                    'MinimumAllowedStake', 'modifier':      │ │
│ │                    'Default', 'type': {'Plain': 6},        │ │
│ │                    'default': '0x0065cd1d00000000',        │ │
│ │                    'documentation': [' Global minimum      │ │
│ │                    allowed stake']}, {'name':              │ │
│ │                    'SubnetImmunityPeriod', 'modifier':     │ │
│ │                    'Default', 'type': {'Plain': 6},        │ │
│ │                    'default': '0x907e000000000000',        │ │
│ │                    'documentation': [' Subnet immunity     │ │
│ │                    period']}, {'name':                     │ │
│ │                    'WeightSettingDelegation', 'modifier':  │ │
│ │                    'Optional', 'type': {'Map': {'hashers': │ │
│ │                    ['Identity', 'Identity'], 'key': 176,   │ │
│ │                    'value': 0}}, 'default': '\x00',        │ │
│ │                    'documentation': [' Control delegation  │ │
│ │                    per account']}, {'name': 'Bridged',     │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 0,     │ │
│ │                    'value': 6}}, 'default':                │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'MinFees', 'modifier': 'Default',       │ │
│ │                    'type': {'Plain': 179}, 'default':      │ │
│ │                    '\x05\x04', 'documentation': [' Storage │ │
│ │                    for minimum fees that can be updated    │ │
│ │                    via runtime']}, {'name':                │ │
│ │                    'ValidatorFeeConfig', 'modifier':       │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 0, 'value': 180}}, │ │
│ │                    'default': '\x05\x04', 'documentation': │ │
│ │                    [' Maps validator accounts to their fee │ │
│ │                    configuration']}]}, 'calls': {'ty':     │ │
│ │                    130}, 'event': {'ty': 45}, 'constants': │ │
│ │                    [{'name': 'PalletId', 'type': 181,      │ │
│ │                    'value': 'py/subsp', 'documentation':   │ │
│ │                    [" This pallet's ID, used for           │ │
│ │                    generating the treasury account         │ │
│ │                    ID."]}], 'error': {'ty': 182}, 'index': │ │
│ │                    9}, {'name': 'GovernanceModule',        │ │
│ │                    'storage': {'prefix':                   │ │
│ │                    'GovernanceModule', 'entries':          │ │
│ │                    [{'name': 'SubnetGovernanceConfig',     │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 49}}, 'default':               │ │
│ │                    '0x00a0724e18090000d0fb0100000200a0724… │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'Proposals', 'modifier': 'Optional',    │ │
│ │                    'type': {'Map': {'hashers':             │ │
│ │                    ['Identity'], 'key': 6, 'value': 183}}, │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    A map of all proposals, indexed by      │ │
│ │                    their IDs.']}, {'name':                 │ │
│ │                    'UnrewardedProposals', 'modifier':      │ │
│ │                    'Optional', 'type': {'Map': {'hashers': │ │
│ │                    ['Identity'], 'key': 6, 'value': 189}}, │ │
│ │                    'default': '\x00', 'documentation':     │ │
│ │                    []}, {'name':                           │ │
│ │                    'NotDelegatingVotingPower', 'modifier': │ │
│ │                    'Default', 'type': {'Plain': 187},      │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    A map relating all modules and the      │ │
│ │                    stakers that are currently **NOT**      │ │
│ │                    delegating their', ' voting power.',    │ │
│ │                    '', ' Indexed by the **staked** module  │ │
│ │                    and the subnet the stake is allocated   │ │
│ │                    to, the value is a', ' set of all       │ │
│ │                    modules that are delegating their       │ │
│ │                    voting power on that subnet.']},        │ │
│ │                    {'name': 'GlobalGovernanceConfig',      │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 49}, 'default':               │ │
│ │                    '0x00a0724e18090000d0fb0100010200a0724… │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'DaoTreasuryAddress', 'modifier':       │ │
│ │                    'Default', 'type': {'Plain': 0},        │ │
│ │                    'default':                              │ │
│ │                    'modlpy/subsp\x00\x00\x00\x00\x00\x00\… │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'GeneralSubnetApplicationCost',         │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 6}, 'default':                │ │
│ │                    '0x0010a5d4e8000000', 'documentation':  │ │
│ │                    []}, {'name': 'RestrictContractDeploy', │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 9}, 'default': '\x00',        │ │
│ │                    'documentation': [' Determines whether  │ │
│ │                    smart contract can be deployed by       │ │
│ │                    everyone or only by the curator']},     │ │
│ │                    {'name': 'CuratorApplications',         │ │
│ │                    'modifier': 'Optional', 'type': {'Map': │ │
│ │                    {'hashers': ['Identity'], 'key': 6,     │ │
│ │                    'value': 194}}, 'default': '\x00',      │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'LegitWhitelist', 'modifier':           │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 0, 'value': 40}},  │ │
│ │                    'default': '', 'documentation': []},    │ │
│ │                    {'name': 'Curator', 'modifier':         │ │
│ │                    'Default', 'type': {'Plain': 0},        │ │
│ │                    'default':                              │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00\x00\… │ │
│ │                    'documentation': []}]}, 'calls': {'ty': │ │
│ │                    151}, 'event': {'ty': 51}, 'constants': │ │
│ │                    [{'name': 'PalletId', 'type': 181,      │ │
│ │                    'value': 'py/subsp', 'documentation':   │ │
│ │                    [" This pallet's ID, used for           │ │
│ │                    generating the treasury account         │ │
│ │                    ID."]}], 'error': {'ty': 196}, 'index': │ │
│ │                    10}, {'name': 'SubnetEmissionModule',   │ │
│ │                    'storage': {'prefix':                   │ │
│ │                    'SubnetEmissionModule', 'entries':      │ │
│ │                    [{'name': 'Weights', 'modifier':        │ │
│ │                    'Optional', 'type': {'Map': {'hashers': │ │
│ │                    ['Identity', 'Identity'], 'key': 163,   │ │
│ │                    'value': 162}}, 'default': '\x00',      │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'WeightEncryptionData', 'modifier':     │ │
│ │                    'Optional', 'type': {'Map': {'hashers': │ │
│ │                    ['Identity', 'Identity'], 'key': 163,   │ │
│ │                    'value': 197}}, 'default': '\x00',      │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'SubnetDecryptionData', 'modifier':     │ │
│ │                    'Optional', 'type': {'Map': {'hashers': │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    198}}, 'default': '\x00',               │ │
│ │                    'documentation': [' Decryption Node     │ │
│ │                    Info assigned to subnet']}, {'name':    │ │
│ │                    'SubnetConsensusType', 'modifier':      │ │
│ │                    'Optional', 'type': {'Map': {'hashers': │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    200}}, 'default': '\x00',               │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'ConsensusParameters', 'modifier':      │ │
│ │                    'Optional', 'type': {'Map': {'hashers': │ │
│ │                    ['Identity', 'Identity'], 'key': 201,   │ │
│ │                    'value': 202}}, 'default': '\x00',      │ │
│ │                    'documentation': [' Netuid, to block    │ │
│ │                    number to consensus parameters']},      │ │
│ │                    {'name': 'BannedDecryptionNodes',       │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 0,     │ │
│ │                    'value': 6}}, 'default':                │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [' Stores non          │ │
│ │                    responsive decryption nodes']},         │ │
│ │                    {'name': 'DecryptionNodeBanQueue',      │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity', 'Identity'],   │ │
│ │                    'key': 176, 'value': 6}}, 'default':    │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': [" Stores offchain     │ │
│ │                    workers that are going to be banned, if │ │
│ │                    their weights aren't received within",  │ │
│ │                    ' the buffer period', ' Subnet: u16 ,   │ │
│ │                    Decryption Node: AccountId, Buffer:     │ │
│ │                    BlockNumber (current block +            │ │
│ │                    buffer)']}, {'name': 'PendingEmission', │ │
│ │                    'modifier': 'Default', 'type': {'Map':  │ │
│ │                    {'hashers': ['Identity'], 'key': 46,    │ │
│ │                    'value': 6}}, 'default':                │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'SubnetEmission', 'modifier':           │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value': 6}},  │ │
│ │                    'default':                              │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00',     │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'DecryptionNodes', 'modifier':          │ │
│ │                    'Default', 'type': {'Plain': 214},      │ │
│ │                    'default': '\x00', 'documentation': ['  │ │
│ │                    This storage is managed dynamically     │ │
│ │                    based on the do_keep_alive offchain     │ │
│ │                    worker call', ' It is built from the    │ │
│ │                    authority keys']}, {'name':             │ │
│ │                    'DecryptionNodeCursor', 'modifier':     │ │
│ │                    'Default', 'type': {'Plain': 46},       │ │
│ │                    'default': '\x00\x00', 'documentation': │ │
│ │                    []}, {'name': 'Authorities',            │ │
│ │                    'modifier': 'Default', 'type':          │ │
│ │                    {'Plain': 215}, 'default': '\x00',      │ │
│ │                    'documentation': [' Association of      │ │
│ │                    signing public keys with associated rsa │ │
│ │                    encryption public keys.']}, {'name':    │ │
│ │                    'UnitEmission', 'modifier': 'Default',  │ │
│ │                    'type': {'Plain': 6}, 'default':        │ │
│ │                    '0xb4b5bc6305000000', 'documentation':  │ │
│ │                    []}]}, 'calls': {'ty': 152}, 'event':   │ │
│ │                    {'ty': 52}, 'constants': [{'name':      │ │
│ │                    'Decimals', 'type': 2, 'value': '\t',   │ │
│ │                    'documentation': []}, {'name':          │ │
│ │                    'HalvingInterval', 'type': 6, 'value':  │ │
│ │                    '0x70920c0500000000', 'documentation':  │ │
│ │                    []}, {'name': 'MaxSupply', 'type': 6,   │ │
│ │                    'value': '0xe024190a00000000',          │ │
│ │                    'documentation': [' The maximum token   │ │
│ │                    supply.']}, {'name':                    │ │
│ │                    'DecryptionNodeRotationInterval',       │ │
│ │                    'type': 6, 'value':                     │ │
│ │                    '0x8813000000000000', 'documentation':  │ │
│ │                    []}, {'name': 'MaxAuthorities', 'type': │ │
│ │                    4, 'value': 'd\x00\x00\x00',            │ │
│ │                    'documentation': [' Maximum number of   │ │
│ │                    authorities.']}, {'name':               │ │
│ │                    'OffchainWorkerBanDuration', 'type': 6, │ │
│ │                    'value': '0*\x00\x00\x00\x00\x00\x00',  │ │
│ │                    'documentation': [' The duration (in    │ │
│ │                    blocks) for which an offchain worker is │ │
│ │                    banned after being cancelled']},        │ │
│ │                    {'name': 'MissedPingsForInactivity',    │ │
│ │                    'type': 2, 'value': '\x05',             │ │
│ │                    'documentation': [' The number of       │ │
│ │                    consecutive missed pings after which a  │ │
│ │                    decryption node is considered', '       │ │
│ │                    inactive']}, {'name': 'PingInterval',   │ │
│ │                    'type': 6, 'value':                     │ │
│ │                    '2\x00\x00\x00\x00\x00\x00\x00',        │ │
│ │                    'documentation': [' The interval (in    │ │
│ │                    blocks) at which the decryption node    │ │
│ │                    should send a keep-alive']}, {'name':   │ │
│ │                    'EncryptionPeriodBuffer', 'type': 6,    │ │
│ │                    'value':                                │ │
│ │                    'd\x00\x00\x00\x00\x00\x00\x00',        │ │
│ │                    'documentation': [' The extra buffer    │ │
│ │                    period in blocks that runtime will wait │ │
│ │                    before banning a decryption', ' node.   │ │
│ │                    So the final count is                   │ │
│ │                    `MaxEncryptionPeriod +                  │ │
│ │                    EncryptionPeriodBuffer`']}], 'error':   │ │
│ │                    None, 'index': 11}, {'name':            │ │
│ │                    'Offworker', 'storage': {'prefix':      │ │
│ │                    'Offworker', 'entries': [{'name':       │ │
│ │                    'MeasuredStakeAmount', 'modifier':      │ │
│ │                    'Default', 'type': {'Plain': 48},       │ │
│ │                    'default': '\n', 'documentation': ['    │ │
│ │                    The amount of actual consensus sum      │ │
│ │                    stake. Used for a simulated             │ │
│ │                    consensus.']}, {'name':                 │ │
│ │                    'IrrationalityDelta', 'modifier':       │ │
│ │                    'Default', 'type': {'Map': {'hashers':  │ │
│ │                    ['Identity'], 'key': 46, 'value':       │ │
│ │                    139}}, 'default':                       │ │
│ │                    '\x00\x00\x00\x00\x00\x00\x00\x00\x00\… │ │
│ │                    'documentation': [' The amount of delta │ │
│ │                    between comulative copier dividends and │ │
│ │                    compulative delegator dividends.']}]},  │ │
│ │                    'calls': {'ty': 154}, 'event': {'ty':   │ │
│ │                    53}, 'constants': [{'name':             │ │
│ │                    'UnsignedPriority', 'type': 6, 'value': │ │
│ │                    'd\x00\x00\x00\x00\x00\x00\x00',        │ │
│ │                    'documentation': []}], 'error': {'ty':  │ │
│ │                    216}, 'index': 12}], 'extrinsic':       │ │
│ │                    {'ty': 217, 'version': 4,               │ │
│ │                    'signed_extensions': [{'identifier':    │ │
│ │                    'CheckNonZeroSender', 'ty': 219,        │ │
│ │                    'additional_signed': 40},               │ │
│ │                    {'identifier': 'CheckSpecVersion',      │ │
│ │                    'ty': 220, 'additional_signed': 4},     │ │
│ │                    {'identifier': 'CheckTxVersion', 'ty':  │ │
│ │                    221, 'additional_signed': 4},           │ │
│ │                    {'identifier': 'CheckGenesis', 'ty':    │ │
│ │                    222, 'additional_signed': 13},          │ │
│ │                    {'identifier': 'CheckMortality', 'ty':  │ │
│ │                    223, 'additional_signed': 13},          │ │
│ │                    {'identifier': 'CheckNonce', 'ty': 225, │ │
│ │                    'additional_signed': 40},               │ │
│ │                    {'identifier': 'CheckWeight', 'ty':     │ │
│ │                    226, 'additional_signed': 40},          │ │
│ │                    {'identifier':                          │ │
│ │                    'ChargeTransactionPayment', 'ty': 227,  │ │
│ │                    'additional_signed': 40}]},             │ │
│ │                    'runtime_type': 199}}))>                │ │
│ │           pallet = 'SubspaceModule'                        │ │
│ │           params = []                                      │ │
│ │   runtime_config = <scalecodec.base.RuntimeConfigurationO… │ │
│ │                    object at 0x1063fd120>                  │ │
│ │ storage_function = 'TrustRatio'                            │ │
│ │  storage_key_obj = <StorageKey(pallet=SubspaceModule,      │ │
│ │                    storage_function=TrustRatio,            │ │
│ │                    params=[])>                             │ │
│ ╰────────────────────────────────────────────────────────────╯ │
│                                                                │
│ /Users/mac/Documents/GitHub/datagpt/mindsdb/env/lib/python3.10 │
│ /site-packages/substrateinterface/storage.py:158 in generate   │
│                                                                │
│   155 │   │   self.metadata_storage_function = metadata_pallet │
│   156 │   │                                                    │
│   157 │   │   if not self.metadata_storage_function:           │
│ ❱ 158 │   │   │   raise StorageFunctionNotFound(f'Storage func │
│   159 │   │                                                    │
│   160 │   │   # Process specific type of storage function      │
│   161 │   │   self.value_scale_type = self.metadata_storage_fu │
│                                                                │
│ ╭────────────────────────── locals ──────────────────────────╮ │
│ │ metadata_pallet = <PalletMetadataV14(value={'name':        │ │
│ │                   'SubspaceModule', 'storage': {'prefix':  │ │
│ │                   'SubspaceModule', 'entries': [{'name':   │ │
│ │                   'Bonds', 'modifier': 'Default', 'type':  │ │
│ │                   {'Map': {'hashers': ['Identity',         │ │
│ │                   'Identity'], 'key': 163, 'value': 162}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'BondsMovingAverage',           │ │
│ │                   'modifier': 'Default', 'type': {'Map':   │ │
│ │                   {'hashers': ['Identity'], 'key': 46,     │ │
│ │                   'value': 6}}, 'default':                 │ │
│ │                   '0xa0bb0d0000000000', 'documentation':   │ │
│ │                   []}, {'name': 'ValidatorPermits',        │ │
│ │                   'modifier': 'Default', 'type': {'Map':   │ │
│ │                   {'hashers': ['Identity'], 'key': 46,     │ │
│ │                   'value': 175}}, 'default': '\x00',       │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'ValidatorTrust', 'modifier': 'Default', │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Identity'], 'key': 46, 'value': 153}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'PruningScores', 'modifier':    │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 153}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'MaxAllowedValidators',         │ │
│ │                   'modifier': 'Default', 'type': {'Map':   │ │
│ │                   {'hashers': ['Identity'], 'key': 46,     │ │
│ │                   'value': 137}}, 'default': '\x00',       │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'Consensus', 'modifier': 'Default',      │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Identity'], 'key': 46, 'value': 153}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'Active', 'modifier':           │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 175}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'Rank', 'modifier': 'Default',  │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Identity'], 'key': 46, 'value': 153}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'Burn', 'modifier': 'Default',  │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Identity'], 'key': 46, 'value': 6}},   │ │
│ │                   'default':                               │ │
│ │                   '\x00\x00\x00\x00\x00\x00\x00\x00',      │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'MaximumSetWeightCallsPerEpoch',         │ │
│ │                   'modifier': 'Optional', 'type': {'Map':  │ │
│ │                   {'hashers': ['Identity'], 'key': 46,     │ │
│ │                   'value': 46}}, 'default': '\x00',        │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'SetWeightCallsPerEpoch', 'modifier':    │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity', 'Identity'], 'key': 176,    │ │
│ │                   'value': 46}}, 'default': '\x00\x00',    │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'SubnetNames', 'modifier': 'Default',    │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Identity'], 'key': 46, 'value': 14}},  │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'SubnetMetadata', 'modifier':   │ │
│ │                   'Optional', 'type': {'Map': {'hashers':  │ │
│ │                   ['Identity'], 'key': 46, 'value': 136}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'N', 'modifier': 'Default',     │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Identity'], 'key': 46, 'value': 46}},  │ │
│ │                   'default': '\x00\x00', 'documentation':  │ │
│ │                   []}, {'name': 'Founder', 'modifier':     │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 0}},   │ │
│ │                   'default':                               │ │
│ │                   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x… │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'IncentiveRatio', 'modifier': 'Default', │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Identity'], 'key': 46, 'value': 46}},  │ │
│ │                   'default': '2\x00', 'documentation':     │ │
│ │                   []}, {'name': 'ModuleBurnConfig',        │ │
│ │                   'modifier': 'Default', 'type': {'Map':   │ │
│ │                   {'hashers': ['Identity'], 'key': 46,     │ │
│ │                   'value': 138}}, 'default':               │ │
│ │                   '0x00e40b5402000000005cb2ec22000000ffff… │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'RegistrationsThisInterval', 'modifier': │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 46}},  │ │
│ │                   'default': '\x00\x00', 'documentation':  │ │
│ │                   []}, {'name': 'MaxEncryptionPeriod',     │ │
│ │                   'modifier': 'Default', 'type': {'Map':   │ │
│ │                   {'hashers': ['Identity'], 'key': 46,     │ │
│ │                   'value': 87}}, 'default': '\x00',        │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'CopierMargin', 'modifier': 'Default',   │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Identity'], 'key': 46, 'value': 139}}, │ │
│ │                   'default':                               │ │
│ │                   '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x… │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'UseWeightsEncryption', 'modifier':      │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 9}},   │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'AlphaValues', 'modifier':      │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 163}}, │ │
│ │                   'default': '0x33b366e6',                 │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'MinValidatorStake', 'modifier':         │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 6}},   │ │
│ │                   'default': '0x00203d88792d0000',         │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'MaxAllowedUids', 'modifier': 'Default', │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Identity'], 'key': 46, 'value': 46}},  │ │
│ │                   'default': '0xa401', 'documentation':    │ │
│ │                   []}, {'name': 'ImmunityPeriod',          │ │
│ │                   'modifier': 'Default', 'type': {'Map':   │ │
│ │                   {'hashers': ['Identity'], 'key': 46,     │ │
│ │                   'value': 46}}, 'default': '\x00\x00',    │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'MinAllowedWeights', 'modifier':         │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 46}},  │ │
│ │                   'default': '\x01\x00', 'documentation':  │ │
│ │                   []}, {'name': 'MaxWeightAge',            │ │
│ │                   'modifier': 'Default', 'type': {'Map':   │ │
│ │                   {'hashers': ['Identity'], 'key': 46,     │ │
│ │                   'value': 6}}, 'default':                 │ │
│ │                   '\x10\x0e\x00\x00\x00\x00\x00\x00',      │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'MaxAllowedWeights', 'modifier':         │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 46}},  │ │
│ │                   'default': '0xa401', 'documentation':    │ │
│ │                   []}, {'name': 'Tempo', 'modifier':       │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 46}},  │ │
│ │                   'default': 'd\x00', 'documentation':     │ │
│ │                   []}, {'name': 'FounderShare',            │ │
│ │                   'modifier': 'Default', 'type': {'Map':   │ │
│ │                   {'hashers': ['Identity'], 'key': 46,     │ │
│ │                   'value': 46}}, 'default': '\x10\x00',    │ │
│ │                   'documentation': []}, {'name': 'Uids',   │ │
│ │                   'modifier': 'Optional', 'type': {'Map':  │ │
│ │                   {'hashers': ['Identity',                 │ │
│ │                   'Blake2_128Concat'], 'key': 176,         │ │
│ │                   'value': 46}}, 'default': '\x00',        │ │
│ │                   'documentation': []}, {'name': 'Keys',   │ │
│ │                   'modifier': 'Optional', 'type': {'Map':  │ │
│ │                   {'hashers': ['Identity', 'Identity'],    │ │
│ │                   'key': 163, 'value': 0}}, 'default':     │ │
│ │                   '\x00', 'documentation': []}, {'name':   │ │
│ │                   'Name', 'modifier': 'Default', 'type':   │ │
│ │                   {'Map': {'hashers': ['Twox64Concat',     │ │
│ │                   'Twox64Concat'], 'key': 163, 'value':    │ │
│ │                   14}}, 'default': '\x00',                 │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'Address', 'modifier': 'Default',        │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Twox64Concat', 'Twox64Concat'], 'key': │ │
│ │                   163, 'value': 14}}, 'default': '\x00',   │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'Metadata', 'modifier': 'Optional',      │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Twox64Concat', 'Twox64Concat'], 'key': │ │
│ │                   176, 'value': 14}}, 'default': '\x00',   │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'Incentive', 'modifier': 'Default',      │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Identity'], 'key': 46, 'value': 153}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'Trust', 'modifier': 'Default', │ │
│ │                   'type': {'Map': {'hashers':              │ │
│ │                   ['Identity'], 'key': 46, 'value': 153}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'Dividends', 'modifier':        │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 153}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'Emission', 'modifier':         │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 131}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'LastUpdate', 'modifier':       │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 46, 'value': 131}}, │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'SubnetRegistrationBlock',      │ │
│ │                   'modifier': 'Optional', 'type': {'Map':  │ │
│ │                   {'hashers': ['Identity'], 'key': 46,     │ │
│ │                   'value': 6}}, 'default': '\x00',         │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'RegistrationBlock', 'modifier':         │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity', 'Identity'], 'key': 163,    │ │
│ │                   'value': 6}}, 'default':                 │ │
│ │                   '\x00\x00\x00\x00\x00\x00\x00\x00',      │ │
│ │                   'documentation': []}, {'name': 'Rho',    │ │
│ │                   'modifier': 'Default', 'type': {'Plain': │ │
│ │                   46}, 'default': '\n\x00',                │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'RootNetWeightCalls', 'modifier':        │ │
│ │                   'Optional', 'type': {'Map': {'hashers':  │ │
│ │                   ['Identity'], 'key': 46, 'value': 40}},  │ │
│ │                   'default': '\x00', 'documentation': []}, │ │
│ │                   {'name': 'Kappa', 'modifier': 'Default', │ │
│ │                   'type': {'Plain': 46}, 'default':        │ │
│ │                   '0xff7f', 'documentation': []}, {'name': │ │
│ │                   'MaxNameLength', 'modifier': 'Default',  │ │
│ │                   'type': {'Plain': 46}, 'default': '      │ │
│ │                   \x00', 'documentation': [' Maximum       │ │
│ │                   allowed length for names']}, {'name':    │ │
│ │                   'MinNameLength', 'modifier': 'Default',  │ │
│ │                   'type': {'Plain': 46}, 'default':        │ │
│ │                   '\x02\x00', 'documentation': [' Minimum  │ │
│ │                   allowed length for names']}, {'name':    │ │
│ │                   'MaxAllowedSubnets', 'modifier':         │ │
│ │                   'Default', 'type': {'Plain': 46},        │ │
│ │                   'default': '\x00\x01', 'documentation':  │ │
│ │                   [' Maximum number of allowed subnets']}, │ │
│ │                   {'name': 'MaxAllowedModules',            │ │
│ │                   'modifier': 'Default', 'type': {'Plain': │ │
│ │                   46}, 'default': "\x10'",                 │ │
│ │                   'documentation': [' Maximum allowed      │ │
│ │                   modules globally']}, {'name':            │ │
│ │                   'MinWeightStake', 'modifier': 'Default', │ │
│ │                   'type': {'Plain': 6}, 'default':         │ │
│ │                   '\x00\x00\x00\x00\x00\x00\x00\x00',      │ │
│ │                   'documentation': [' Minimum stake        │ │
│ │                   weight']}, {'name':                      │ │
│ │                   'MaxAllowedWeightsGlobal', 'modifier':   │ │
│ │                   'Default', 'type': {'Plain': 46},        │ │
│ │                   'default': '\x00\x02', 'documentation':  │ │
│ │                   [' Global maximum allowed weights']},    │ │
│ │                   {'name': 'RegistrationsPerBlock',        │ │
│ │                   'modifier': 'Default', 'type': {'Plain': │ │
│ │                   46}, 'default': '\x00\x00',              │ │
│ │                   'documentation': [' Number of            │ │
│ │                   registrations in the current block']},   │ │
│ │                   {'name': 'MaxRegistrationsPerBlock',     │ │
│ │                   'modifier': 'Default', 'type': {'Plain': │ │
│ │                   46}, 'default': '\n\x00',                │ │
│ │                   'documentation': [' Maximum allowed      │ │
│ │                   registrations per block']}, {'name':     │ │
│ │                   'StakeFrom', 'modifier': 'Default',      │ │
│ │                   'type': {'Map': {'hashers': ['Identity', │ │
│ │                   'Identity'], 'key': 177, 'value': 6}},   │ │
│ │                   'default':                               │ │
│ │                   '\x00\x00\x00\x00\x00\x00\x00\x00',      │ │
│ │                   'documentation': [' Maps (from_account,  │ │
│ │                   to_account) to stake amount']}, {'name': │ │
│ │                   'StakeTo', 'modifier': 'Default',        │ │
│ │                   'type': {'Map': {'hashers': ['Identity', │ │
│ │                   'Identity'], 'key': 177, 'value': 6}},   │ │
│ │                   'default':                               │ │
│ │                   '\x00\x00\x00\x00\x00\x00\x00\x00',      │ │
│ │                   'documentation': [' Maps (to_account,    │ │
│ │                   from_account) to stake amount']},        │ │
│ │                   {'name': 'TotalStake', 'modifier':       │ │
│ │                   'Default', 'type': {'Plain': 6},         │ │
│ │                   'default':                               │ │
│ │                   '\x00\x00\x00\x00\x00\x00\x00\x00',      │ │
│ │                   'documentation': [' Total stake in the   │ │
│ │                   system']}, {'name': 'SubnetGaps',        │ │
│ │                   'modifier': 'Default', 'type': {'Plain': │ │
│ │                   178}, 'default': '\x00',                 │ │
│ │                   'documentation': [' Available subnet IDs │ │
│ │                   that can be reused']}, {'name':          │ │
│ │                   'FloorFounderShare', 'modifier':         │ │
│ │                   'Default', 'type': {'Plain': 2},         │ │
│ │                   'default': '\x08', 'documentation': ['   │ │
│ │                   Minimum share percentage for subnet      │ │
│ │                   founders']}, {'name':                    │ │
│ │                   'SubnetBurnConfig', 'modifier':          │ │
│ │                   'Default', 'type': {'Plain': 138},       │ │
│ │                   'default':                               │ │
│ │                   '0x00204aa9d101000000407a10f35a0000ffff… │ │
│ │                   'documentation': [' General burn         │ │
│ │                   configuration for subnet                 │ │
│ │                   registration']}, {'name':                │ │
│ │                   'SubnetRegistrationsThisInterval',       │ │
│ │                   'modifier': 'Default', 'type': {'Plain': │ │
│ │                   46}, 'default': '\x00\x00',              │ │
│ │                   'documentation': [' Subnet registrations │ │
│ │                   in current interval']}, {'name':         │ │
│ │                   'SubnetBurn', 'modifier': 'Default',     │ │
│ │                   'type': {'Plain': 6}, 'default':         │ │
│ │                   '0x00204aa9d1010000', 'documentation':   │ │
│ │                   [' Minimum burn amount for subnet        │ │
│ │                   registration']}, {'name':                │ │
│ │                   'MinimumAllowedStake', 'modifier':       │ │
│ │                   'Default', 'type': {'Plain': 6},         │ │
│ │                   'default': '0x0065cd1d00000000',         │ │
│ │                   'documentation': [' Global minimum       │ │
│ │                   allowed stake']}, {'name':               │ │
│ │                   'SubnetImmunityPeriod', 'modifier':      │ │
│ │                   'Default', 'type': {'Plain': 6},         │ │
│ │                   'default': '0x907e000000000000',         │ │
│ │                   'documentation': [' Subnet immunity      │ │
│ │                   period']}, {'name':                      │ │
│ │                   'WeightSettingDelegation', 'modifier':   │ │
│ │                   'Optional', 'type': {'Map': {'hashers':  │ │
│ │                   ['Identity', 'Identity'], 'key': 176,    │ │
│ │                   'value': 0}}, 'default': '\x00',         │ │
│ │                   'documentation': [' Control delegation   │ │
│ │                   per account']}, {'name': 'Bridged',      │ │
│ │                   'modifier': 'Default', 'type': {'Map':   │ │
│ │                   {'hashers': ['Identity'], 'key': 0,      │ │
│ │                   'value': 6}}, 'default':                 │ │
│ │                   '\x00\x00\x00\x00\x00\x00\x00\x00',      │ │
│ │                   'documentation': []}, {'name':           │ │
│ │                   'MinFees', 'modifier': 'Default',        │ │
│ │                   'type': {'Plain': 179}, 'default':       │ │
│ │                   '\x05\x04', 'documentation': [' Storage  │ │
│ │                   for minimum fees that can be updated via │ │
│ │                   runtime']}, {'name':                     │ │
│ │                   'ValidatorFeeConfig', 'modifier':        │ │
│ │                   'Default', 'type': {'Map': {'hashers':   │ │
│ │                   ['Identity'], 'key': 0, 'value': 180}},  │ │
│ │                   'default': '\x05\x04', 'documentation':  │ │
│ │                   [' Maps validator accounts to their fee  │ │
│ │                   configuration']}]}, 'calls': {'ty':      │ │
│ │                   130}, 'event': {'ty': 45}, 'constants':  │ │
│ │                   [{'name': 'PalletId', 'type': 181,       │ │
│ │                   'value': 'py/subsp', 'documentation': [" │ │
│ │                   This pallet's ID, used for generating    │ │
│ │                   the treasury account ID."]}], 'error':   │ │
│ │                   {'ty': 182}, 'index': 9})>               │ │
│ │            self = <StorageKey(pallet=SubspaceModule,       │ │
│ │                   storage_function=TrustRatio, params=[])> │ │
│ ╰────────────────────────────────────────────────────────────╯ │
╰────────────────────────────────────────────────────────────────╯
StorageFunctionNotFound: Storage function 
"SubspaceModule.TrustRatio" not found
